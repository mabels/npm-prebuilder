import * as ts from 'typescript';

// const dts = `declare namespace Schema {}`;
const source = ts.createSourceFile('declare.d.ts', '', ts.ScriptTarget.ES2015);

/* tslint:disable:no-console */
// console.log(util.inspect(source, { depth: null, colors: true }));

function syntaxKindToName(kind: ts.SyntaxKind) {
    return (<any>ts).SyntaxKind[kind];
}
function printAllChildren(node: ts.Node, depth = 0) {
    console.log(new Array(depth + 1).join('--'), syntaxKindToName(node.kind), node.pos, node.end);
    depth++;
    node.getChildren().forEach((c) => printAllChildren(c, depth));
}
printAllChildren(source);

function printAllChildrenKind(node: ts.Node, depth = 0) {
    console.log(new Array(depth + 1).join('--'), node.kind, syntaxKindToName(node.kind));
    depth += 1;
    switch (node.kind) {
        case ts.SyntaxKind.ModuleDeclaration:
            const md = node as ts.ModuleDeclaration;
            console.log(new Array(depth + 1).join('  '), '  body:', md.body.kind);
    }
}

const syntheticNode = ts.createClassDeclaration(
    undefined,
    undefined,
                /*name*/ ts.createIdentifier('C'),
    undefined,
    undefined,
    ts.createNodeArray([
        ts.createProperty(
            undefined,
            ts.createNodeArray([ts.createToken(ts.SyntaxKind.PublicKeyword)]),
            ts.createIdentifier('prop'),
            undefined,
            undefined,
            undefined
        )
    ])
);
const root = ts.createModuleDeclaration(
    undefined,
    undefined, // ts.createNodeArray([ts.createToken(ts.SyntaxKind.DeclareKeyword)]),
    ts.createIdentifier('Schema'),
    ts.createModuleBlock([
        syntheticNode,
        ts.createClassDeclaration(undefined, undefined, ts.createIdentifier('Circular'), [], [], [
            ts.createProperty(undefined, undefined, 'root', ts.createToken(ts.SyntaxKind.QuestionToken), <ts.TypeNode> ts.createNode(ts.SyntaxKind.NumberKeyword), undefined),
        ]),
    ]));
printAllChildrenKind(root);


const printer = ts.createPrinter();
console.log(printer.printNode(ts.EmitHint.Unspecified, root, source));
console.log(printer.printNode(ts.EmitHint.Unspecified, syntheticNode, source));
