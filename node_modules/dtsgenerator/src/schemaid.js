"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var jsonPointer_1 = require("./jsonPointer");
var utils_1 = require("./utils");
var SchemaId = (function () {
    function SchemaId(id, parentIds) {
        var _this = this;
        this.absoluteId = id;
        if (parentIds) {
            parentIds.forEach(function (parent) {
                if (parent) {
                    _this.absoluteId = url.resolve(parent, _this.absoluteId);
                }
            });
        }
        if (this.absoluteId.indexOf('#') < 0) {
            this.absoluteId += '#';
        }
        if (this.absoluteId.indexOf('://') < 0 && this.absoluteId[0] !== '/' && this.absoluteId[0] !== '#') {
            this.absoluteId = '/' + this.absoluteId;
        }
        this.baseId = url.parse(this.absoluteId);
    }
    SchemaId.prototype.getAbsoluteId = function () {
        return this.absoluteId;
    };
    SchemaId.prototype.isFetchable = function () {
        return /https?\:\/\//.test(this.absoluteId);
    };
    SchemaId.prototype.getFileId = function () {
        return this.absoluteId.replace(/#.*$/, '#');
    };
    SchemaId.prototype.isJsonPointerHash = function () {
        return this.absoluteId === '#' || /#\//.test(this.absoluteId);
    };
    SchemaId.prototype.getJsonPointerHash = function () {
        var m = /#(\/.*)$/.exec(this.absoluteId);
        if (m == null) {
            return [];
        }
        return jsonPointer_1.parse(m[1]);
    };
    SchemaId.prototype.getTypeNames = function () {
        var ids = [];
        if (this.baseId.host) {
            ids.push(decodeURIComponent(this.baseId.host));
        }
        var addAllParts = function (path) {
            var paths = path.split('/');
            if (paths.length > 1 && paths[0] === '') {
                paths.shift();
            }
            paths.forEach(function (item) {
                ids.push(decodeURIComponent(item));
            });
        };
        if (this.baseId.pathname) {
            addAllParts(this.baseId.pathname);
        }
        if (this.baseId.hash && this.baseId.hash.length > 1) {
            addAllParts(this.baseId.hash.substr(1));
        }
        return ids.map(utils_1.toTypeName);
    };
    SchemaId.prototype.getInterfaceName = function () {
        var names = this.getTypeNames();
        return names[names.length - 1];
    };
    return SchemaId;
}());
exports.SchemaId = SchemaId;
