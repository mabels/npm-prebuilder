"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var JsonPointer = require("./jsonPointer");
var schemaid_1 = require("./schemaid");
var utils = require("./utils");
var TypeDefinition = (function () {
    function TypeDefinition(schema, path, refId) {
        this.schema = schema;
        this.target = JsonPointer.get(schema, path);
        if (!this.target || !this.target.id) {
            this.id = refId || null;
        }
        else {
            var baseId = this.target.id;
            var parentsId = [];
            for (var i = path.length - 1; i >= 0; i--) {
                var parent = JsonPointer.get(schema, path.slice(0, i));
                if (parent && parent.id && typeof parent.id === 'string') {
                    parentsId.push(parent.id);
                }
            }
            this.id = new schemaid_1.SchemaId(baseId, parentsId);
        }
    }
    Object.defineProperty(TypeDefinition.prototype, "schemaId", {
        get: function () {
            return this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypeDefinition.prototype, "rootSchema", {
        get: function () {
            return this.schema;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypeDefinition.prototype, "targetSchema", {
        get: function () {
            return this.target;
        },
        enumerable: true,
        configurable: true
    });
    TypeDefinition.prototype.doProcess = function (process) {
        this.generateType(process, this.target);
    };
    TypeDefinition.prototype.searchRef = function (process, ref) {
        var type = process.referenceResolve(this.schema, ref);
        if (type == null) {
            throw new Error('Target reference is not found: ' + ref);
        }
        return type;
    };
    TypeDefinition.prototype.getTypename = function (id) {
        var sid = (id instanceof schemaid_1.SchemaId) ? id : new schemaid_1.SchemaId(id);
        var result = sid.getTypeNames();
        var myId = this.schemaId;
        if (myId) {
            var baseType = myId.getTypeNames().slice(0, -1);
            for (var _i = 0, baseType_1 = baseType; _i < baseType_1.length; _i++) {
                var name = baseType_1[_i];
                if (result[0] === name) {
                    result.shift();
                }
                else {
                    break;
                }
            }
            if (result.length === 0) {
                return [sid.getInterfaceName()];
            }
        }
        return result;
    };
    TypeDefinition.prototype.checkSchema = function (process, base) {
        var _this = this;
        if (base.allOf) {
            var schema_1 = base;
            base.allOf.forEach(function (p) {
                if (p.$ref) {
                    p = _this.searchRef(process, p.$ref).targetSchema;
                }
                utils.mergeSchema(schema_1, p);
            });
            return schema_1;
        }
        return base;
    };
    TypeDefinition.prototype.generateType = function (process, type) {
        type = this.checkSchema(process, type);
        var types = type.type;
        if (types === undefined && (type.properties || type.additionalProperties)) {
            type.type = 'object';
        }
        else if (Array.isArray(types)) {
            var reduced = utils.reduceTypes(types);
            type.type = reduced.length === 1 ? reduced[0] : reduced;
        }
        process.outputJSDoc(type);
        if (type.type === 'array') {
            this.generateTypeCollection(process, type);
        }
        else if (type.type === 'object' || type.type === 'any') {
            this.generateTypeModel(process, type);
        }
        else {
            this.generateDeclareType(process, type);
        }
    };
    TypeDefinition.prototype.generateDeclareType = function (process, type) {
        var name = this.id.getInterfaceName();
        process.output('export type ').outputType(name).output(' = ');
        this.generateTypeProperty(process, type, true);
    };
    TypeDefinition.prototype.generateTypeModel = function (process, type) {
        var name = this.id.getInterfaceName();
        process.output('export interface ').outputType(name).outputLine(' {');
        process.increaseIndent();
        if (type.type === 'any') {
            // TODO this is not permitted property access by dot.
            process.outputLine('[name: string]: any; // any');
        }
        this.generateProperties(process, type);
        process.decreaseIndent();
        process.outputLine('}');
    };
    TypeDefinition.prototype.generateTypeCollection = function (process, type) {
        var name = this.id.getInterfaceName();
        process.output('export type ').outputType(name).output(' = ');
        this.generateArrayTypeProperty(process, type.items, type.minItems, true);
    };
    TypeDefinition.prototype.generateProperties = function (process, type) {
        var _this = this;
        if (type.additionalProperties) {
            process.output('[name: string]: ');
            if (type.additionalProperties === true) {
                process.outputLine('any;');
            }
            else {
                this.generateTypeProperty(process, type.additionalProperties, true);
            }
        }
        if (type.properties) {
            Object.keys(type.properties).forEach(function (propertyName) {
                var property = type.properties[propertyName];
                process.outputJSDoc(property);
                _this.generatePropertyName(process, propertyName, type);
                _this.generateTypeProperty(process, property);
            });
        }
    };
    TypeDefinition.prototype.generatePropertyName = function (process, propertyName, property) {
        if (propertyName) {
            var optionalProperty = !property.required || property.required.indexOf(propertyName) < 0;
            process.outputKey(propertyName, optionalProperty).output(': ');
        }
    };
    TypeDefinition.prototype.generateTypeProperty = function (process, property, terminate) {
        if (terminate === void 0) { terminate = true; }
        if (!property) {
            return;
        }
        property = this.checkSchema(process, property);
        if (property.$ref) {
            var ref = this.searchRef(process, property.$ref);
            if (ref.id == null) {
                throw new Error('target referenced id is nothing: ' + property.$ref);
            }
            this.generateTypePropertyNamedType(process, this.getTypename(ref.id), false, ref.targetSchema, terminate);
            return;
        }
        var anyOf = property.anyOf || property.oneOf;
        if (anyOf) {
            this.generateArrayedType(process, anyOf, ' | ', terminate);
            return;
        }
        if (property.enum) {
            if (!terminate) {
                process.output('(');
            }
            process.output(property.enum.map(function (s) { return '"' + s + '"'; }).join(' | '));
            if (!terminate) {
                process.output(')');
            }
            else {
                process.outputLine(';');
            }
            return;
        }
        var type = property.type;
        if (type == null) {
            this.generateTypePropertyNamedType(process, 'any', true, property, terminate);
        }
        else if (typeof type === 'string') {
            this.generateTypeName(process, type, property, terminate);
        }
        else {
            var types = utils.reduceTypes(type);
            if (!terminate && types.length > 1) {
                process.output('(');
            }
            for (var index = 0; index < types.length; index++) {
                var t = types[index];
                var isLast = index === types.length - 1;
                this.generateTypeName(process, t, property, terminate && isLast, isLast);
                if (!isLast) {
                    process.output(' | ');
                }
            }
            if (!terminate && types.length > 1) {
                process.output(')');
            }
        }
    };
    TypeDefinition.prototype.generateArrayTypeProperty = function (process, items, minItems, terminate) {
        if (terminate === void 0) { terminate = true; }
        if (!Array.isArray(items)) {
            this.generateTypeProperty(process, items == null ? {} : items, false);
            process.output('[]');
            if (terminate) {
                process.outputLine(';');
            }
        }
        else if (items.length === 0 && minItems === undefined) {
            process.output('any[]');
            if (terminate) {
                process.outputLine(';');
            }
            return;
        }
        else {
            var schemas = items.concat();
            var effectiveMaxItems = 1 + Math.max(minItems || 0, schemas.length);
            for (var unionIndex = minItems === undefined ? 1 : minItems; unionIndex <= effectiveMaxItems; unionIndex++) {
                process.output('[');
                for (var i = 0; i < unionIndex; i++) {
                    if (i < schemas.length) {
                        var type = schemas[i];
                        if (type.id) {
                            this.generateTypePropertyNamedType(process, this.getTypename(type.id), false, type, false);
                        }
                        else {
                            this.generateTypeProperty(process, type, false);
                        }
                    }
                    else {
                        if (i < effectiveMaxItems - 1) {
                            process.output('Object');
                        }
                        else {
                            process.output('any');
                        }
                    }
                    if (i < unionIndex - 1) {
                        process.output(', ');
                    }
                }
                process.output(']');
                if (unionIndex < effectiveMaxItems) {
                    process.output(' | ');
                }
            }
            if (terminate) {
                process.outputLine(';');
            }
        }
    };
    TypeDefinition.prototype.generateArrayedType = function (process, types, separator, terminate) {
        var _this = this;
        if (!terminate) {
            process.output('(');
        }
        types.forEach(function (type, index) {
            var isLast = index === types.length - 1;
            if (type.id) {
                _this.generateTypePropertyNamedType(process, _this.getTypename(type.id), false, type, isLast && terminate);
            }
            else {
                _this.generateTypeProperty(process, type, isLast && terminate);
            }
            if (!isLast) {
                process.output(separator);
            }
        });
        if (!terminate) {
            process.output(')');
        }
    };
    TypeDefinition.prototype.generateTypeName = function (process, type, property, terminate, outputOptional) {
        if (outputOptional === void 0) { outputOptional = true; }
        var tsType = utils.toTSType(type, property);
        if (tsType) {
            this.generateTypePropertyNamedType(process, tsType, true, property, terminate, outputOptional);
            return;
        }
        if (type === 'object') {
            process.outputLine('{');
            process.increaseIndent();
            this.generateProperties(process, property);
            process.decreaseIndent();
            process.output('}');
            if (terminate) {
                process.outputLine(';');
            }
        }
        else if (type === 'array') {
            this.generateArrayTypeProperty(process, property.items, property.minItems, terminate);
        }
        else {
            throw new Error('unknown type: ' + property.type);
        }
    };
    TypeDefinition.prototype.generateTypePropertyNamedType = function (process, typeName, primitiveType, property, terminate, outputOptional) {
        if (terminate === void 0) { terminate = true; }
        if (outputOptional === void 0) { outputOptional = true; }
        if (Array.isArray(typeName)) {
            typeName.forEach(function (type, index) {
                var isLast = index === typeName.length - 1;
                process.outputType(type, isLast ? primitiveType : true);
                if (!isLast) {
                    process.output('.');
                }
            });
        }
        else {
            process.outputType(typeName, primitiveType);
        }
        if (terminate) {
            process.output(';');
        }
        if (outputOptional) {
            this.generateOptionalInformation(process, property, terminate);
        }
        if (terminate) {
            process.outputLine();
        }
    };
    TypeDefinition.prototype.generateOptionalInformation = function (process, property, terminate) {
        if (terminate === void 0) { terminate = true; }
        if (!property.format && !property.pattern) {
            return;
        }
        if (terminate) {
            process.output(' //');
        }
        else {
            process.output(' /*');
        }
        if (property.format) {
            process.output(' ').output(property.format);
        }
        if (property.pattern) {
            process.output(' ').output(property.pattern);
        }
        if (!terminate) {
            process.output(' */ ');
        }
    };
    return TypeDefinition;
}());
exports.TypeDefinition = TypeDefinition;
