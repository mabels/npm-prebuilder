"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commandOptions_1 = require("./commandOptions");
var WriteProcessor = (function () {
    function WriteProcessor(refResolver) {
        this.refResolver = refResolver;
        this.indentChar = ' ';
        this.indentStep = 4;
        this.indent = 0;
        this.results = '';
        this.alreadlyIndentThisLine = false;
        this.referenceStack = [];
    }
    Object.defineProperty(WriteProcessor.prototype, "referenceResolve", {
        get: function () {
            return this.refResolver;
        },
        enumerable: true,
        configurable: true
    });
    WriteProcessor.prototype.pushReference = function (referenceName) {
        return this.referenceStack.push(referenceName);
    };
    WriteProcessor.prototype.popReference = function () {
        return this.referenceStack.pop();
    };
    WriteProcessor.prototype.checkCircularReference = function (referenceName) {
        return this.referenceStack.indexOf(referenceName) < 0;
    };
    WriteProcessor.prototype.output = function (str) {
        this.doIndent();
        this.results += str;
        return this;
    };
    WriteProcessor.prototype.outputType = function (type, primitive) {
        if (primitive === void 0) { primitive = false; }
        var prefix = commandOptions_1.default.prefix;
        if (prefix && !primitive) {
            this.output(prefix);
        }
        type = type.replace(/[^0-9A-Za-z_$]/g, '_');
        if (/^\d/.test(type)) {
            type = '$' + type;
        }
        this.output(type);
        return this;
    };
    WriteProcessor.prototype.outputKey = function (name, optional) {
        if (optional === void 0) { optional = false; }
        if (/[^0-9A-Za-z_$]/.test(name) || /^\d/.test(name)) {
            this.output('\"').output(name).output('\"');
        }
        else {
            this.output(name);
        }
        if (optional) {
            this.output('?');
        }
        return this;
    };
    WriteProcessor.prototype.outputLine = function (str) {
        this.doIndent();
        if (str) {
            this.output(str);
        }
        this.output('\n');
        this.alreadlyIndentThisLine = false;
        return this;
    };
    WriteProcessor.prototype.outputJSDoc = function (spec) {
        var _this = this;
        var description = spec.description, example = spec.example;
        if (!description && !example) {
            return this;
        }
        this.outputLine('/**');
        if (description) {
            description.toString().split('\n').forEach(function (line) {
                _this.output(' * ').outputLine(line);
            });
        }
        if (example) {
            var split = example.toString().split('\n');
            if (split.length === 1) {
                this.outputLine(" * example: " + example);
            }
            else {
                this.outputLine(' * example:');
                split.forEach(function (line) {
                    _this.output(' *   ').outputLine(line);
                });
            }
        }
        this.outputLine(' */');
        return this;
    };
    WriteProcessor.prototype.doIndent = function () {
        if (!this.alreadlyIndentThisLine) {
            var indent = this.getIndent();
            this.results += indent;
            this.alreadlyIndentThisLine = true;
        }
        return this;
    };
    Object.defineProperty(WriteProcessor.prototype, "indentLevel", {
        get: function () {
            return this.indent;
        },
        enumerable: true,
        configurable: true
    });
    WriteProcessor.prototype.increaseIndent = function () {
        this.indent++;
        return this;
    };
    WriteProcessor.prototype.decreaseIndent = function () {
        this.indent--;
        return this;
    };
    WriteProcessor.prototype.getIndent = function () {
        return this.repeatString(this.indent * this.indentStep, this.indentChar);
    };
    WriteProcessor.prototype.repeatString = function (n, s) {
        var result = '';
        for (var i = 0; i < n; i++) {
            result += s;
        }
        return result;
    };
    WriteProcessor.prototype.toDefinition = function () {
        return this.results;
    };
    return WriteProcessor;
}());
exports.WriteProcessor = WriteProcessor;
