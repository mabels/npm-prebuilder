"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var commandOptions_1 = require("./commandOptions");
var jsonSchemaParser_1 = require("./jsonSchemaParser");
try {
    // optional
    /* tslint:disable:no-var-requires */
    require('source-map-support').install();
}
catch (e) {
    // do nothing
}
var commandOptions_2 = require("./commandOptions");
exports.initialize = commandOptions_2.initialize;
function dtsgenerator(schemas) {
    return __awaiter(this, void 0, void 0, function () {
        var parser, _i, schemas_1, schema, _a, _b, path, lschemas, _c, lschemas_1, lschema, _d, _e, url, _f, _g, e_1;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    parser = new jsonSchemaParser_1.JsonSchemaParser();
                    _h.label = 1;
                case 1:
                    _h.trys.push([1, 10, , 11]);
                    if (schemas) {
                        for (_i = 0, schemas_1 = schemas; _i < schemas_1.length; _i++) {
                            schema = schemas_1[_i];
                            parser.parseSchema(schema);
                        }
                    }
                    _a = 0, _b = commandOptions_1.default.files;
                    _h.label = 2;
                case 2:
                    if (!(_a < _b.length)) return [3 /*break*/, 5];
                    path = _b[_a];
                    return [4 /*yield*/, parser.fetchLocalFileSchemas(path)];
                case 3:
                    lschemas = _h.sent();
                    for (_c = 0, lschemas_1 = lschemas; _c < lschemas_1.length; _c++) {
                        lschema = lschemas_1[_c];
                        parser.parseSchema(lschema);
                    }
                    _h.label = 4;
                case 4:
                    _a++;
                    return [3 /*break*/, 2];
                case 5:
                    _d = 0, _e = commandOptions_1.default.urls;
                    _h.label = 6;
                case 6:
                    if (!(_d < _e.length)) return [3 /*break*/, 9];
                    url = _e[_d];
                    _g = (_f = parser).parseSchema;
                    return [4 /*yield*/, parser.fetchRemoteSchema(url)];
                case 7:
                    _g.apply(_f, [_h.sent(), url]);
                    _h.label = 8;
                case 8:
                    _d++;
                    return [3 /*break*/, 6];
                case 9: return [2 /*return*/, parser.generateDts()];
                case 10:
                    e_1 = _h.sent();
                    return [2 /*return*/, Promise.reject(e_1)];
                case 11: return [2 /*return*/];
            }
        });
    });
}
exports.default = dtsgenerator;
