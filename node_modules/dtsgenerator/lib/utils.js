function toTSType(type, debugSource) {
    switch (type) {
        case "any":
        case "null":
            return "any";
        case "string":
            return "string";
        case "integer":
        case "number":
            return "number";
        case "boolean":
            return "boolean";
        case "object":
        case "array":
            return null;
        default:
            if (debugSource) {
                console.error(debugSource);
            }
            throw new Error("unknown type: " + type);
    }
}
exports.toTSType = toTSType;
function capitalizeName(s) {
    if (!s)
        return s;
    s = s.trim();
    return s.replace(/(?:^|[^A-Za-z0-9])([A-Za-z0-9])/g, function (_, m) {
        return m.toUpperCase();
    });
}
exports.capitalizeName = capitalizeName;
function mergeSchema(a, b) {
    Object.keys(b).forEach(function (key) {
        if (a[key]) {
            console.error(a);
            console.error(b);
            throw new Error("invalid schema: duplicate property in allOf.");
        }
        a[key] = b[key];
    });
    return a;
}
exports.mergeSchema = mergeSchema;

//# sourceMappingURL=utils.js.map