var Process = (function () {
    function Process() {
        this.indentChar = " ";
        this.indentStep = 2;
        this.indent = 0;
        this._results = "";
        this._alreadlyIndentThisLine = false;
    }
    Process.prototype.output = function (str) {
        this.doIndent();
        this._results += str;
        return this;
    };
    Process.prototype.outputKey = function (name) {
        if (name.indexOf("-") !== -1 || name.indexOf(".") !== -1) {
            this.output("\"").output(name).output("\"");
        }
        else {
            this.output(name);
        }
        return this;
    };
    Process.prototype.outputLine = function (str) {
        this.doIndent();
        if (str) {
            this.output(str);
        }
        this.output("\n");
        this._alreadlyIndentThisLine = false;
        return this;
    };
    Process.prototype.outputJSDoc = function (description, parameters) {
        var _this = this;
        if (parameters === void 0) { parameters = {}; }
        if (!description && Object.keys(parameters).length === 0) {
            return;
        }
        description = description || "";
        this.outputLine("/**");
        description.split("\n").forEach(function (line) {
            _this.output(" * ").outputLine(line);
        });
        Object.keys(parameters).forEach(function (parameterKey) {
            var parameter = parameters[parameterKey];
            // TODO type doc
            _this.output(" * @params {");
            switch (parameter.type) {
                case "string":
                    _this.output("string");
                    break;
                case "integer":
                case "number":
                    _this.output("number");
                    break;
                case "boolean":
                    _this.output("boolean");
                    break;
                default:
                    console.error(parameter);
                    throw new Error("unknown type");
            }
            _this.output("} ").output(parameterKey).output(" ").outputLine(parameter.description);
        });
        this.outputLine(" */");
        return this;
    };
    Process.prototype.doIndent = function () {
        if (!this._alreadlyIndentThisLine) {
            var indent = this.getIndent();
            this._results += indent;
            this._alreadlyIndentThisLine = true;
        }
        return this;
    };
    Process.prototype.increaseIndent = function () {
        this.indent++;
        return this;
    };
    Process.prototype.decreaseIndent = function () {
        this.indent--;
        return this;
    };
    Process.prototype.getIndent = function () {
        var indent = "";
        for (var i = 0; i < this.indent; i++) {
            indent += this.repeatString(this.indentStep, this.indentChar);
        }
        return indent;
    };
    Process.prototype.repeatString = function (n, s) {
        var result = "";
        for (var i = 0; i < n; i++) {
            result += s;
        }
        return result;
    };
    Process.prototype.toDefinition = function () {
        return this._results;
    };
    return Process;
})();
module.exports = Process;

//# sourceMappingURL=process.js.map