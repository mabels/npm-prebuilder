"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("jest-dom/extend-expect");

var _jestInCase = _interopRequireDefault(require("jest-in-case"));

var _testUtils = require("./helpers/test-utils");

(0, _jestInCase.default)('matches find case-sensitive full strings by default', ({
  dom,
  query,
  queryFn
}) => {
  const queries = (0, _testUtils.render)(dom);
  const queryRegex = new RegExp(query);
  expect(queries[queryFn](query)).toHaveLength(1);
  expect(queries[queryFn](queryRegex)).toHaveLength(1);
  expect(queries[queryFn](text => text === query)).toHaveLength(1);
  expect(queries[queryFn](query.toUpperCase())).toHaveLength(0); // case

  expect(queries[queryFn](query.slice(0, 1))).toHaveLength(0); // substring
}, {
  queryAllByTestId: {
    dom: `<a data-testid="link" href="#">Link</a>`,
    query: `link`,
    queryFn: `queryAllByTestId`
  },
  queryAllByAltText: {
    dom: `
        <img
          alt="Finding Nemo poster" 
          src="/finding-nemo.png"
        />`,
    query: `Finding Nemo poster`,
    queryFn: `queryAllByAltText`
  },
  queryAllByPlaceholderText: {
    dom: `<input placeholder="Dwayne 'The Rock' Johnson" />`,
    query: `Dwayne 'The Rock' Johnson`,
    queryFn: `queryAllByPlaceholderText`
  },
  queryAllBySelectText: {
    dom: `
      <select>
        <option>Option 1</option>
        <option>Option 2</option>
      </select>`,
    query: `Option 1`,
    queryFn: `queryAllBySelectText`
  },
  queryAllByText: {
    dom: `<p>Some content</p>`,
    query: `Some content`,
    queryFn: `queryAllByText`
  },
  queryAllByLabelText: {
    dom: `
        <label for="username">User Name</label>
        <input id="username" />`,
    query: `User Name`,
    queryFn: `queryAllByLabelText`
  }
});
(0, _jestInCase.default)('queries trim leading, trailing & inner whitespace by default', ({
  dom,
  query,
  queryFn
}) => {
  const queries = (0, _testUtils.render)(dom);
  expect(queries[queryFn](query)).toHaveLength(1);
  expect(queries[queryFn](query, {
    collapseWhitespace: false,
    trim: false
  })).toHaveLength(0);
}, {
  queryAllByTestId: {
    dom: `<a data-testid=" link " href="#">Link</a>`,
    query: /^link$/,
    queryFn: `queryAllByTestId`
  },
  queryAllByAltText: {
    dom: `
        <img
          alt="
            Finding Nemo poster " 
          src="/finding-nemo.png"
        />`,
    query: /^Finding Nemo poster$/,
    queryFn: `queryAllByAltText`
  },
  queryAllByPlaceholderText: {
    dom: `
        <input placeholder="  Dwayne 'The Rock' Johnson  " />`,
    query: /^Dwayne/,
    queryFn: `queryAllByPlaceholderText`
  },
  queryAllBySelectText: {
    dom: `
      <select>
        <option>  Option 1  </option>
        <option>Option 2</option>
      </select>`,
    query: `Option 1`,
    queryFn: `queryAllBySelectText`
  },
  queryAllByText: {
    dom: `
        <p>
          Content
          with
          linebreaks
          is
          ok
        </p>`,
    query: `Content with linebreaks is ok`,
    queryFn: `queryAllByText`
  },
  queryAllByLabelText: {
    dom: `
        <label for="username">
          User
          Name
        </label>
        <input id="username" />`,
    query: `User Name`,
    queryFn: `queryAllByLabelText`
  }
});
(0, _jestInCase.default)('{ exact } option toggles case-insensitive partial matches', ({
  dom,
  query,
  queryFn
}) => {
  const queries = (0, _testUtils.render)(dom);
  const queryRegex = new RegExp(query);
  expect(queries[queryFn](query)).toHaveLength(1);
  expect(queries[queryFn](query, {
    exact: false
  })).toHaveLength(1);
  expect(queries[queryFn](queryRegex, {
    exact: false
  })).toHaveLength(1);
  expect(queries[queryFn](text => text === query, {
    exact: false
  })).toHaveLength(1);
  expect(queries[queryFn](query.split(' ')[0], {
    exact: false
  })).toHaveLength(1);
  expect(queries[queryFn](query.toLowerCase(), {
    exact: false
  })).toHaveLength(1);
}, {
  queryAllByPlaceholderText: {
    dom: `<input placeholder="Dwayne 'The Rock' Johnson" />`,
    query: `Dwayne 'The Rock' Johnson`,
    queryFn: `queryAllByPlaceholderText`
  },
  queryAllBySelectText: {
    dom: `
      <select>
        <option>Option 1</option>
        <option>Option 2</option>
      </select>`,
    query: `Option 1`,
    queryFn: `queryAllBySelectText`
  },
  queryAllByLabelText: {
    dom: `
        <label for="username">User Name</label>
        <input id="username" />`,
    query: `User Name`,
    queryFn: `queryAllByLabelText`
  },
  queryAllByText: {
    dom: `
        <p>
          Content
          with
          linebreaks
          is
          ok
        </p>`,
    query: `Content with linebreaks is ok`,
    queryFn: `queryAllByText`
  },
  queryAllByAltText: {
    dom: `
        <img
          alt="Finding Nemo poster" 
          src="/finding-nemo.png"
        />`,
    query: `Finding Nemo poster`,
    queryFn: `queryAllByAltText`
  }
});