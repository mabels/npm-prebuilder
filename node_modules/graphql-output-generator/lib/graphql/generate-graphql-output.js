"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var indent_1 = require("../indent");
// import { generateOutputFromSchema } from './graphql-output-from-type';
// import { createSchema } from './create-schema';
// import { QueryCollector } from './query-collector';
function fieldInvocation(d) {
    return d.queryField || d.mutationField;
}
function schema(style, fields) {
    if (!fields.length) {
        return [];
    }
    var ret = [];
    ret.push(indent_1.indent(0, style + ": {"));
    fields.forEach(function (field) {
        ret.push(indent_1.indent(2, field + ": " + field + "(async () => ({})),"));
    });
    ret.push(indent_1.indent(0, '},'));
    return ret;
}
function generateGraphqlOutput(items, fname) {
    if (fname === void 0) { fname = 'generatedGraphql'; }
    var out = [];
    out.push("(function " + fname + "() {");
    out.push(indent_1.indent(2, "const { createSchema, } = require('" + path.join(__dirname, './create-schema') + "');"));
    out.push(indent_1.indent(2, "const { QueryCollector } = require('" + path.join(__dirname, '../query-collector') + "');"));
    out.push(indent_1.indent(2, "const { graphqlOutputFromType } = require('" + path.join(__dirname, './graphql-output-from-type') + "');"));
    out = out.concat(indent_1.indents(2, items.map(function (item) {
        return "const { " + fieldInvocation(item).varName + " } = require('" + fieldInvocation(item).path + "');";
    })));
    out = out.concat(indent_1.indents(2, items.map(function (item) {
        return "const { " + item.query.varName + " } = require('" + item.query.path + "');";
    })));
    out.push(indent_1.indent(2, 'const queryCollector = new QueryCollector();'));
    out.push(indent_1.indent(2, 'const schema = createSchema({'));
    out = out.concat(indent_1.indents(4, schema('queries', items
        .filter(function (item) { return item.queryField; })
        .map(function (item) { return item.queryField.varName; }))));
    out = out.concat(indent_1.indents(4, schema('mutations', items
        .filter(function (item) { return item.mutationField; })
        .map(function (item) { return item.mutationField.varName; }))));
    out.push(indent_1.indent(2, '});'));
    // out = out.concat(
    items.forEach(function (item) {
        out.push(indent_1.indent(2, '{'));
        out = out.concat(indent_1.indents(3, [
            "const { " + item.output.varName + " } = require('" + item.output.path + "');",
            // `${item.queryMethod}.inject(queryCollector.collect(${JSON.stringify(JSON.stringify(item))}), {}, generateOutputFromSchema(schema, ${item.outputType}));`,
            "queryCollector.collect(JSON.parse(" + JSON.stringify(JSON.stringify(item)) + "), graphqlOutputFromType(schema, " + item.output.varName + "));"
        ]));
        out.push(indent_1.indent(2, '}'));
    });
    // out.push('console.log(queryCollector);');
    out.push(indent_1.indent(2, 'return queryCollector;'));
    out.push('})');
    return out.join('\n');
}
exports.generateGraphqlOutput = generateGraphqlOutput;
//# sourceMappingURL=generate-graphql-output.js.map