"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  render: true,
  cleanup: true,
  flushEffects: true
};
exports.render = render;
exports.cleanup = cleanup;
exports.flushEffects = flushEffects;

var _reactDom = _interopRequireDefault(require("react-dom"));

var _domTestingLibrary = require("dom-testing-library");

Object.keys(_domTestingLibrary).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _domTestingLibrary[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const mountedContainers = new Set();

function render(ui, {
  container,
  baseElement = container,
  queries
} = {}) {
  if (!container) {
    // default to document.body instead of documentElement to avoid output of potentially-large
    // head elements (such as JSS style blocks) in debug output
    baseElement = document.body;
    container = document.body.appendChild(document.createElement('div'));
  } // we'll add it to the mounted containers regardless of whether it's actually
  // added to document.body so the cleanup method works regardless of whether
  // they're passing us a custom container or not.


  mountedContainers.add(container);

  _reactDom.default.render(ui, container);

  return _extends({
    container,
    baseElement,
    // eslint-disable-next-line no-console
    debug: (el = baseElement) => console.log((0, _domTestingLibrary.prettyDOM)(el)),
    unmount: () => _reactDom.default.unmountComponentAtNode(container),
    rerender: rerenderUi => {
      render(rerenderUi, {
        container,
        baseElement
      }); // Intentionally do not return anything to avoid unnecessarily complicating the API.
      // folks can use all the same utilities we return in the first place that are bound to the container
    },
    asFragment: () => {
      /* istanbul ignore if (jsdom limitation) */
      if (typeof document.createRange === 'function') {
        return document.createRange().createContextualFragment(container.innerHTML);
      }

      const template = document.createElement('template');
      template.innerHTML = container.innerHTML;
      return template.content;
    }
  }, (0, _domTestingLibrary.getQueriesForElement)(baseElement, queries));
}

function cleanup() {
  mountedContainers.forEach(cleanupAtContainer);
}

function flushEffects() {
  _reactDom.default.render(null, document.createElement('div'));
} // maybe one day we'll expose this (perhaps even as a utility returned by render).
// but let's wait until someone asks for it.


function cleanupAtContainer(container) {
  if (container.parentNode === document.body) {
    document.body.removeChild(container);
  }

  _reactDom.default.unmountComponentAtNode(container);

  mountedContainers.delete(container);
} // React event system tracks native mouseOver/mouseOut events for
// running onMouseEnter/onMouseLeave handlers
// @link https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/events/EnterLeaveEventPlugin.js#L24-L31


_domTestingLibrary.fireEvent.mouseEnter = _domTestingLibrary.fireEvent.mouseOver;
_domTestingLibrary.fireEvent.mouseLeave = _domTestingLibrary.fireEvent.mouseOut;

_domTestingLibrary.fireEvent.select = (node, init) => {
  // React tracks this event only on focused inputs
  node.focus(); // React creates this event when one of the following native events happens
  // - contextMenu
  // - mouseUp
  // - dragEnd
  // - keyUp
  // - keyDown
  // so we can use any here
  // @link https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/events/SelectEventPlugin.js#L203-L224

  _domTestingLibrary.fireEvent.keyUp(node, init);
}; // just re-export everything from dom-testing-library

/* eslint func-name-matching:0 */