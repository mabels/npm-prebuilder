Function.prototype.$asyncbind = function $asyncbind(self, catcher) {
  "use strict";

  if (!Function.prototype.$asyncbind) {
    Object.defineProperty(Function.prototype, "$asyncbind", {
      value: $asyncbind,
      enumerable: false,
      configurable: true,
      writable: true
    });
  }

  if (!$asyncbind.trampoline) {
    $asyncbind.trampoline = function trampoline(t, x, s, e, u) {
      return function b(q) {
        while (q) {
          if (q.then) {
            q = q.then(b, e);
            return u ? undefined : q;
          }

          try {
            if (q.pop) {
              if (q.length) return q.pop() ? x.call(t) : q;
              q = s;
            } else q = q.call(t);
          } catch (r) {
            return e(r);
          }
        }
      };
    };
  }

  if (!$asyncbind.LazyThenable) {
    $asyncbind.LazyThenable = function () {
      function isThenable(obj) {
        return obj && obj instanceof Object && typeof obj.then === "function";
      }

      function resolution(p, r, how) {
        try {
          var x = how ? how(r) : r;
          if (p === x) return p.reject(new TypeError("Promise resolution loop"));

          if (isThenable(x)) {
            x.then(function (y) {
              resolution(p, y);
            }, function (e) {
              p.reject(e);
            });
          } else {
            p.resolve(x);
          }
        } catch (ex) {
          p.reject(ex);
        }
      }

      function Chained() {}

      ;
      Chained.prototype = {
        resolve: _unchained,
        reject: _unchained,
        then: thenChain
      };

      function _unchained(v) {}

      function thenChain(res, rej) {
        this.resolve = res;
        this.reject = rej;
      }

      function then(res, rej) {
        var chain = new Chained();

        try {
          this._resolver(function (value) {
            return isThenable(value) ? value.then(res, rej) : resolution(chain, value, res);
          }, function (ex) {
            resolution(chain, ex, rej);
          });
        } catch (ex) {
          resolution(chain, ex, rej);
        }

        return chain;
      }

      function Thenable(resolver) {
        this._resolver = resolver;
        this.then = then;
      }

      ;

      Thenable.resolve = function (v) {
        return Thenable.isThenable(v) ? v : {
          then: function then(resolve) {
            return resolve(v);
          }
        };
      };

      Thenable.isThenable = isThenable;
      return Thenable;
    }();

    $asyncbind.EagerThenable = $asyncbind.Thenable = ($asyncbind.EagerThenableFactory = function (tick) {
      tick = tick || typeof process === "object" && process.nextTick || typeof setImmediate === "function" && setImmediate || function (f) {
        setTimeout(f, 0);
      };

      var soon = function () {
        var fq = [],
            fqStart = 0,
            bufferSize = 1024;

        function callQueue() {
          while (fq.length - fqStart) {
            try {
              fq[fqStart]();
            } catch (ex) {}

            fq[fqStart++] = undefined;

            if (fqStart === bufferSize) {
              fq.splice(0, bufferSize);
              fqStart = 0;
            }
          }
        }

        return function (fn) {
          fq.push(fn);
          if (fq.length - fqStart === 1) tick(callQueue);
        };
      }();

      function Zousan(func) {
        if (func) {
          var me = this;
          func(function (arg) {
            me.resolve(arg);
          }, function (arg) {
            me.reject(arg);
          });
        }
      }

      Zousan.prototype = {
        resolve: function resolve(value) {
          if (this.state !== undefined) return;
          if (value === this) return this.reject(new TypeError("Attempt to resolve promise with self"));
          var me = this;

          if (value && (typeof value === "function" || typeof value === "object")) {
            try {
              var first = 0;
              var then = value.then;

              if (typeof then === "function") {
                then.call(value, function (ra) {
                  if (!first++) {
                    me.resolve(ra);
                  }
                }, function (rr) {
                  if (!first++) {
                    me.reject(rr);
                  }
                });
                return;
              }
            } catch (e) {
              if (!first) this.reject(e);
              return;
            }
          }

          this.state = STATE_FULFILLED;
          this.v = value;
          if (me.c) soon(function () {
            for (var n = 0, l = me.c.length; n < l; n++) STATE_FULFILLED(me.c[n], value);
          });
        },
        reject: function reject(reason) {
          if (this.state !== undefined) return;
          this.state = STATE_REJECTED;
          this.v = reason;
          var clients = this.c;
          if (clients) soon(function () {
            for (var n = 0, l = clients.length; n < l; n++) STATE_REJECTED(clients[n], reason);
          });
        },
        then: function then(onF, onR) {
          var p = new Zousan();
          var client = {
            y: onF,
            n: onR,
            p: p
          };

          if (this.state === undefined) {
            if (this.c) this.c.push(client);else this.c = [client];
          } else {
            var s = this.state,
                a = this.v;
            soon(function () {
              s(client, a);
            });
          }

          return p;
        }
      };

      function STATE_FULFILLED(c, arg) {
        if (typeof c.y === "function") {
          try {
            var yret = c.y.call(undefined, arg);
            c.p.resolve(yret);
          } catch (err) {
            c.p.reject(err);
          }
        } else c.p.resolve(arg);
      }

      function STATE_REJECTED(c, reason) {
        if (typeof c.n === "function") {
          try {
            var yret = c.n.call(undefined, reason);
            c.p.resolve(yret);
          } catch (err) {
            c.p.reject(err);
          }
        } else c.p.reject(reason);
      }

      Zousan.resolve = function (val) {
        if (val && val instanceof Zousan) return val;
        var z = new Zousan();
        z.resolve(val);
        return z;
      };

      Zousan.reject = function (err) {
        if (err && err instanceof Zousan) return err;
        var z = new Zousan();
        z.reject(err);
        return z;
      };

      Zousan.version = "2.3.3-nodent";
      return Zousan;
    })();
  }

  var resolver = this;

  switch (catcher) {
    case true:
      return new $asyncbind.Thenable(boundThen);

    case 0:
      return new $asyncbind.LazyThenable(boundThen);

    case undefined:
      boundThen.then = boundThen;
      return boundThen;

    default:
      return function () {
        try {
          return resolver.apply(self, arguments);
        } catch (ex) {
          return catcher(ex);
        }
      };
  }

  function boundThen() {
    return resolver.apply(self, arguments);
  }
};

const fs = require("fs");

const path = require("path");

const webpackEntry = require("@patternplate/webpack-entry");

const MemoryFS = require("memory-fs");

const resolveFrom = require("resolve-from");

const webpack = require("webpack");

const nodeExternals = require("webpack-node-externals");

const readPkg = require("read-pkg");

const querystring = require("querystring");

module.exports = compiler;

const TO_STRING_LOADER = require.resolve("to-string-loader");

const CSS_LOADER = require.resolve("css-loader");

const HTML_LOADER = require.resolve("html-loader");

const COVER = require.resolve("@patternplate/cover-client");

const DEMO = require.resolve("@patternplate/demo-client");

const PROBE = require.resolve("@patternplate/probe-client");

function compiler(options) {
  return new Promise(function ($return, $error) {
    var fs, config, cwd, components, entry, bases, render, mount, compiler;
    fs = new MemoryFS();
    config = options.config, cwd = options.cwd;
    return webpackEntry(config.entry, {
      cwd
    }).then(function ($await_2) {
      components = $await_2;
      entry = {
        components
      };
      bases = [cwd, process.cwd()].filter(Boolean);
      render = cascadeResolve(config.render, {
        bases,
        cwd
      });
      mount = cascadeResolve(config.mount, {
        bases,
        cwd
      });

      if (options.target === "node") {
        entry.render = render;
      }

      if (options.target === "web") {
        entry["cover-client"] = COVER;
        entry.demo = DEMO;
        entry.mount = mount;
        entry.probe = PROBE;
      }

      if (typeof config.cover === "string") {
        entry.cover = cascadeResolve(config.cover, {
          bases,
          cwd
        });
      }

      compiler = webpack({
        entry,
        target: options.target,
        externals: options.target === "node" ? [nodeExternals()] : [],
        mode: "development",
        module: {
          rules: [{
            test: /\.css$/,
            use: [TO_STRING_LOADER, CSS_LOADER]
          }, {
            test: /\.html$/,
            use: [HTML_LOADER]
          }]
        },
        output: {
          library: "patternplate-[name]",
          libraryTarget: options.target === "node" ? "commonjs2" : "window",
          path: "/",
          filename: `patternplate.${options.target}.[name].js`
        }
      });
      compiler.outputFileSystem = fs;
      return $return(compiler);
    }.$asyncbind(this, $error), $error);
  }.$asyncbind(this));
}

function cascadeResolve(id, {
  bases,
  cwd
}) {
  const result = bases.reduce((resolved, base) => {
    if (resolved) {
      return resolved;
    }

    return (resolveFrom.silent || resolveFrom)(base, id);
  }, '');

  if (typeof result !== "string") {
    // Relative require path
    if (id.charAt(0) === "." || id.charAt(0) === "/") {
      const pathBases = bases.map(base => path.join(base, id));
      throw new Error(`Relatively required file "${id}" does not exist at ${pathBases.join(", ")}`);
    } // Global require path


    const pkg = getPkg(cwd) || {};
    const deps = Object.keys(pkg.dependencies || {});
    const devDeps = Object.keys(pkg.devDependencies || {});

    if (deps.indexOf(id) === -1 && devDeps.indexOf(id) === -1 && !fs.existsSync(path.join(cwd, "lerna.json"))) {
      throw new Error(`"${id}" is not installed as dependency at ${cwd}/package.json. Please make sure to install it via npm.`);
    }

    const fragments = id.split("/");
    const pkgFragments = id.charAt(0) === "@" ? fragments.slice(0, 2) : fragments.slice(0, 1);
    const pkgId = pkgFragments.join("/");
    const pkgManifest = resolveFrom.silent(process.cwd(), `${pkgId}/package`);

    if (pkgManifest) {
      const pkg = require(pkgManifest);

      throw new Error(`"${pkgId}" can be resolved, but "${id.replace(pkgId, '')}" is not available, it might be corrupted.\nPlease reinstall your node_modules and file an issue at ${pkg.bugs.url} if the problem persists.`);
    } else {
      throw new Error(`Could not resolve "${id}" from ${bases.join(", ")}`);
    }
  }

  return result;
}

const getPkg = (...args) => {
  try {
    return readPkg.sync(...args);
  } catch (err) {
    return null;
  }
};
//# sourceMappingURL=compiler.js.map