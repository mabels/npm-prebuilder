Function.prototype.$asyncbind = function $asyncbind(self, catcher) {
  "use strict";

  if (!Function.prototype.$asyncbind) {
    Object.defineProperty(Function.prototype, "$asyncbind", {
      value: $asyncbind,
      enumerable: false,
      configurable: true,
      writable: true
    });
  }

  if (!$asyncbind.trampoline) {
    $asyncbind.trampoline = function trampoline(t, x, s, e, u) {
      return function b(q) {
        while (q) {
          if (q.then) {
            q = q.then(b, e);
            return u ? undefined : q;
          }

          try {
            if (q.pop) {
              if (q.length) return q.pop() ? x.call(t) : q;
              q = s;
            } else q = q.call(t);
          } catch (r) {
            return e(r);
          }
        }
      };
    };
  }

  if (!$asyncbind.LazyThenable) {
    $asyncbind.LazyThenable = function () {
      function isThenable(obj) {
        return obj && obj instanceof Object && typeof obj.then === "function";
      }

      function resolution(p, r, how) {
        try {
          var x = how ? how(r) : r;
          if (p === x) return p.reject(new TypeError("Promise resolution loop"));

          if (isThenable(x)) {
            x.then(function (y) {
              resolution(p, y);
            }, function (e) {
              p.reject(e);
            });
          } else {
            p.resolve(x);
          }
        } catch (ex) {
          p.reject(ex);
        }
      }

      function Chained() {}

      ;
      Chained.prototype = {
        resolve: _unchained,
        reject: _unchained,
        then: thenChain
      };

      function _unchained(v) {}

      function thenChain(res, rej) {
        this.resolve = res;
        this.reject = rej;
      }

      function then(res, rej) {
        var chain = new Chained();

        try {
          this._resolver(function (value) {
            return isThenable(value) ? value.then(res, rej) : resolution(chain, value, res);
          }, function (ex) {
            resolution(chain, ex, rej);
          });
        } catch (ex) {
          resolution(chain, ex, rej);
        }

        return chain;
      }

      function Thenable(resolver) {
        this._resolver = resolver;
        this.then = then;
      }

      ;

      Thenable.resolve = function (v) {
        return Thenable.isThenable(v) ? v : {
          then: function then(resolve) {
            return resolve(v);
          }
        };
      };

      Thenable.isThenable = isThenable;
      return Thenable;
    }();

    $asyncbind.EagerThenable = $asyncbind.Thenable = ($asyncbind.EagerThenableFactory = function (tick) {
      tick = tick || typeof process === "object" && process.nextTick || typeof setImmediate === "function" && setImmediate || function (f) {
        setTimeout(f, 0);
      };

      var soon = function () {
        var fq = [],
            fqStart = 0,
            bufferSize = 1024;

        function callQueue() {
          while (fq.length - fqStart) {
            try {
              fq[fqStart]();
            } catch (ex) {}

            fq[fqStart++] = undefined;

            if (fqStart === bufferSize) {
              fq.splice(0, bufferSize);
              fqStart = 0;
            }
          }
        }

        return function (fn) {
          fq.push(fn);
          if (fq.length - fqStart === 1) tick(callQueue);
        };
      }();

      function Zousan(func) {
        if (func) {
          var me = this;
          func(function (arg) {
            me.resolve(arg);
          }, function (arg) {
            me.reject(arg);
          });
        }
      }

      Zousan.prototype = {
        resolve: function resolve(value) {
          if (this.state !== undefined) return;
          if (value === this) return this.reject(new TypeError("Attempt to resolve promise with self"));
          var me = this;

          if (value && (typeof value === "function" || typeof value === "object")) {
            try {
              var first = 0;
              var then = value.then;

              if (typeof then === "function") {
                then.call(value, function (ra) {
                  if (!first++) {
                    me.resolve(ra);
                  }
                }, function (rr) {
                  if (!first++) {
                    me.reject(rr);
                  }
                });
                return;
              }
            } catch (e) {
              if (!first) this.reject(e);
              return;
            }
          }

          this.state = STATE_FULFILLED;
          this.v = value;
          if (me.c) soon(function () {
            for (var n = 0, l = me.c.length; n < l; n++) STATE_FULFILLED(me.c[n], value);
          });
        },
        reject: function reject(reason) {
          if (this.state !== undefined) return;
          this.state = STATE_REJECTED;
          this.v = reason;
          var clients = this.c;
          if (clients) soon(function () {
            for (var n = 0, l = clients.length; n < l; n++) STATE_REJECTED(clients[n], reason);
          });
        },
        then: function then(onF, onR) {
          var p = new Zousan();
          var client = {
            y: onF,
            n: onR,
            p: p
          };

          if (this.state === undefined) {
            if (this.c) this.c.push(client);else this.c = [client];
          } else {
            var s = this.state,
                a = this.v;
            soon(function () {
              s(client, a);
            });
          }

          return p;
        }
      };

      function STATE_FULFILLED(c, arg) {
        if (typeof c.y === "function") {
          try {
            var yret = c.y.call(undefined, arg);
            c.p.resolve(yret);
          } catch (err) {
            c.p.reject(err);
          }
        } else c.p.resolve(arg);
      }

      function STATE_REJECTED(c, reason) {
        if (typeof c.n === "function") {
          try {
            var yret = c.n.call(undefined, reason);
            c.p.resolve(yret);
          } catch (err) {
            c.p.reject(err);
          }
        } else c.p.reject(reason);
      }

      Zousan.resolve = function (val) {
        if (val && val instanceof Zousan) return val;
        var z = new Zousan();
        z.resolve(val);
        return z;
      };

      Zousan.reject = function (err) {
        if (err && err instanceof Zousan) return err;
        var z = new Zousan();
        z.reject(err);
        return z;
      };

      Zousan.version = "2.3.3-nodent";
      return Zousan;
    })();
  }

  var resolver = this;

  switch (catcher) {
    case true:
      return new $asyncbind.Thenable(boundThen);

    case 0:
      return new $asyncbind.LazyThenable(boundThen);

    case undefined:
      boundThen.then = boundThen;
      return boundThen;

    default:
      return function () {
        try {
          return resolver.apply(self, arguments);
        } catch (ex) {
          return catcher(ex);
        }
      };
  }

  function boundThen() {
    return resolver.apply(self, arguments);
  }
};

// const { entries } = require("lodash");
const path = require("path");

const exists = require("path-exists");

const globby = require("globby");

const globParent = require("glob-parent");

const utils = require("loader-utils");

const requireFromString = require("require-from-string");

const debug = require("util").debuglog("patternplate");

const resolveFrom = require("resolve-from");

const rawLoader = path.relative(process.cwd(), resolveFrom(__dirname, "raw-loader")).split(path.sep).join("/");

module.exports = function webpackEntry() {
  return new Promise(function ($return, $error) {
    var cb, options, files, parent, parentFull, rel, reg, result;
    cb = this.async();
    options = utils.getOptions(this);
    return getFiles(options).then(function ($await_6) {
      files = $await_6;
      parent = globParent(options.entry);
      parentFull = path.join(options.cwd, parent);
      rel = path.relative(process.cwd(), parentFull);
      this.addContextDependency(parentFull);
      debug("webpack context", parent, "=>", `./${rel}`);
      return Promise.all(files.map(file => new Promise(function ($return, $error) {
        var full, rel, exported, mod;
        full = path.join(options.cwd, file);
        rel = path.relative(process.cwd(), full).split(path.sep).join('/');
        return getExported(full, {
          fs: this.fs
        }).then(function ($await_7) {
          exported = $await_7;
          mod = [`module.exports['${file}'] = require('./${rel}');`];

          if (exported.indexOf("js") === -1) {
            mod.push(`module.exports['${file}'].js = function() { return require('./${rawLoader}!./${rel}'); };`);
          }

          return new Promise(function ($return, $error) {
            var $logicalAnd_2;

            if ($logicalAnd_2 = exported.indexOf("css") === -1) {
              return exists(ext('.css', full)).then(function ($await_8) {
                $logicalAnd_2 = $await_8;
                return $If_4.call(this);
              }.$asyncbind(this, $error), $error);
            }

            function $If_4() {
              return $return($logicalAnd_2);
            }

            return $If_4.call(this);
          }.$asyncbind(this)).then(function ($await_9) {
            if ($await_9) {
              mod.push(`module.exports['${file}'].css = function() { return require('./${ext('.css', rel)}'); };`);
            }

            return new Promise(function ($return, $error) {
              var $logicalAnd_3;

              if ($logicalAnd_3 = exported.indexOf("html") === -1) {
                return exists(ext('.html', full)).then(function ($await_10) {
                  $logicalAnd_3 = $await_10;
                  return $If_5.call(this);
                }.$asyncbind(this, $error), $error);
              }

              function $If_5() {
                return $return($logicalAnd_3);
              }

              return $If_5.call(this);
            }.$asyncbind(this)).then(function ($await_11) {
              if ($await_11) {
                mod.push(`module.exports['${file}'].html = function() { return require('./${ext('.html', rel)}'); };`);
              }

              return $return(mod.join('\n'));
            }.$asyncbind(this, $error), $error);
          }.$asyncbind(this, $error), $error);
        }.$asyncbind(this, $error), $error);
      }.$asyncbind(this)))).then(function ($await_12) {
        reg = $await_12;
        result = `
    ${reg.join('\n')}
  `;
        cb(null, result);
        return $return();
      }.$asyncbind(this, $error), $error);
    }.$asyncbind(this, $error), $error);
  }.$asyncbind(this));
};

function getFiles(options) {
  const entries = Array.isArray(options.entry) ? options.entry : [options.entry];
  const cwd = options.cwd || process.cwd();
  return globby(entries, {
    cwd
  });
}

function ext(e, ...input) {
  const parsed = path.parse(path.join(...input));
  parsed.base = `${path.basename(parsed.base, path.extname(parsed.base))}${e}`;
  parsed.ext = e;
  return path.format(parsed);
}

function getExported(modulePath, {
  fs
}) {
  return new Promise(function ($return, $error) {
    const code = String(fs.readFileSync(modulePath));

    try {
      return $return(Object.keys(requireFromString(code, modulePath)));
    } catch (err) {
      return $return([]);
    }

    return $return();
  }.$asyncbind(this));
}
//# sourceMappingURL=loader.js.map