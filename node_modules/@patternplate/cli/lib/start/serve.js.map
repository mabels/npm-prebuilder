{"version":3,"sources":["../../src/start/serve.js"],"names":["ARSON","require","errorhandler","express","slash","importFrom","client","defaultCreateServer","module","exports","patternplate","options","port","app","createServer","server","cwd","error","Error","config","clientMiddleware","enable","disable","use","start","process","send","stringify","type","payload","subscribe","unsubscribe","close","Promise","resolve","reject","listen","on"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,QAAQC,QAAQ,OAAR,CAAd;;AACA,MAAMC,eAAeD,QAAQ,cAAR,CAArB;;AACA,MAAME,UAAUF,QAAQ,SAAR,CAAhB;;AACA,MAAMG,QAAQH,QAAQ,eAAR,CAAd;;AACA,MAAMI,aAAaJ,QAAQ,aAAR,CAAnB;;AAEA,MAAMK,SAASL,QAAQ,sBAAR,CAAf;;AACA,MAAMM,sBAAsBN,QAAQ,UAAR,CAA5B;;AAEAO,OAAOC,OAAP,GAAiBC,YAAjB;;AAEA,SAAeA,YAAf,CAA4BC,OAA5B;AAAA;AAAA;AACUC,QADV,GACmBD,OADnB,CACUC,IADV;AAGQC,OAHR,GAGcV,SAHd;AAKQW,gBALR,GAKuB,OAAOH,QAAQI,MAAf,KAA0B,QAA1B,GACjBV,WAAWM,QAAQK,GAAnB,EAAwBL,QAAQI,MAAhC,CADiB,GAEjBR,mBAPN;;AASE,QAAI,OAAOI,QAAQI,MAAf,KAA0B,QAA1B,IAAsC,OAAOD,YAAP,KAAwB,QAAlE,EAA4E;AACpEG,WADoE,GAC5D,IAAIC,KAAJ,CAAW,GAAEP,QAAQI,MAAO,6CAA5B,CAD4D;AAE1EE,YAAMP,YAAN,GAAqB,IAArB;AACA,oBAAMO,KAAN;AACD;;AAEKF,UAfR,GAeiBD,aAAaD,GAAb,CAfjB;AAiB2B,WAAMP,OAAO;AACpCU,WAAKL,QAAQK,GADuB;AAEpCG,cAAQR,QAAQQ,MAFoB;AAGpCJ;AAHoC,KAAP,CAAN;AAAnBK,sBAAmB;AAMzBP,UACGQ,MADH,CACU,gBADV,EAEGC,OAFH,CAEW,YAFX,EAGGC,GAHH,CAGOrB,cAHP,EAIGqB,GAJH,CAIOH,gBAJP,EAKGG,GALH,CAKOnB,OALP;AAOA,aAAMoB,MAAM;AAAEX,WAAF;AAAOD,YAAP;AAAaG;AAAb,OAAN,CAAN;AAEA,YAAI,OAAOU,QAAQC,IAAf,KAAwB,UAA5B,EAAwC;AACtCD,kBAAQC,IAAR,CAAa1B,MAAM2B,SAAN,CAAgB;AAC3BC,kBAAM,sBADqB;AAE3BC,qBAASlB;AAFkB,WAAhB,CAAb;AAID;;AAED,uBAAO;AACLE,aADK;AAELD,cAFK;AAGLkB,qBAAWV,iBAAiBU,SAHvB;AAILC,uBAAa,MAAM;AACjBX,6BAAiBW,WAAjB;AACAhB,mBAAOiB,KAAP;AACD;AAPI,SAAP;AATA;AAbyB;AAjB3B;AAAA;;AAkDA,SAASR,KAAT,CAAe;AAAEZ,MAAF;AAAQG;AAAR,CAAf,EAAiC;AAC/B,SAAO,IAAIkB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCpB,WACGqB,MADH,CACUxB,IADV,EACgB,MAAMsB,SADtB,EAEGG,EAFH,CAEM,OAFN,EAEeF,MAFf;AAGD,GAJM,CAAP;AAKD","file":"serve.js","sourcesContent":["const ARSON = require(\"arson\");\nconst errorhandler = require(\"errorhandler\");\nconst express = require(\"express\");\nconst slash = require(\"express-slash\");\nconst importFrom = require(\"import-from\");\n\nconst client = require(\"@patternplate/client\");\nconst defaultCreateServer = require(\"./server\");\n\nmodule.exports = patternplate;\n\nasync function patternplate(options) {\n  const { port } = options;\n\n  const app = express();\n\n  const createServer = typeof options.server === \"string\"\n    ? importFrom(options.cwd, options.server)\n    : defaultCreateServer;\n\n  if (typeof options.server === \"string\" && typeof createServer !== \"string\") {\n    const error = new Error(`${options.server} passed via --server must export a function`);\n    error.patternplate = true;\n    throw error;\n  }\n\n  const server = createServer(app);\n\n  const clientMiddleware = await client({\n    cwd: options.cwd,\n    config: options.config,\n    server\n  });\n\n  app\n    .enable(\"strict-routing\")\n    .disable(\"powered-by\")\n    .use(errorhandler())\n    .use(clientMiddleware)\n    .use(slash());\n\n  await start({ app, port, server });\n\n  if (typeof process.send === \"function\") {\n    process.send(ARSON.stringify({\n      type: \"patternplate:started\",\n      payload: options\n    }));\n  }\n\n  return {\n    app,\n    port,\n    subscribe: clientMiddleware.subscribe,\n    unsubscribe: () => {\n      clientMiddleware.unsubscribe();\n      server.close();\n    }\n  };\n}\n\nfunction start({ port, server }) {\n  return new Promise((resolve, reject) => {\n    server\n      .listen(port, () => resolve())\n      .on(\"error\", reject);\n  });\n}\n"]}