{"version":3,"sources":["../../src/start/index.js"],"names":["Path","require","ora","debug","debuglog","importFresh","readline","loadConfig","module","exports","start","flags","spinner","text","beat","Date","now","failures","process","connected","setInterval","age","console","log","exit","on","envelope","message","JSON","parse","type","err","error","cwd","port","selectPort","code","fail","patternplate","startPatternplate","server","app","rl","createInterface","input","stdin","terminal","rlcount","restart","Object","keys","cache","forEach","id","moveCursor","clearLine","replace","unsubscribe","count","reloading","line","endsWith","hot","chokidar","watcher","watch","getModules","ignoreInitial","ignorePermissionErrors","_","path","add","isNaN","Number","env","PORT","context","verb","doneVerb","result","config","filepath","base","dirname","succeed","subscribe","payload","stderr","mod","mods","Set","has","filename","children","child"],"mappings":"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","file":"index.js","sourcesContent":["const Path = require(\"path\");\nconst ora = require(\"ora\");\nconst debug = require(\"util\").debuglog(\"PATTERNPLATE\");\nconst importFresh = require(\"import-fresh\");\nconst readline = require(\"readline\");\nconst loadConfig = require(\"@patternplate/load-config\");\n\nmodule.exports = start;\n\nasync function start({flags}) {\n  const spinner = ora({ text: \"Starting patternplate server\" }).start();\n\n  let beat = Date.now();\n  let failures = 0;\n\n  if (process.connected) {\n    setInterval(() => {\n      const age = Date.now() - beat;\n      if (age >= 1000) {\n        failures++;\n        debug(`start: beat is ${age}ms old, failure ${failures}/3.`);\n      } else if (failures !== 0) {\n        debug(`start: beat limit met, reset failure to 0/3.`);\n        failures = 0;\n      }\n      if (failures >= 3) {\n        console.log(`start: beat failed ${failures} times, shutting down.`);\n        process.exit(0);\n      }\n    }, 1000);\n  }\n\n  process.on(\"message\", (envelope) => {\n    try {\n      const message = JSON.parse(envelope);\n      if (message.type === \"heartbeat\") {\n        beat = Date.now();\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  });\n\n  const cwd = flags.cwd || process.cwd();\n  const port = selectPort(flags);\n\n  try {\n    let app = await startPatternplate({\n      cwd,\n      port,\n      spinner,\n      server: flags.server\n    });\n\n    const rl = readline.createInterface({\n      input: process.stdin,\n      terminal: false\n    });\n\n    let rlcount = 0;\n\n    const restart = async () => {\n      Object.keys(require.cache).forEach(id => { delete require.cache[id] });\n      readline.moveCursor(process.stdin, 0, -1);\n      readline.clearLine(process.stdin);\n\n      spinner.text = spinner.text.replace('Started', 'Reloading patternplate');\n      spinner.start();\n      app.unsubscribe();\n\n      ++rlcount;\n\n      app = await startPatternplate({\n        cwd,\n        port,\n        spinner,\n        count: rlcount,\n        reloading: app,\n        server: flags.server\n      });\n    };\n\n    rl.on(\"line\", async line => {\n      if (line.endsWith(\"rs\")) {\n        readline.moveCursor(process.stdin, 0, -1);\n        readline.clearLine(process.stdin);\n        await restart();\n      }\n    });\n\n    if (flags.hot) {\n      const chokidar = require(\"chokidar\");\n\n      const watcher = chokidar.watch([...getModules()], {\n        ignoreInitial: true,\n        ignorePermissionErrors: true,\n      });\n\n      watcher.on(\"all\", async (_, path) => {\n        await restart();\n        watcher.add([...getModules()]);\n      });\n    }\n  } catch (err) {\n    switch (err.code) {\n      case \"EADDRINUSE\":\n        spinner.text = `Starting patternplate server failed`;\n        spinner.fail();\n        err.message = `Server could not be started, free the port: ${err.message}`;\n        err.patternplate = true;\n        throw err;\n      default:\n        throw err;\n    }\n  }\n}\n\nfunction selectPort(flags) {\n  if (!isNaN(Number(flags.port))) {\n    return Number(flags.port);\n  }\n\n  if (!isNaN(Number(process.env.PORT))) {\n    return (process.env.PORT);\n  }\n\n  return 1337;\n}\n\nasync function startPatternplate(context) {\n  const {port, cwd, spinner, server} = context;\n  const count = context.count > 0 ?  `(${context.count})` : '';\n\n  const patternplate = importFresh(\"./serve\");\n\n  const verb = context.reloading ? `reload` : `start`;\n  const doneVerb = context.reloading ? `Reloaded` : `Started`;\n\n  const result = await loadConfig({ cwd: context.cwd });\n  const { config = {}, filepath } = result;\n  const base = filepath ? Path.dirname(filepath) : context.cwd;\n\n  const app = await patternplate({\n    port,\n    server,\n    config,\n    cwd: base\n  });\n\n  spinner.text = `${doneVerb} on http://localhost:${app.port} ${count}`;\n\n  spinner.succeed();\n\n  app.subscribe(message => {\n    if (message.type === \"exception\") {\n      spinner.text = `Could not ${verb} patternplate on http://localhost:${app.port} ${count}`;\n      spinner.fail();\n      console.error(message.payload.stderr);\n      process.exit(1);\n    }\n\n    if (message.type === \"error\" && message.payload && typeof message.payload.message === \"string\") {\n      spinner.text = message.payload.message;\n      spinner.fail();\n    }\n  });\n\n  return app;\n}\n\nfunction getModules(mod = module, mods = new Set()) {\n  if (mods.has(mod.filename)) {\n    return mods;\n  }\n\n  mods.add(mod.filename);\n  mod.children.forEach(child => getModules(child, mods));\n  return mods;\n}\n"]}