{"version":3,"sources":["../src/cli.js"],"names":["path","require","chalk","meow","loadConfig","validate","cli","main","input","flags","pkg","command","cwd","process","config","filepath","relativePath","relative","userPath","length","target","name","error","valid","format","console","log","bold","exit","showHelp","build","create","undefined","start","message","err","Error","patternplate","catch","help","red","setTimeout","on","reason"],"mappings":"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","file":"cli.js","sourcesContent":["\nconst path = require(\"path\");\nconst chalk = require(\"chalk\");\nconst meow = require(\"meow\");\nconst loadConfig = require(\"@patternplate/load-config\");\nconst {validate} = require(\"@patternplate/validate-config\");\n\nconst cli = meow(\n  `\n  Usage\n  patternplate [command=start] [options]\n\n  Commands\n    start        - Start a patternplate instance in cwd\n    build        - Create a static interface build\n    create       - Create a new patternplate project\n    help         - Show this help\n\n  Start options\n    --cwd        - Working directory to search patternplate.config.js in\n    --port       - Port to start patternplate server on, defaults to 1337, $PORT\n\n  Build options\n    --base       - [REQUIRED] Base path to assume for static hosting, e.g. \"patternplate\" in git.io/patternplate\n    --cwd        - Working directory to search patternplate.config.js in\n    --out        - Directory to save the build in, defaults to \"docs\"\n\n  Create options\n    --cwd        - Working directory to operate in\n    --force      - Overwrite existing directories\n    --out        - Directory to create the new project in\n    --template   - Template to use, defaults to @patternplate/create-default\n    --no-git     - Skip git init\n    --no-install - Skip installation of npm packages\n\n  Examples\n    patternplate\n    ✔ Started on http://localhost:1337\n\n    patternplate --port 1338\n    ✔ Started on http://localhost:1338\n\n    patterplate build --base=\"/\"\n    ✔ Built to ./docs\n`\n);\n\nasync function main({ input, flags, pkg }) {\n  const [command] = input;\n\n  if (command !== \"help\") {\n    const { config, filepath } = await loadConfig({\n      cwd: flags.cwd || process.cwd()\n    });\n\n    if (filepath) {\n      const relativePath = path.relative(process.cwd(), filepath);\n      const userPath = relativePath.length < filepath.length ? relativePath : filepath;\n      const [error, valid] = validate({ target: config, name: filepath });\n\n      if (!valid && error) {\n        if (typeof error.format === \"function\") {\n          console.log(`\\nInvalid config at ${chalk.bold(userPath)}:`);\n          console.error(error.format());\n        } else {\n          console.error(error);\n        }\n        return process.exit(1);\n      }\n    }\n  }\n\n  switch (command) {\n    case \"help\":\n      return cli.showHelp(0);\n    case \"build\":\n      const build = require(\"./build\");\n      return build({ input, flags });\n    case \"create\":\n      const create = require(\"./create\");\n      return create({ input, flags, pkg });\n    case \"start\":\n    case undefined:\n      const start = require(\"./start\");\n      return start({ input, flags });\n    default: {\n      throw error(`Unknown command \"${command}\"`);\n    }\n  }\n}\n\nfunction error(message) {\n  const err = new Error(message);\n  err.patternplate = true;\n  return err;\n}\n\nmain(cli).catch(err => {\n  if (err && err.patternplate) {\n    console.log(cli.help);\n    console.error(chalk.red(err.message));\n    process.exit(1);\n  }\n  setTimeout(() => {\n    throw err;\n  });\n});\n\nprocess.on(\"unhandledRejection\", reason => {\n  throw reason;\n});\n"]}