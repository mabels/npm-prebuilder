{"version":3,"sources":["../src/load-meta.js"],"names":["path","require","url","globby","loadSourceMap","pFilter","sander","loadManifest","PATTERNPLATE_ERR_NO_MANIFEST","loadDoc","PATTERNPLATE_ERROR_DUPE_PATTERN","DEFAULT_MANIFEST","displayName","version","build","display","flag","options","patterns","module","exports","loadMeta","entry","cwd","list","Promise","all","map","bundle","file","join","getSourceMap","entries","reduce","accp","b","acc","artifact","relative","pair","source","push","sources","s","parse","p","pa","resolve","dirname","exists","resolved","sourceRoot","Array","prototype","apply","filter","Boolean","pairs","extname","basename","some","accing","json","err","result","errno","errors","data","manifest","raw","base","relativeManifestPath","name","Object","assign","previous","find","pattern","id","relPath","process","Error","contents","getFiles","String","contentType","files","rawManifest","jsFile","reject","sourcemap"],"mappings":"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","file":"load-meta.js","sourcesContent":["const path = require(\"path\");\nconst url = require(\"url\");\nconst globby = require(\"globby\");\nconst loadSourceMap = require(\"load-source-map\");\nconst pFilter = require(\"p-filter\");\nconst sander = require(\"@marionebl/sander\");\nconst {loadManifest, PATTERNPLATE_ERR_NO_MANIFEST} = require(\"@patternplate/load-manifest\");\nconst loadDoc = require(\"@patternplate/load-doc\");\n\nconst PATTERNPLATE_ERROR_DUPE_PATTERN = 'PATTERNPLATE_ERROR_DUPE_PATTERN';\n\nconst DEFAULT_MANIFEST = {\n  displayName: \"\",\n  version: \"1.0.0\",\n  build: true,\n  display: true,\n  flag: \"alpha\",\n  options: {},\n  patterns: {}\n};\n\nmodule.exports = loadMeta;\nmodule.exports.PATTERNPLATE_ERROR_DUPE_PATTERN = PATTERNPLATE_ERROR_DUPE_PATTERN;\n\nasync function loadMeta(options) {\n  const list = await globby(options.entry, { cwd: options.cwd });\n  const entries = await Promise.all(\n    list.map(async bundle => {\n      const file = path.join(options.cwd, bundle);\n      const map = await getSourceMap(file);\n\n      return {\n        path: file,\n        map\n      };\n    })\n  );\n\n  const pairs = await entries.reduce(async (accp, b) => {\n    const acc = await accp;\n    const artifact = path.relative(options.cwd, b.path);\n\n    if (!b.map) {\n      const pair = {\n        artifact,\n        source: artifact\n      };\n\n      acc.push(pair);\n      return acc;\n    }\n\n    const sources = await Promise.all(\n      b.map.sources.map(async s => {\n        const { path: p } = url.parse(s);\n        const pa = path.resolve(path.dirname(b.path), p);\n\n        if (await sander.exists(pa)) {\n          return {\n            artifact,\n            source: pa\n          };\n        }\n\n        const resolved = path.join(b.map.sourceRoot || options.cwd, pa);\n\n        if (await sander.exists(resolved)) {\n          return {\n            artifact,\n            source: resolved\n          };\n        }\n      })\n    );\n\n    Array.prototype.push.apply(acc, sources.filter(Boolean));\n    return acc;\n  }, Promise.resolve([]));\n\n  return await pairs\n    .filter(({source}) => {\n      const extname = path.extname(source);\n      const dirname = path.dirname(source);\n      return path.basename(source, path.extname(source)) === 'demo'\n        || !pairs.some(p => path.dirname(p.source) === dirname);\n    })\n    .reduce(async (accing, pair) => {\n      const acc = await accing;\n      const { source, artifact } = pair;\n      const cwd = path.resolve(options.cwd, path.dirname(source));\n      const [err, result] = await json({cwd});\n\n      if (err) {\n        if (err.errno !== PATTERNPLATE_ERR_NO_MANIFEST) {\n          acc.errors.push(err);\n        }\n        return acc;\n      }\n\n      const {file, manifest: data, raw} = result;\n      const base = path.dirname(path.relative(options.cwd, cwd));\n      const relativeManifestPath = path.relative(options.cwd, file);\n\n      if (acc.patterns.some(p => relativeManifestPath === p.path)) {\n        return acc;\n      }\n\n      data.displayName = data.displayName || data.name || null;\n      const manifest = Object.assign({}, DEFAULT_MANIFEST, data);\n\n      const previous = acc.patterns.find(pattern => pattern.id === manifest.name);\n\n      if (previous) {\n        const relPath = path.relative(process.cwd(), file);\n        const err = new Error(`Found duplicated pattern \"${previous.id}\" at \"${relPath}\" already present at \"${previous.path}\"`);\n        err.errno = PATTERNPLATE_ERROR_DUPE_PATTERN;\n        acc.errors.push(err);\n        return acc;\n      }\n\n      const {contents} = await loadDoc({cwd});\n\n      acc.patterns.push({\n        id: manifest.name,\n        artifact,\n        contents: contents ? String(contents) : null,\n        contentType: \"pattern\",\n        source: path.relative(options.cwd, source),\n        files: await getFiles(source, { cwd: options.cwd }),\n        path: relativeManifestPath,\n        manifest,\n        rawManifest: raw,\n        errors: []\n      });\n\n      return acc;\n    }, Promise.resolve({\n      errors: [],\n      patterns: []\n    }));\n}\n\nasync function getFiles(source, options) {\n  const cwd = path.dirname(source);\n  return (await globby([\"*\", \"!package.json\", \"!pattern.json\"], { cwd })).map(file =>\n    path.relative(options.cwd, path.join(cwd, file))\n  );\n}\n\nfunction getSourceMap(jsFile) {\n  return new Promise((resolve, reject) => {\n    loadSourceMap(jsFile, (err, sourcemap) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(sourcemap);\n    });\n  });\n}\n\nasync function json(options) {\n  try {\n    return [null, await loadManifest(options)];\n  } catch (err) {\n    return [err];\n  }\n}\n"]}