{"version":3,"sources":["../src/create-subscription.js"],"names":["Path","require","ARSON","validate","WebSocket","loadConfig","createCompiler","debug","debuglog","module","exports","createSubscription","context","queues","config","cwd","wss","server","watcher","handler","on","ws","err","errno","console","error","send","getSender","client","subscribe","queue","message","type","payload","configError","contentType","filepath","target","name","valid","log","stop","Promise","all","clientQueue","serverQueue","catch","clients","forEach","readyState","OPEN","stringify"],"mappings":"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","file":"create-subscription.js","sourcesContent":["const Path = require(\"path\");\nconst ARSON = require(\"arson\");\nconst { validate } = require(\"@patternplate/validate-config\");\nconst WebSocket = require(\"ws\");\nconst loadConfig = require(\"@patternplate/load-config\");\n\nconst { createCompiler } = require(\"./create-compiler\");\n\nconst debug = require(\"util\").debuglog(\"PATTERNPLATE\");\n\nmodule.exports.createSubscription = function createSubscription(context) {\n  const { queues, config, cwd, wss, server, watcher } = context;\n\n  return handler => {\n    debug(\"subscribing to webpack and fs events\");\n\n    // Prevent client errors (frequently caused by Chrome disconnecting on reload)\n    // from bubbling up and making the server fail, ref: https://github.com/websockets/ws/issues/1256\n    wss.on(\"connection\", ws => {\n      ws.on(\"error\", err => {\n        if (err.errno === \"ECONNRESET\") {\n          return;\n        }\n        console.error(err);\n      });\n    });\n\n    const send = getSender(wss, handler);\n\n    queues.client.subscribe(queue => {\n      const [message] = queue;\n      send({ type: message.type, payload: message.payload });\n    });\n\n    queues.client.subscribe(queue => {\n      const [message] = queue;\n      send({ type: message.type, payload: message.payload });\n    });\n\n    let configError = false;\n\n    watcher.subscribe(message => {\n      if (\n        message.type === \"change\" &&\n        message.payload.contentType === \"config\"\n      ) {\n        (async () => {\n          const { config, filepath } = await loadConfig({ cwd });\n          const [error, valid] = validate({ target: config, name: filepath });\n\n          if (error) {\n            configError = true;\n            send({ type: \"error\", payload: error });\n          }\n\n          if (configError) {\n            console.log(`Resolved config error, applying ${filepath}`);\n            configError = false;\n          }\n\n          queues.client.stop();\n          queues.server.stop();\n\n          const [clientQueue, serverQueue] = await Promise.all([\n            createCompiler({ cwd, target: \"web\" }),\n            createCompiler({ cwd, target: \"node\" })\n          ]);\n\n          queues.client = clientQueue;\n          queues.server = serverQueue;\n        })().catch(err => {\n          configError = true;\n          send({ type: \"error\", payload: err });\n        });\n      }\n\n      send(message);\n    });\n  };\n};\n\nfunction getSender(wss, handler) {\n  return message => {\n    if (typeof handler === \"function\") {\n      handler(message);\n    }\n    wss.clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(ARSON.stringify(message));\n      }\n    });\n  };\n}\n"]}