{"version":3,"sources":["../src/compiler-worker.js"],"names":["ARSON","require","yargsParser","flags","process","argv","slice","createCompiler","debug","debuglog","send","connected","m","stringify","startCompilerWorker","catch","err","setTimeout","FAILURE_COUNT","cwd","target","config","parse","compiler","fs","outputFileSystem","beat","Date","now","failures","setInterval","age","type","exit","plugin","payload","stats","compilation","errors","length","forEach","data","on","envelope","message","watch","ignored"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,QAAQC,QAAQ,OAAR,CAAd;;AACA,MAAMC,cAAcD,QAAQ,cAAR,CAApB;;AACA,MAAME,QAAQD,YAAYE,QAAQC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CAAZ,CAAd;;AACA,MAAMC,iBAAiBN,QAAQ,wBAAR,CAAvB;;AACA,MAAMO,QAAQP,QAAQ,MAAR,EAAgBQ,QAAhB,CAAyB,cAAzB,CAAd;;AAEA,MAAMC,OAAO,OAAON,QAAQM,IAAf,KAAwB,UAAxB,IAAsCN,QAAQO,SAA9C,GACTC,KAAKR,QAAQM,IAAR,CAAaV,MAAMa,SAAN,CAAgBD,CAAhB,CAAb,CADI,GAET,MAAM,CAAE,CAFZ;AAIAE,sBACGC,KADH,CACSC,OAAO;AACZC,aAAW,MAAM;AACf,UAAMD,GAAN;AACD,GAFD;AAGD,CALH;AAOA,MAAME,gBAAgB,CAAtB;;AAEA,SAAeJ,mBAAf;AAAA;AAAA;AAAA,QAOM,IAPN,EAQM,QARN;AACSK,OADT,GACwBhB,KADxB,CACSgB,GADT,EACcC,MADd,GACwBjB,KADxB,CACciB,MADd;AAEQC,UAFR,GAEiBrB,MAAMsB,KAAN,CAAYnB,MAAMkB,MAAlB,CAFjB;AAImB,WAAMd,eAAe;AAACc,YAAD;AAASF,SAAT;AAAcC;AAAd,KAAf,CAAN;AAAXG,cAAW;AACXC,QADW,GACND,SAASE,gBADH;AAGbC,UAAJ,GAAWC,KAAKC,GAAL,EAAX;AACIC,cAAJ,GAAe,CAAf;AAEAC,kBAAY,MAAM;AAChB,cAAMC,MAAMJ,KAAKC,GAAL,KAAaF,IAAzB;;AACA,YAAIK,OAAO,IAAX,EAAiB;AACfF;AACArB,gBAAO,WAAUY,MAAO,YAAWW,GAAI,mBAAkBF,QAAS,IAAGX,aAAc,GAAnF;AACD,SAHD,MAGO,IAAIW,aAAa,CAAjB,EAAoB;AACzBrB,gBAAO,WAAUY,MAAO,uCAAsCF,aAAc,GAA5E;AACAW,qBAAW,CAAX;AACD;;AACD,YAAIA,YAAYX,aAAhB,EAA+B;AAC7BR,eAAK;AACHsB,kBAAM,UADH;AACeZ;AADf,WAAL;AAGAhB,kBAAQ6B,IAAR,CAAa,CAAb;AACD;AACF,OAfD,EAeG,IAfH;AAiBAV,eAASW,MAAT,CAAgB,SAAhB,EAA2B,MAAM;AAC/BxB,aAAK;AAACsB,gBAAM,OAAP;AAAgBZ,gBAAhB;AAAwBe,mBAAS;AAAjC,SAAL;AACD,OAFD;AAIAZ,eAASW,MAAT,CAAgB,MAAhB,EAAyBE,KAAD,IAAW;AACjC,YAAIA,MAAMC,WAAN,CAAkBC,MAAlB,IAA4BF,MAAMC,WAAN,CAAkBC,MAAlB,CAAyBC,MAAzB,GAAkC,CAAlE,EAAqE;AACnEH,gBAAMC,WAAN,CAAkBC,MAAlB,CAAyBE,OAAzB,CAAiCxB,OACxBN,KAAK;AAACsB,kBAAM,OAAP;AAAgBZ,kBAAhB;AAAwBe,qBAASnB;AAAjC,WAAL,CADT;AAGA,iBAAON,KAAK;AAACsB,kBAAM,OAAP;AAAgBZ,kBAAhB;AAAwBe,qBAASC,MAAMC,WAAN,CAAkBC;AAAnD,WAAL,CAAP;AACD;;AACD5B,aAAK;AAACsB,gBAAM,MAAP;AAAeZ,gBAAf;AAAuBe,mBAASX,GAAGiB;AAAnC,SAAL;AACD,OARD;AAUAlB,eAASW,MAAT,CAAgB,QAAhB,EAA0BlB,OAAO;AAC/BN,aAAK;AAACsB,gBAAM,OAAP;AAAgBZ,gBAAhB;AAAwBe,mBAASnB;AAAjC,SAAL;AACD,OAFD;AAIAZ,cAAQsC,EAAR,CAAW,SAAX,EAA4BC,QAAN;AACpB,cAAMC,UAAU5C,MAAMsB,KAAN,CAAYqB,QAAZ,CAAhB;;AAEA,gBAAQC,QAAQZ,IAAhB;AACE,eAAK,WAAL;AACEN,mBAAOC,KAAKC,GAAL,EAAP;AACA;;AAEF,eAAK,OAAL;AACEpB,kBAAO,iBAAgBY,MAAO,EAA9B;AACA,2BAAOG,SAASsB,KAAT,CAAe;AAACC,uBAAS;AAAV,aAAf,EAA6C,MAAM,CAAE,CAArD,CAAP;;AAEF,eAAK,MAAL;AACEtC,kBAAO,gBAAeY,MAAO,EAA7B;AACAhB,oBAAQ6B,IAAR,CAAa,CAAb;AAXJ;;AAHoB;AAAA,yBAAtB;AAmBAvB,WAAK;AAACsB,cAAM;AAAP,OAAL;AA5DiB;AAAA;AAJnB;AAAA","file":"compiler-worker.js","sourcesContent":["const ARSON = require(\"arson\");\nconst yargsParser = require(\"yargs-parser\");\nconst flags = yargsParser(process.argv.slice(2));\nconst createCompiler = require(\"@patternplate/compiler\");\nconst debug = require(\"util\").debuglog(\"PATTERNPLATE\");\n\nconst send = typeof process.send === \"function\" && process.connected\n  ? m => process.send(ARSON.stringify(m))\n  : () => {};\n\nstartCompilerWorker()\n  .catch(err => {\n    setTimeout(() => {\n      throw err;\n    })\n  });\n\nconst FAILURE_COUNT = 5;\n\nasync function startCompilerWorker() {\n  const {cwd, target} = flags;\n  const config = ARSON.parse(flags.config);\n\n  const compiler = await createCompiler({config, cwd, target});\n  const fs = compiler.outputFileSystem;\n\n  let beat = Date.now();\n  let failures = 0;\n\n  setInterval(() => {\n    const age = Date.now() - beat;\n    if (age >= 2000) {\n      failures++;\n      debug(`worker: ${target} beat is ${age}ms old, failure ${failures}/${FAILURE_COUNT}.`);\n    } else if (failures !== 0) {\n      debug(`worker: ${target} beat limit met, reset failure to 0/${FAILURE_COUNT}.`);\n      failures = 0;\n    }\n    if (failures >= FAILURE_COUNT) {\n      send({\n        type: \"shutdown\", target\n      });\n      process.exit(0);\n    }\n  }, 1000);\n\n  compiler.plugin(\"compile\", () => {\n    send({type: \"start\", target, payload: {}});\n  });\n\n  compiler.plugin(\"done\", (stats) => {\n    if (stats.compilation.errors && stats.compilation.errors.length > 0) {\n      stats.compilation.errors.forEach(err => {\n        return send({type: \"error\", target, payload: err});\n      });\n      return send({type: \"error\", target, payload: stats.compilation.errors});\n    }\n    send({type: \"done\", target, payload: fs.data});\n  });\n\n  compiler.plugin(\"failed\", err => {\n    send({type: \"error\", target, payload: err});\n  });\n\n  process.on(\"message\", async envelope => {\n    const message = ARSON.parse(envelope);\n\n    switch (message.type) {\n      case \"heartbeat\": {\n        beat = Date.now();\n        return;\n      }\n      case \"start\": {\n        debug(`worker: start ${target}`);\n        return compiler.watch({ignored: \"**/pattern.json\"}, () => {});\n      }\n      case \"stop\": {\n        debug(`worker: stop ${target}`);\n        process.exit(0);\n      }\n    }\n  });\n\n  send({type: \"ready\"});\n}\n"]}