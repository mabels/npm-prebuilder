{"version":3,"sources":["../src/scripts.js"],"names":["module","exports","scripts","options","scriptsRoutes","req","res","err","code","sendStatus","console","error","send","message","wait","queue","fs","type","readFileSync","url","observable","Promise","resolve","reject","payload","subscribe"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,OAAP,GAAiBC,OAAjB;;AAEA,SAAeA,OAAf,CAAuBC,OAAvB;AAAA;AACE,mBAAO,SAAeC,aAAf,CAA6BC,GAA7B,EAAkCC,GAAlC;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,qCAKIC,GALJ,EAKS;AACZ,cAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AACzB,2BAAOF,IAAIG,UAAJ,CAAe,GAAf,CAAP;AACD;;AACDC,kBAAQC,KAAR,CAAcJ,GAAd;AACAD,cAAIG,UAAJ,CAAe,GAAf,EAAoBG,IAApB,CAAyBL,IAAIM,OAA7B;AALY;AAMb,SAXI;;AACL,YAAI;AACW,iBAAMC,KAAKX,QAAQY,KAAb,CAAN;AAAA,6BAANC,EAAM,QAANA,EAAM;AACbV,gBAAIW,IAAJ,CAAS,IAAT;AACAX,gBAAIM,IAAJ,CAASI,GAAGE,YAAH,CAAgBb,IAAIc,GAApB,CAAT;AAFa;AAAA;AAGd,SAJD,CAIE,OAAOZ,GAAP,EAAY;AAAA,uBAALA,GAAK;AAMb;AAXI;AAAA,KAAP;AADF;AAAA;;AAiBA,SAASO,IAAT,CAAcM,UAAd,EAA0B;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAAA,6CACfH,WAAWL,KADI;AAAA;AAAA,UAC/BF,OAD+B,mCACrB,EADqB;;AAEtC,YAAQA,QAAQI,IAAhB;AACE,WAAK,MAAL;AACE,eAAOK,QAAQT,QAAQW,OAAhB,CAAP;;AACF,WAAK,OAAL;AACE,eAAOD,OAAOV,QAAQW,OAAf,CAAP;AAJJ;;AAOAJ,eAAWK,SAAX,CACEV,SAAS;AAAA,oCACWA,KADX;AAAA,YACAF,OADA;;AAEP,cAAQA,QAAQI,IAAhB;AACE,aAAK,MAAL;AACE,iBAAOK,QAAQT,QAAQW,OAAhB,CAAP;;AACF,aAAK,OAAL;AACE,iBAAOD,OAAOV,QAAQW,OAAf,CAAP;AAJJ;AAMD,KATH,EAUED,MAVF;AAYD,GArBM,CAAP;AAsBD","file":"scripts.js","sourcesContent":["module.exports = scripts;\n\nasync function scripts(options) {\n  return async function scriptsRoutes(req, res) {\n    try {\n      const {fs} = await wait(options.queue);\n      res.type(\"js\");\n      res.send(fs.readFileSync(req.url));\n    } catch (err) {\n      if (err.code === \"ENOENT\") {\n        return res.sendStatus(404);\n      }\n      console.error(err);\n      res.sendStatus(500).send(err.message);\n    }\n  };\n}\n\n\nfunction wait(observable) {\n  return new Promise((resolve, reject) => {\n    const [message = {}] = observable.queue;\n    switch (message.type) {\n      case 'done':\n        return resolve(message.payload);\n      case 'error':\n        return reject(message.payload);\n    }\n\n    observable.subscribe(\n      queue => {\n        const [message] = queue;\n        switch (message.type) {\n          case 'done':\n            return resolve(message.payload);\n          case 'error':\n            return reject(message.payload);\n        }\n      },\n      reject\n    )\n  });\n}\n"]}