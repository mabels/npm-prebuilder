{"version":3,"sources":["../src/create-watcher.js"],"names":["Path","require","loadMeta","Observable","chokidar","globParent","micromatch","commonDir","debug","debuglog","module","exports","createWatcher","options","watching","stopped","subscribers","watcher","config","entry","docs","cwd","configPath","join","next","message","forEach","subs","obs","meta","errors","length","error","type","payload","parents","getParents","globs","paths","patterns","map","m","path","filter","Boolean","p","relative","watch","ignoreInitial","on","e","rel","file","contentType","extname","basename","some","matchBase","push","s","stop","close","g","charAt"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,OAAOC,QAAQ,MAAR,CAAb;;AACA,MAAMC,WAAWD,QAAQ,yBAAR,CAAjB;;AACA,MAAME,aAAaF,QAAQ,gBAAR,CAAnB;;AACA,MAAMG,WAAWH,QAAQ,UAAR,CAAjB;;AACA,MAAMI,aAAaJ,QAAQ,aAAR,CAAnB;;AACA,MAAMK,aAAaL,QAAQ,YAAR,CAAnB;;AACA,MAAMM,YAAYN,QAAQ,YAAR,CAAlB;;AAEA,MAAMO,QAAQP,QAAQ,MAAR,EAAgBQ,QAAhB,CAAyB,cAAzB,CAAd;;AAEAC,OAAOC,OAAP,CAAeC,aAAf,GAA+B,SAAeA,aAAf,CAA6BC,OAA7B;AAAA;AAC7B,QAAIC,WAAW,KAAf;AACA,QAAIC,UAAU,KAAd;AACA,QAAIC,cAAc,EAAlB;AACA,QAAIC,OAAJ;AAJ6B,4BAMPJ,OANO,CAMtBK,MANsB;AAAA,UAMtBA,MANsB,gCAMb,EANa;AAAA,0BAOGA,MAPH,CAOtBC,KAPsB;AAAA,UAOtBA,KAPsB,8BAOd,EAPc;AAAA,yBAOGD,MAPH,CAOVE,IAPU;AAAA,UAOVA,IAPU,6BAOH,EAPG;AAAA,UAQtBC,GARsB,GAQfR,OARe,CAQtBQ,GARsB;AAS7B,UAAMC,aAAatB,KAAKuB,IAAL,CAAUF,GAAV,EAAe,wBAAf,CAAnB;;AAEA,UAAMG,OAAOC,WAAWT,YAAYU,OAAZ,CAAoBC,QAAQA,KAAKH,IAAL,CAAUC,OAAV,CAA5B,CAAxB;;AAEA,UAAMG,MAAM,IAAIzB,UAAJ,CAAewB,QAAQ;AACjC,UAAI,CAACb,QAAL,EAAe;AACbA,mBAAW,IAAX;;AAEA,SAAC;AAAA;AAGc,iBAAMZ,SAAS;AAC1BiB,iBAD0B;AAE1BE;AAF0B,WAAT,CAAN;AAAPQ,gBAAO;;AAKb,gBAAIA,KAAKC,MAAL,IAAeD,KAAKC,MAAL,CAAYC,MAAZ,GAAqB,CAAxC,EAA2C;AACzCF,mBAAKC,MAAL,CAAYJ,OAAZ,CAAoBM,SAASR,KAAK;AAAES,sBAAM,OAAR;AAAiBC,yBAASF;AAA1B,eAAL,CAA7B;AACD;;AAEKG,mBATO,GASGC,WACd;AACEC,qBAAO,CAAC,GAAGlB,KAAJ,EAAW,GAAGC,IAAd,CADT;AAEEkB,qBAAO,CACLhB,UADK,EAELO,KAAKU,QAAL,CAAcR,MAAd,GAAuB,CAAvB,GACIxB,UAAUsB,KAAKU,QAAL,CAAcC,GAAd,CAAkBC,KAAKzC,KAAKuB,IAAL,CAAUF,GAAV,EAAeoB,EAAEC,IAAjB,CAAvB,CAAV,CADJ,GAEI,IAJC,EAKLC,MALK,CAKEC,OALF;AAFT,aADc,EAUd;AAAEvB;AAAF,aAVc,CATH;AAsBbb,kBACG,8BAA6B2B,QAC3BK,GAD2B,CACvBK,KAAK7C,KAAK8C,QAAL,CAAczB,GAAd,EAAmBwB,CAAnB,CADkB,EAE3BtB,IAF2B,CAEtB,IAFsB,CAEhB,EAHhB;;AAMA,gBAAIR,OAAJ,EAAa;AACX;AACD;;AAEDE,sBAAUb,SAAS2C,KAAT,CAAeZ,OAAf,EAAwB;AAChCa,6BAAe;AADiB,aAAxB,CAAV;AAIApB,gBAAIX,OAAJ,GAAcA,OAAd;AAEAA,oBAAQgC,EAAR,CAAW,KAAX,EAAkB,CAAOC,CAAP,EAAUL,CAAV;AAChB,oBAAMM,MAAMnD,KAAK8C,QAAL,CAAczB,GAAd,EAAmBwB,CAAnB,CAAZ;;AAEA,kBAAIA,MAAMvB,UAAV,EAAsB;AACpBE,qBAAK;AACHS,wBAAM,QADH;AAEHC,2BAAS;AAAEkB,0BAAMP,CAAR;AAAWQ,iCAAa;AAAxB;AAFN,iBAAL;AAID;;AAED,kBAAIrD,KAAKsD,OAAL,CAAaH,GAAb,MAAsB,KAA1B,EAAiC;AAC/B3B,qBAAK;AACHS,wBAAM,QADH;AAEHC,2BAAS;AAAEkB,0BAAMP,CAAR;AAAWQ,iCAAa;AAAxB;AAFN,iBAAL;AAID;;AAED,kBACErD,KAAKuD,QAAL,CAAcJ,GAAd,MAAuB,cAAvB,IACAnD,KAAKuD,QAAL,CAAcJ,GAAd,MAAuB,cAFzB,EAGE;AACA3B,qBAAK;AACHS,wBAAM,QADH;AAEHC,2BAAS;AAAEkB,0BAAMP,CAAR;AAAWQ,iCAAa;AAAxB;AAFN,iBAAL;AAID;;AAED,kBAAI/C,WAAWkD,IAAX,CAAgBL,GAAhB,EAAqB/B,IAArB,EAA2B;AAAEqC,2BAAW;AAAb,eAA3B,CAAJ,EAAqD;AACnDjC,qBAAK;AAAES,wBAAM,QAAR;AAAkBC,2BAAS;AAAEkB,0BAAMP,CAAR;AAAWQ,iCAAa;AAAxB;AAA3B,iBAAL;AACD;;AA7Be;AAAA,+BAAlB;AAtCa;AAAA;AAHd,2BAAD;AAyED;;AAEDrC,kBAAY0C,IAAZ,CAAiB/B,IAAjB;AAEA,aAAO,MAAM;AACXX,sBAAcA,YAAY2B,MAAZ,CAAmBgB,KAAKA,MAAMhC,IAA9B,CAAd;AACD,OAFD;AAGD,KApFW,CAAZ;;AAsFAC,QAAIgC,IAAJ,GAAW,MAAM;AACf7C,gBAAU,IAAV;;AACA,UAAIE,OAAJ,EAAa;AACXA,gBAAQ4C,KAAR;AACD;AACF,KALD;;AAOA,mBAAOjC,GAAP;AA1G6B;AAAA,CAA/B;;AA6GA,SAASQ,UAAT,CAAoB;AAAEC,UAAQ,EAAV;AAAcC,UAAQ;AAAtB,CAApB,EAAgD;AAAEjB;AAAF,CAAhD,EAAyD;AACvD,SAAO,CACL,GAAGiB,KADE,EAEL,GAAGD,MACAM,MADA,CACOmB,KAAKA,EAAEC,MAAF,CAAS,CAAT,MAAgB,GAD5B,EAEAvB,GAFA,CAEIsB,KAAK9D,KAAKuB,IAAL,CAAUF,GAAV,EAAehB,WAAWyD,CAAX,CAAf,CAFT,CAFE,CAAP;AAMD","file":"create-watcher.js","sourcesContent":["const Path = require(\"path\");\nconst loadMeta = require(\"@patternplate/load-meta\");\nconst Observable = require(\"zen-observable\");\nconst chokidar = require(\"chokidar\");\nconst globParent = require(\"glob-parent\");\nconst micromatch = require(\"micromatch\");\nconst commonDir = require(\"common-dir\");\n\nconst debug = require(\"util\").debuglog(\"PATTERNPLATE\");\n\nmodule.exports.createWatcher = async function createWatcher(options) {\n  let watching = false;\n  let stopped = false;\n  let subscribers = [];\n  let watcher;\n\n  const {config = {}} = options;\n  const {entry = [], docs = []} = config;\n  const {cwd} = options;\n  const configPath = Path.join(cwd, \"patternplate.config.js\");\n\n  const next = message => subscribers.forEach(subs => subs.next(message));\n\n  const obs = new Observable(subs => {\n    if (!watching) {\n      watching = true;\n\n      (async () => {\n        // TODO: only **list** relevant manifest paths\n        // instead of reading them\n        const meta = await loadMeta({\n          entry,\n          cwd\n        });\n\n        if (meta.errors && meta.errors.length > 0) {\n          meta.errors.forEach(error => next({ type: \"error\", payload: error }));\n        }\n\n        const parents = getParents(\n          {\n            globs: [...entry, ...docs],\n            paths: [\n              configPath,\n              meta.patterns.length > 0\n                ? commonDir(meta.patterns.map(m => Path.join(cwd, m.path)))\n                : null\n            ].filter(Boolean)\n          },\n          { cwd }\n        );\n\n        debug(\n          `subscribing to changes on: ${parents\n            .map(p => Path.relative(cwd, p))\n            .join(\", \")}`\n        );\n\n        if (stopped) {\n          return;\n        }\n\n        watcher = chokidar.watch(parents, {\n          ignoreInitial: true\n        });\n\n        obs.watcher = watcher;\n\n        watcher.on(\"all\", async (e, p) => {\n          const rel = Path.relative(cwd, p);\n\n          if (p === configPath) {\n            next({\n              type: \"change\",\n              payload: { file: p, contentType: \"config\" }\n            });\n          }\n\n          if (Path.extname(rel) === \".md\") {\n            next({\n              type: \"change\",\n              payload: { file: p, contentType: \"pattern\" }\n            });\n          }\n\n          if (\n            Path.basename(rel) === \"pattern.json\" ||\n            Path.basename(rel) === \"package.json\"\n          ) {\n            next({\n              type: \"change\",\n              payload: { file: p, contentType: \"pattern\" }\n            });\n          }\n\n          if (micromatch.some(rel, docs, { matchBase: true })) {\n            next({ type: \"change\", payload: { file: p, contentType: \"doc\" } });\n          }\n        });\n      })();\n    }\n\n    subscribers.push(subs);\n\n    return () => {\n      subscribers = subscribers.filter(s => s !== subs);\n    };\n  });\n\n  obs.stop = () => {\n    stopped = true;\n    if (watcher) {\n      watcher.close();\n    }\n  };\n\n  return obs;\n}\n\nfunction getParents({ globs = [], paths = [] }, { cwd }) {\n  return [\n    ...paths,\n    ...globs\n      .filter(g => g.charAt(0) !== \"!\")\n      .map(g => Path.join(cwd, globParent(g)))\n  ];\n}\n"]}