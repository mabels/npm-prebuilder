{"version":3,"sources":["../src/load-manifest.js"],"names":["path","require","loadJsonFile","sander","normalize","PATTERNPLATE_ERR_NO_MANIFEST","PATTERNPLATE_ERR_MALFORMED_MANIFEST","module","exports","loadManifest","map","fn","Promise","all","cwd","Error","f","exists","files","filter","Boolean","file","err","errno","fullPath","resolve","loadJSON","data","isPkg","basename","isPatternPkg","patternplate","needsPattern","length","manifest","withDefaults","raw"],"mappings":"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","file":"load-manifest.js","sourcesContent":["const path = require(\"path\");\nconst loadJsonFile = require(\"load-json-file\");\nconst sander = require(\"@marionebl/sander\");\n\nconst normalize = require(\"./normalize\");\n\nconst PATTERNPLATE_ERR_NO_MANIFEST = 'PATTERNPLATE_ERR_NO_MANIFEST';\nconst PATTERNPLATE_ERR_MALFORMED_MANIFEST = 'PATTERNPLATE_ERR_MALFORMED_MANIFEST';\n\nmodule.exports = {\n  PATTERNPLATE_ERR_NO_MANIFEST,\n  PATTERNPLATE_ERR_MALFORMED_MANIFEST,\n  loadManifest\n};\n\nconst map = fn => Promise.all(['package.json', 'pattern.json'].map(fn));\n\nasync function loadManifest({cwd}) {\n  if (typeof cwd !== \"string\") {\n    throw new Error(`load-manifest cwd expects string, received ${cwd}, typeof ${cwd}`);\n  }\n\n  const files = (await map(async f => (await sander.exists(cwd, f)) ? f : null)).filter(Boolean);\n  const file = files[0];\n\n  if (!file) {\n    const err = new Error(`load-manifest could not find pattern.json, package.json in ${cwd}`);\n    err.errno = PATTERNPLATE_ERR_NO_MANIFEST;\n    throw err;\n  }\n\n  const fullPath = path.resolve(cwd, file);\n  const data = await loadJSON(fullPath);\n\n  const isPkg = path.basename(file) === \"package.json\";\n  const isPatternPkg = typeof data.patternplate === \"object\";\n  const needsPattern = isPkg && !isPatternPkg;\n\n  if (needsPattern && files.length === 1) {\n    const err = new Error(`load-manifest could not find pattern.json in ${cwd}, package.json contains no patternplate object`);\n    err.errno = PATTERNPLATE_ERR_NO_MANIFEST;\n    throw err;\n  }\n\n  if (needsPattern && files.length === 2) {\n    const fullPath = path.resolve(cwd, files[1]);\n    const data = await loadJSON(fullPath);\n    return {\n      file: fullPath,\n      manifest: normalize(data, {isPatternPkg})\n    };\n  }\n\n  return {\n    file: fullPath,\n    manifest: normalize(data, {isPatternPkg, withDefaults: true}),\n    raw: normalize(data, {isPatternPkg})\n  };\n}\n\nasync function loadJSON(file) {\n  try {\n    return await loadJsonFile(file);\n  } catch (err) {\n    err.errno = PATTERNPLATE_ERR_MALFORMED_MANIFEST;\n    throw err;\n  }\n}\n"]}