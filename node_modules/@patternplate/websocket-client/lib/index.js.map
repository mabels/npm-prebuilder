{"version":3,"sources":["../src/index.js"],"names":["require","EventEmitter","module","exports","WebSocketClient","constructor","src","reconnect","interval","opened","ended","ee","open","exec","type","args","listeners","forEach","l","instance","global","WebSocket","addEventListener","close","removeEventListener","loop","setInterval","onOpen","handler","on","onClose","onError","onMessage"],"mappings":"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","file":"index.js","sourcesContent":["const {EventEmitter} = require(\"events\");\n\nmodule.exports.WebSocketClient = class WebSocketClient {\n  constructor({src, reconnect, interval}) {\n    this.src = src;\n    this.reconnect = reconnect;\n    this.interval = interval;\n    this.opened = false;\n    this.ended = false;\n    this.ee = new EventEmitter();\n  }\n\n  open() {\n    const exec = (type, args) => this.ee.listeners(type).forEach(l => l(...args));\n\n    const open = () => {\n      this.instance = new global.WebSocket(this.src);\n\n      // Make Chrome behave and close the websocket connection\n      // before unloading the browsing context. Ref: https://github.com/websockets/ws/issues/1256\n      global.addEventListener(\"beforeunload\", this.close);\n\n      this.instance.addEventListener(\"open\", (...args) => {\n        this.opened = true;\n        exec(\"open\", args);\n      });\n\n      this.instance.addEventListener(\"close\", (...args) => {\n        global.removeEventListener(\"beforeunload\", this.close);\n        this.opened = false;\n        exec(\"close\", args);\n      });\n\n      this.instance.addEventListener(\"error\", (...args) => {\n        global.removeEventListener(\"beforeunload\", this.close);\n        this.opened = false;\n        exec(\"error\", args);\n      });\n\n      this.instance.addEventListener(\"message\", (...args) => {\n        exec(\"message\", args);\n      });\n    };\n\n    open();\n\n    if (this.reconnect) {\n      this.loop = setInterval(() => {\n        if (this.ended  || this.opened) {\n          return;\n        }\n        open();\n      }, this.interval);\n    }\n  }\n\n  close() {\n    this.ended = true;\n    if (this.opened) {\n      this.instance.close();\n    }\n  }\n\n  onOpen(handler) {\n    this.ee.on(\"open\", handler);\n  }\n\n  onClose(handler) {\n    this.ee.on(\"close\", handler);\n    this.instance.addEventListener(\"close\", handler);\n  }\n\n  onError(handler) {\n    this.ee.on(\"error\", handler);\n    this.instance.addEventListener(\"error\", handler);\n  }\n\n  onMessage(handler) {\n    this.ee.on(\"message\", handler);\n    this.instance.addEventListener(\"message\", handler);\n  }\n}\n"]}