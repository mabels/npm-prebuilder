{"version":3,"sources":["../src/server.js"],"names":["path","require","api","loadDocsTree","loadMeta","express","serve","fetch","cors","render","module","exports","client","options","cwd","config","server","apiRoute","main","mainRoute","apiStatic","join","app","use","get","appStatic","__dirname","subscribe","unsubscribe","req","res","next","err","entry","cover","base","protocol","credentials","response","text","send","Promise","all","docs","readme","patterns","tree","id","children","url","schema","meta"],"mappings":"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","file":"server.js","sourcesContent":["const path = require(\"path\");\n\nconst api = require(\"@patternplate/api\");\nconst { loadDocsTree } = require(\"@patternplate/load-docs\");\nconst loadMeta = require(\"@patternplate/load-meta\");\nconst express = require(\"express\");\nconst serve = require(\"serve-static\");\nconst fetch = require(\"isomorphic-fetch\");\nconst cors = require(\"cors\");\n\nconst render = require(\"./render\");\n\nmodule.exports = client;\n\nasync function client(options) {\n  const apiRoute = await api({\n    cwd: options.cwd,\n    config: options.config,\n    server: options.server\n  });\n\n  const mainRoute = await main({\n    cwd: options.cwd,\n    config: options.config\n  });\n\n  const apiStatic = path.join(options.cwd, \"static\");\n\n  const app = express()\n    .use(\"/api/static\", cors(), serve(apiStatic))\n    .use(\"/api/\", apiRoute)\n    .get(\"/pattern/*\", mainRoute)\n    .get(\"/doc/*\", mainRoute)\n    .get(\"/\", mainRoute);\n\n  const appStatic = path.join(__dirname, \"static\");\n  app.use(\"/static\", serve(appStatic));\n\n  app.subscribe = apiRoute.subscribe;\n  app.unsubscribe = apiRoute.unsubscribe;\n\n  return app;\n}\n\nasync function main(options) {\n  return async function mainRoute(req, res, next) {\n    try {\n      const { entry = [], cover } = options.config;\n      const base = options.base || \"/\";\n\n      if (req.path === base && typeof cover === \"string\") {\n        const response = await fetch(`${req.protocol}://${req.get(\"host\")}/api/cover.html?base=${base}`, {credentials: \"include\"});\n        return res.send(await response.text());\n      }\n\n      const [docs, {patterns}] = await Promise.all([\n        loadDocsTree({\n          cwd: options.cwd,\n          docs: options.config.docs,\n          readme: options.config.readme\n        }),\n        loadMeta({\n          cwd: options.cwd,\n          entry\n        })\n      ]);\n\n      const tree = {id: \"root\", children: patterns};\n\n      res.send(\n        await render(req.url, {\n          schema: { meta: tree, docs },\n          config: options.config,\n          base,\n        })\n      );\n    } catch (err) {\n      next(err);\n    }\n  };\n}\n"]}