{"version":3,"sources":["../../../src/app/containers/documentation.js"],"names":["mapState","mapDispatch","selectNotFound","state","routing","locationBeforeTransitions","pathname","url","selectNoDocs","selectDocItem","id","item","pool","first","find","i","contentType","selectDoc","noDocs","notFound","contents","selectDisplayName","manifest","displayName","selectType","match","selectThemes","config","color","doc","themes","type","isStatic","dispatch","requestScroll","actions","scrollTo"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;;;;;eAEe,yBAAQA,QAAR,EAAkBC,WAAlB,yB;;;AAEf,MAAMC,iBAAiB,8BACrBC,SAASA,MAAMC,OAAN,CAAcC,yBAAd,CAAwCC,QAD5B,EAErBC,OAAQ;;;;;8DAKoDA,GAAI;;;;;;;CAP3C,CAAvB;;AAiBA,MAAMC,eAAe,MAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA5B;;AA8BA,MAAMC,gBAAgB,yDAGpBN,SAASA,MAAMO,EAHK,EAIpB,CAACC,IAAD,EAAOC,IAAP,EAAaF,EAAb,KAAoB;AAClB,MAAIA,OAAO,GAAX,EAAgB;AACd,UAAMG,QAAQD,KAAKE,IAAL,CAAUC,KAAKA,EAAEC,WAAF,KAAkB,KAAjC,CAAd;;AACA,QAAIH,KAAJ,EAAW;AACT,aAAOA,KAAP;AACD;AACF;;AACD,SAAOF,IAAP;AACD,CAZmB,CAAtB;AAeA,MAAMM,YAAY,8BAChBR,aADgB,EAEhBD,YAFgB,EAGhBN,cAHgB,EAIhB,CAACS,IAAD,EAAOO,MAAP,EAAeC,QAAf,KAA4B;AAC1B,MAAIR,QAAQA,KAAKS,QAAjB,EAA2B;AACzB,WAAOT,KAAKS,QAAZ;AACD;;AAED,MAAIT,QAAQ,CAACA,KAAKS,QAAlB,EAA4B;AAC1B,WAAOF,MAAP;AACD;;AAED,SAAOC,QAAP;AACD,CAde,CAAlB;AAiBA,MAAME,oBAAoB,8BACxBZ,aADwB,EAExBE,QAAQ;AACN,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,cAAP;AACD;;AACD,SAAOA,KAAKW,QAAL,CAAcC,WAArB;AACD,CAPuB,CAA1B;AAUA,MAAMC,aAAa,6CAA2BC,SAAS;AACrD,MAAIA,SAASA,MAAML,QAAnB,EAA6B;AAC3B,WAAO,KAAP;AACD;;AACD,MAAIK,SAAS,CAACA,MAAML,QAApB,EAA8B;AAC5B,WAAO,UAAP;AACD;;AACD,SAAO,WAAP;AACD,CARkB,CAAnB;AAUA,MAAMM,eAAe,8BACnBvB,SAASA,MAAMwB,MAAN,CAAaC,KADH,EAEnBA,SAAS,wBAAOA,KAAP,CAFU,CAArB;;AAKA,SAAS5B,QAAT,CAAkBG,KAAlB,EAAyB;AACvB,SAAO;AACLoB,iBAAaF,kBAAkBlB,KAAlB,CADR;AAEL0B,SAAKZ,UAAUd,KAAV,CAFA;AAGL2B,YAAQJ,aAAavB,KAAb,CAHH;AAIL4B,UAAMP,WAAWrB,KAAX,CAJD;AAKL6B,cAAU7B,MAAM6B;AALX,GAAP;AAOD;;AAED,SAAS/B,WAAT,CAAqBgC,QAArB,EAA+B;AAC7B,SAAO,+BACL;AACEC,mBAAeC,QAAQC;AADzB,GADK,EAILH,QAJK,CAAP;AAMD","file":"documentation.js","sourcesContent":["import { themes } from \"@patternplate/components\";\nimport { connect } from \"react-redux\";\nimport { createSelector } from \"reselect\";\nimport { bindActionCreators } from \"redux\";\n\nimport * as actions from \"../actions\";\n\nimport Documentation from \"../components/documentation\";\nimport selectItem from \"../selectors/item\";\nimport {flat as selectPool} from \"../selectors/pool\";\n\nexport default connect(mapState, mapDispatch)(Documentation);\n\nconst selectNotFound = createSelector(\n  state => state.routing.locationBeforeTransitions.pathname,\n  url => `\n# Documentation not found\n\n> Pretty sure these aren't the hypertext documents you are looking for.\n\nWe looked everywhere and could not find a single thing at \\`${url}\\`.\n\nYou might want to navigate back to [Home](/) or use the [Search](?search-enabled=true).\n\n---\n\nHelp us to make this message more helpful on [GitHub](https://github.com/patternplate/patternplate)\n`\n);\n\nconst selectNoDocs = () => `\n# :construction: Add documentation\n\n> Undocumented software could not exist just as well.\n>\n> â€“ The Voice of Common Sense\n\nCurrently there is no readme data at \\`./patterns/readme.md\\`, so we left this\nfriendly reminder here to change that soon.\n\nYou could start right away:\n\n\\`\\`\\`sh\necho \"# Docs\\\\n This patternplate contains ...\" > patterns/readme.md\n\\`\\`\\`\n\nSome ideas on what to write into your pattern readme\n\n*  Why this Living Styleguide interface exists, e.g. what problems it should solve\n*  What the components in are intended for, e.g. a brand, website or product\n*  The component hierarchy you use, e.g. Atomic Design\n*  Naming conventions\n*  Rules for dependencies\n*  Browser matrix\n\n---\n\nHelp us to make this message more helpful on [GitHub](https://github.com/patternplate/patternplate).\n`;\n\nconst selectDocItem = createSelector(\n  selectItem,\n  selectPool,\n  state => state.id,\n  (item, pool, id) => {\n    if (id === \"/\") {\n      const first = pool.find(i => i.contentType === \"doc\");\n      if (first) {\n        return first;\n      }\n    }\n    return item;\n  }\n);\n\nconst selectDoc = createSelector(\n  selectDocItem,\n  selectNoDocs,\n  selectNotFound,\n  (item, noDocs, notFound) => {\n    if (item && item.contents) {\n      return item.contents;\n    }\n\n    if (item && !item.contents) {\n      return noDocs;\n    }\n\n    return notFound;\n  }\n);\n\nconst selectDisplayName = createSelector(\n  selectDocItem,\n  item => {\n    if (!item) {\n      return 'patternplate';\n    }\n    return item.manifest.displayName;\n  }\n);\n\nconst selectType = createSelector(selectItem, match => {\n  if (match && match.contents) {\n    return \"doc\";\n  }\n  if (match && !match.contents) {\n    return \"fallback\";\n  }\n  return \"not-found\";\n});\n\nconst selectThemes = createSelector(\n  state => state.config.color,\n  color => themes(color)\n);\n\nfunction mapState(state) {\n  return {\n    displayName: selectDisplayName(state),\n    doc: selectDoc(state),\n    themes: selectThemes(state),\n    type: selectType(state),\n    isStatic: state.isStatic\n  };\n}\n\nfunction mapDispatch(dispatch) {\n  return bindActionCreators(\n    {\n      requestScroll: actions.scrollTo\n    },\n    dispatch\n  );\n}\n"]}