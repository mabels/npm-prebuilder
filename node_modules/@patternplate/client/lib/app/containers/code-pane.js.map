{"version":3,"sources":["../../../src/app/containers/code-pane.js"],"names":["mapProps","parser","serializer","selectDemoSource","state","demo","contents","docSource","doc","parseFromString","container","findContainer","serialized","serializeToString","start","replace","selectSource","body","documentElement","childNodes","find","node","nodeName","toLowerCase","active","item","selectType","source"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;;;;;AAHA;eAKe,yBAAQA,QAAR,EAAkB,2BAAU,gDAAV,CAAlB,C;;;AAEf,MAAMC,SAAS,uBAAf;AACA,MAAMC,aAAa,2BAAnB;AAEA,MAAMC,mBAAmB,8BACvBC,SAASA,MAAMC,IAAN,CAAWC,QADG,EAEvBC,aAAa;AACX,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,WAAOA,SAAP;AACD;;AACD,QAAMC,MAAMP,OAAOQ,eAAP,CAAuBF,SAAvB,EAAkC,WAAlC,CAAZ;AACA,QAAMG,YAAYC,cAAcH,GAAd,CAAlB;AACA,QAAMI,aAAaV,WAAWW,iBAAX,CAA6BH,SAA7B,EAAwC,WAAxC,CAAnB;AACA,QAAMI,QAAQF,WAAWG,OAAX,CACZ,mDADY,EAEZ,EAFY,CAAd;AAIA,SAAOD,MAAMC,OAAN,CAAc,UAAd,EAA0B,EAA1B,CAAP;AACD,CAdsB,CAAzB;AAiBA,MAAMC,eAAe,8BACnBb,gBADmB,EAEnBG,YAAa,OAAOA,QAAP,KAAoB,QAApB,GAA+B,qBAAOA,QAAP,CAA/B,GAAkDA,QAF5C,CAArB;;AAKA,SAASK,aAAT,CAAuBH,GAAvB,EAA4B;AAC1B,QAAMS,OAAO,CAAC,GAAGT,IAAIU,eAAJ,CAAoBC,UAAxB,EAAoCC,IAApC,CACXC,QAAQA,KAAKC,QAAL,CAAcC,WAAd,OAAgC,MAD7B,CAAb;AAGA,SAAO,CAAC,GAAGN,KAAKE,UAAT,EAAqBC,IAArB,CACLC,QAAQA,KAAKC,QAAL,CAAcC,WAAd,OAAgC,KADnC,CAAP;AAGD;;AAED,SAASvB,QAAT,CAAkBI,KAAlB,EAAyB;AACvB,SAAO;AACLoB,YAAQC,KAAKC,UAAL,CAAgBtB,KAAhB,MAA2B,SAD9B;AAELuB,YAAQX,aAAaZ,KAAb;AAFH,GAAP;AAID","file":"code-pane.js","sourcesContent":["import { DOMParser, XMLSerializer } from \"xmldom\";\nimport pretty from \"pretty\";\nimport { connect } from \"react-redux\";\nimport { createSelector } from \"reselect\";\n\n// Import * as actions from '../actions';\nimport { mountable, skippable } from \"../behaviours\";\nimport { CodePane } from \"@patternplate/components\";\nimport * as item from \"../selectors/item\";\n\nexport default connect(mapProps)(skippable(mountable(CodePane)));\n\nconst parser = new DOMParser();\nconst serializer = new XMLSerializer();\n\nconst selectDemoSource = createSelector(\n  state => state.demo.contents,\n  docSource => {\n    if (typeof docSource !== \"string\") {\n      return docSource;\n    }\n    const doc = parser.parseFromString(docSource, \"text/html\");\n    const container = findContainer(doc);\n    const serialized = serializer.serializeToString(container, \"text/html\");\n    const start = serialized.replace(\n      /^<div xmlns=\"http:\\/\\/www\\.w3\\.org\\/1999\\/xhtml\">/,\n      \"\"\n    );\n    return start.replace(/<\\/div>$/, \"\");\n  }\n);\n\nconst selectSource = createSelector(\n  selectDemoSource,\n  contents => (typeof contents === \"string\" ? pretty(contents) : contents)\n);\n\nfunction findContainer(doc) {\n  const body = [...doc.documentElement.childNodes].find(\n    node => node.nodeName.toLowerCase() === \"body\"\n  );\n  return [...body.childNodes].find(\n    node => node.nodeName.toLowerCase() === \"div\"\n  );\n}\n\nfunction mapProps(state) {\n  return {\n    active: item.selectType(state) === \"pattern\",\n    source: selectSource(state)\n  };\n}\n"]}