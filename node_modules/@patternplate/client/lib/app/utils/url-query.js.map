{"version":3,"sources":["../../../src/app/utils/url-query.js"],"names":["has","token","item","div","split","slice","not","fn","args","shove","input","index","length","format","parsed","query","reduce","result","entry","join","extension","extname","pathname","before","dirname","after","basename","filter","Boolean","parse","urlPath","raw","map","registry","key","value"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,SAASA,GAAT,CAAaC,KAAb,EAAoB;AAClB,SAAOC,QAAQ,sBAASA,IAAT,EAAeD,KAAf,CAAf;AACD;;AAED,SAASE,GAAT,CAAaF,KAAb,EAAoB;AAClB,SAAOC,QAAQA,KAAKE,KAAL,CAAWH,KAAX,EAAkBI,KAAlB,CAAwB,CAAxB,EAA2B,CAA3B,CAAf;AACD;;AAED,SAASC,GAAT,CAAaC,EAAb,EAAiB;AACf,SAAO,CAAC,GAAGC,IAAJ,KAAa,CAACD,GAAG,GAAGC,IAAN,CAArB;AACD;;AAED,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAMC,QAAQD,MAAME,MAAN,GAAe,CAA7B;;AACA,MAAIF,MAAMC,KAAN,MAAiB,GAArB,EAA0B;AACxB,WAAOD,MAAML,KAAN,CAAY,CAAZ,EAAeM,KAAf,CAAP;AACD;;AACD,SAAOD,KAAP;AACD;;AAEM,SAASG,MAAT,CAAgBC,SAAS,EAAzB,EAA6B;AAClC,QAAMC,QAAQ,qBAAQD,OAAOC,KAAP,IAAgB,EAAxB,EAA4BC,MAA5B,CACZ,CAACC,MAAD,EAASC,KAAT,KAAmB,CAAC,GAAGD,MAAJ,EAAYC,MAAMC,IAAN,CAAW,IAAX,CAAZ,CADP,EAEZ,EAFY,CAAd;;AAKA,QAAMC,YAAY,cAAKC,OAAL,CAAaP,OAAOQ,QAAP,IAAmB,EAAhC,CAAlB;;AAEA,QAAMC,SAASH,YACX,cAAKI,OAAL,CAAaV,OAAOQ,QAApB,CADW,GAEXb,MAAMK,OAAOQ,QAAb,CAFJ;AAGA,QAAMG,QAAQL,YAAY,cAAKM,QAAL,CAAcZ,OAAOQ,QAArB,CAAZ,GAA6C,EAA3D;AAEA,SAAO,CAACC,MAAD,EAAS,GAAGR,KAAZ,EAAmBU,KAAnB,EAA0BE,MAA1B,CAAiCC,OAAjC,EAA0CT,IAA1C,CAA+C,GAA/C,CAAP;AACD;;AAEM,SAASU,KAAT,CAAeC,UAAU,EAAzB,EAA6B;AAClC,QAAMhB,SAAS,aAAIe,KAAJ,CAAUC,OAAV,CAAf;;AACA,QAAMC,MAAMjB,OAAOQ,QAAP,IAAmB,EAA/B;AAEA,QAAMA,WAAWS,IACd3B,KADc,CACR,GADQ,EAEduB,MAFc,CAEPrB,IAAIN,IAAI,IAAJ,CAAJ,CAFO,EAGdmB,IAHc,CAGT,GAHS,CAAjB;AAKA,QAAMJ,QAAQgB,IACX3B,KADW,CACL,GADK,EAEXuB,MAFW,CAEJ3B,IAAI,IAAJ,CAFI,EAGXgC,GAHW,CAGP7B,IAAI,IAAJ,CAHO,EAIXa,MAJW,CAIJ,CAACiB,QAAD,EAAWf,KAAX,KAAqB;AAAA,kCACNA,KADM;AAAA,UACpBgB,GADoB;AAAA,UACfC,KADe;;AAE3BF,aAASC,GAAT,IAAgBC,KAAhB;AACA,WAAOF,QAAP;AACD,GARW,EAQT,EARS,CAAd;AAUA,SAAO;AACLX,YADK;AAELP;AAFK,GAAP;AAID;;eAEc;AAAEc,OAAF;AAAShB;AAAT,C","file":"url-query.js","sourcesContent":["import path from \"path\";\nimport url from \"url\";\nimport { entries, includes } from \"lodash\";\n\nfunction has(token) {\n  return item => includes(item, token);\n}\n\nfunction div(token) {\n  return item => item.split(token).slice(0, 2);\n}\n\nfunction not(fn) {\n  return (...args) => !fn(...args);\n}\n\nfunction shove(input) {\n  const index = input.length - 1;\n  if (input[index] === \"/\") {\n    return input.slice(0, index);\n  }\n  return input;\n}\n\nexport function format(parsed = {}) {\n  const query = entries(parsed.query || {}).reduce(\n    (result, entry) => [...result, entry.join(\"--\")],\n    []\n  );\n\n  const extension = path.extname(parsed.pathname || \"\");\n\n  const before = extension\n    ? path.dirname(parsed.pathname)\n    : shove(parsed.pathname);\n  const after = extension ? path.basename(parsed.pathname) : \"\";\n\n  return [before, ...query, after].filter(Boolean).join(\"/\");\n}\n\nexport function parse(urlPath = \"\") {\n  const parsed = url.parse(urlPath);\n  const raw = parsed.pathname || \"\";\n\n  const pathname = raw\n    .split(\"/\")\n    .filter(not(has(\"--\")))\n    .join(\"/\");\n\n  const query = raw\n    .split(\"/\")\n    .filter(has(\"--\"))\n    .map(div(\"--\"))\n    .reduce((registry, entry) => {\n      const [key, value] = entry;\n      registry[key] = value;\n      return registry;\n    }, {});\n\n  return {\n    pathname,\n    query\n  };\n}\n\nexport default { parse, format };\n"]}