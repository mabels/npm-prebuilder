"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.format = format;
exports.parse = parse;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }

function has(token) {
  return item => (0, _lodash.includes)(item, token);
}

function div(token) {
  return item => item.split(token).slice(0, 2);
}

function not(fn) {
  return (...args) => !fn(...args);
}

function shove(input) {
  const index = input.length - 1;

  if (input[index] === "/") {
    return input.slice(0, index);
  }

  return input;
}

function format(parsed = {}) {
  const query = (0, _lodash.entries)(parsed.query || {}).reduce((result, entry) => [...result, entry.join("--")], []);

  const extension = _path.default.extname(parsed.pathname || "");

  const before = extension ? _path.default.dirname(parsed.pathname) : shove(parsed.pathname);
  const after = extension ? _path.default.basename(parsed.pathname) : "";
  return [before, ...query, after].filter(Boolean).join("/");
}

function parse(urlPath = "") {
  const parsed = _url.default.parse(urlPath);

  const raw = parsed.pathname || "";
  const pathname = raw.split("/").filter(not(has("--"))).join("/");
  const query = raw.split("/").filter(has("--")).map(div("--")).reduce((registry, entry) => {
    const _entry = _slicedToArray(entry, 2),
          key = _entry[0],
          value = _entry[1];

    registry[key] = value;
    return registry;
  }, {});
  return {
    pathname,
    query
  };
}

var _default = {
  parse,
  format
};
exports.default = _default;
//# sourceMappingURL=url-query.js.map