"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _reduxActions = require("redux-actions");

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }

var _default = handleDependentActions;
exports.default = _default;

function partialReduce(deps) {
  return handlers => {
    return (0, _lodash.entries)(handlers).reduce((registry, entry) => {
      const _entry = _slicedToArray(entry, 2),
            name = _entry[0],
            fn = _entry[1];

      registry[name] = (state, action) => {
        return fn(state, action, deps);
      };

      return registry;
    }, {});
  };
}

function handleDependentActions(actionHandlers, options) {
  _assert.default.ok(Array.isArray(options.dependencies), "options.dependencies must be an array");

  const handler = (...args) => {
    const _args$ = args[2],
          dependencies = _args$ === void 0 ? {} : _args$;

    if (Object.keys(dependencies).length > 0) {
      const missing = options.dependencies.filter(dependency => !(dependency in dependencies));

      _assert.default.ok(missing.length === 0, `dependencies for ${Object.keys(actionHandlers).join(", ")} must be present in state. missing: ${missing.join(",")}. available: ${Object.keys(dependencies)}`);
    }

    const deps = (0, _lodash.pick)(dependencies, options.dependencies);
    const handlers = partialReduce(deps)(actionHandlers);
    const reducer = (0, _reduxActions.handleActions)(handlers, options.defaultValue);
    return reducer(...args);
  };

  handler.dependencies = options.dependencies;
  return handler;
}
//# sourceMappingURL=handle-dependent-actions.js.map