{"version":3,"sources":["../../../src/app/actions/listen.js"],"names":["payload","dispatch","getState","global","WebSocket","state","window","addEventListener","envelope","data","indexOf","message","safeParse","type","pathname","itemType","id","join","isStatic","source","resolve","base","url","ws","src","location","host","reconnect","interval","open","onOpen","onClose","onError","onMessage","parse","force","TypeError","JSON","err"],"mappings":"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","file":"listen.js","sourcesContent":["import url from \"url\";\nimport { WebSocketClient } from \"@patternplate/websocket-client\";\nimport ARSON from \"arson\";\nimport { createPromiseThunkAction } from \"./promise-thunk-action\";\nimport loadPatternDemo from \"./load-pattern-demo\";\nimport loadSchema from \"./load-schema\";\nimport { flat as selectPool } from \"../selectors/pool\";\nimport { patchLocation } from \"./\";\n\nexport default createPromiseThunkAction(\n  \"LISTEN\",\n  (payload, dispatch, getState) => {\n    const { WebSocket } = global;\n\n    if (!WebSocket) {\n      return;\n    }\n\n    const state = getState();\n\n    window.addEventListener(\"message\", envelope => {\n      if (typeof envelope.data !== \"string\") {\n        return;\n      }\n\n      if (envelope.data.indexOf(\"[iFrameSizer]\") === 0) {\n        return;\n      }\n\n      const message = safeParse(envelope.data);\n      if (message.type === \"navigate\") {\n        dispatch(\n          patchLocation({\n            pathname: [message.itemType, message.id].join(\"/\")\n          })\n        );\n      }\n    });\n\n    if (state.isStatic) {\n      return;\n    }\n\n    const source = url.resolve(state.base, payload.url);\n\n    const ws = new WebSocketClient({\n      src: `ws://${global.location.host}${source}/`,\n      reconnect: true,\n      interval: 1000\n    });\n\n    ws.open();\n\n    ws.onOpen(() => dispatch({ type: \"LISTEN_HEARTBEAT\", payload: {} }));\n    ws.onClose(() => dispatch({ type: \"ERROR_HEARTBEAT\", payload: {} }));\n    ws.onError(() => dispatch({ type: \"ERROR_HEARTBEAT\", payload: {} }));\n\n    ws.onMessage(async envelope => {\n      const message = ARSON.parse(envelope.data);\n      const { type, payload } = message;\n\n      switch (type) {\n        case \"error\":\n          return dispatch({\n            type: \"ERROR_HEARTBEAT\",\n            payload\n          });\n        case \"start\": {\n          dispatch(loadSchema());\n          // TODO: only reload pattern if the current pattern is affected\n          return dispatch(loadPatternDemo({ force: false }));\n        }\n        case \"done\": {\n          return dispatch({\n            type: \"LISTEN_HEARTBEAT\",\n            payload: {}\n          });\n        }\n        case \"change\": {\n          return dispatch(loadSchema());\n        }\n        default: {\n          throw new TypeError(`Received unknown message of type ${type}`);\n        }\n      }\n    });\n  }\n);\n\nfunction safeParse(data) {\n  try {\n    return JSON.parse(data);\n  } catch (err) {\n    return {};\n  }\n}\n"]}