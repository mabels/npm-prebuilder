{"version":3,"sources":["../../../src/app/components/favicon.js"],"names":["THEMES","SVG_FAVICON_SUPPORT","FavIcon","Component","constructor","args","state","componentDidMount","indexOf","name","png","getSource","props","then","pngHref","setState","catch","err","console","error","componentWillReceiveProps","next","render","source","svgHref","btoa","rel","href","type","theme","colors","color","patternplate","fill","getFill","purge","parse","purged","stringify","dark","active"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAQA;;;;;;;;AAEA,MAAMA,SAAS,yBAAf;AAEA,MAAMC,sBAAsB,CAAC,SAAD,CAA5B;;AAEA,MAAMC,OAAN,SAAsB,eAAMC,SAA5B,CAAsC;AACpCC,cAAY,GAAGC,IAAf,EAAqB;AACnB,UAAM,GAAGA,IAAT;AACA,SAAKC,KAAL,GAAa,EAAb;AACD;;AAEDC,sBAAoB;AAClB,QAAIN,oBAAoBO,OAApB,CAA4B,kBAASC,IAArC,IAA6C,CAAC,CAAlD,EAAqD;AACnD;AACD;;AAED,oBACGC,GADH,CACOC,UAAU,KAAKC,KAAf,CADP,EAEGC,IAFH,CAEQC,WAAW,KAAKC,QAAL,CAAc;AAC7BD;AAD6B,KAAd,CAFnB,EAKGE,KALH,CAKSC,OAAO;AACZC,cAAQC,KAAR,CAAcF,GAAd;AACA,WAAKF,QAAL,CAAc;AACZD,iBAAS;AADG,OAAd;AAGD,KAVH;AAWD;;AAEDM,4BAA0BC,IAA1B,EAAgC;AAC9B,QAAIpB,oBAAoBO,OAApB,CAA4B,kBAASC,IAArC,IAA6C,CAAC,CAAlD,EAAqD;AACnD;AACD;;AAED,oBACGC,GADH,CACOC,UAAUU,IAAV,CADP,EAEGR,IAFH,CAEQC,WAAW,KAAKC,QAAL,CAAc;AAC7BD;AAD6B,KAAd,CAFnB,EAKGE,KALH,CAKSC,OAAO;AACZC,cAAQC,KAAR,CAAcF,GAAd;AACA,WAAKF,QAAL,CAAc;AACZD,iBAAS;AADG,OAAd;AAGD,KAVH;AAWD;;AAEDQ,WAAS;AACP,UAAMC,SAASZ,UAAU,KAAKC,KAAf,CAAf;;AACA,UAAMY,UAAU,gBAAIC,IAAJ,CAASF,MAAT,CAAhB;;AAEA,WACE;AACE,YAAM,CACJ,IAAI,KAAKjB,KAAL,CAAWQ,OAAX,GAAqB,CAAC;AAAEY,aAAK,MAAP;AAAeC,cAAM,KAAKrB,KAAL,CAAWQ,OAAhC;AAAyCc,cAAM;AAA/C,OAAD,CAArB,GAAsF,EAA1F,CADI,EAEJ;AACEF,aAAK,MADP;AAEEC,cAAMH,OAFR;AAGEI,cAAM;AAHR,OAFI;AADR,MADF;AAYD;;AA1DmC;;eA6DvB,wBAAO1B,OAAP,C;;qEAGHU,SAASA,MAAMiB,KAAN,CAAYC,MAAZ,CAAmBC,K,EAE9BnB,SAASA,MAAMiB,KAAN,CAAYC,MAAZ,CAAmBC,K;;;;AAGtC,SAASpB,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAI,CAACA,MAAMW,MAAX,EAAmB;AACjB,WAAO,kCACL;AAAK,aAAM,4BAAX;AAAwC,eAAQ;AAAhD,OACE;AACE,kBAAY,4BAAgBS,YAD9B;AAEE,gBAFF;AAGE,aAAO;AAAEC,cAAMC,QAAQtB,KAAR;AAAR;AAHT,MADF,CADK,CAAP;AASD;;AAXuB,qBAaP,gBAAIuB,KAAJ,CAAU,CAAC,gBAAIC,KAAJ,CAAUxB,MAAMW,MAAhB,CAAD,CAAV,CAbO;AAAA;AAAA,QAajBc,MAbiB;;AAcxB,SAAO,gBAAIC,SAAJ,CAAcD,MAAd,CAAP;AACD;;AAED,SAASH,OAAT,CAAiBtB,KAAjB,EAAwB;AACtB,MAAIA,MAAMO,KAAV,EAAiB;AACf,WAAOnB,OAAOuC,IAAP,CAAYpB,KAAnB;AACD;;AACD,SAAOnB,OAAOuC,IAAP,CAAYC,MAAnB;AACD","file":"favicon.js","sourcesContent":["import React from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport Helmet from \"react-helmet\";\nimport {\n  styled,\n  themes,\n  Symbol,\n  IconDefinitions,\n  svg\n} from \"@patternplate/components\";\n\nimport platform from \"platform\";\n\nconst THEMES = themes();\n\nconst SVG_FAVICON_SUPPORT = [\"Firefox\"];\n\nclass FavIcon extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    if (SVG_FAVICON_SUPPORT.indexOf(platform.name) > -1) {\n      return;\n    }\n\n    svg\n      .png(getSource(this.props))\n      .then(pngHref => this.setState({\n        pngHref\n      }))\n      .catch(err => {\n        console.error(err);\n        this.setState({\n          pngHref: null\n        });\n      });\n  }\n\n  componentWillReceiveProps(next) {\n    if (SVG_FAVICON_SUPPORT.indexOf(platform.name) > -1) {\n      return;\n    }\n\n    svg\n      .png(getSource(next))\n      .then(pngHref => this.setState({\n        pngHref\n      }))\n      .catch(err => {\n        console.error(err);\n        this.setState({\n          pngHref: null\n        });\n      });\n  }\n\n  render() {\n    const source = getSource(this.props);\n    const svgHref = svg.btoa(source);\n\n    return (\n      <Helmet\n        link={[\n          ...(this.state.pngHref ? [{ rel: \"icon\", href: this.state.pngHref, type: \"image/png\" }] : []),\n          {\n            rel: \"icon\",\n            href: svgHref,\n            type: \"image/svg+xml\"\n          }\n        ]}\n      />\n    );\n  }\n}\n\nexport default styled(FavIcon)`\n  width: 100%;\n  height: auto;\n  stroke: ${props => props.theme.colors.color};\n  stroke-width: 0;\n  fill: ${props => props.theme.colors.color};\n`;\n\nfunction getSource(props) {\n  if (!props.source) {\n    return renderToStaticMarkup(\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n        <Symbol\n          definition={IconDefinitions.patternplate}\n          emit\n          style={{ fill: getFill(props) }}\n        />\n      </svg>\n    );\n  }\n\n  const [purged] = svg.purge([svg.parse(props.source)]);\n  return svg.stringify(purged);\n}\n\nfunction getFill(props) {\n  if (props.error) {\n    return THEMES.dark.error;\n  }\n  return THEMES.dark.active;\n}\n"]}