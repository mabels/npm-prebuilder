"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var actions = _interopRequireWildcard(require("./actions"));

var _shortcut = _interopRequireDefault(require("./utils/shortcut"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = createShortcuts;
exports.default = _default;

function createShortcuts() {
  const bind = store => {
    Object.keys(bind).forEach(name => {
      bind[name].bind(store);
    });
  };

  bind.toggleConsole = new _shortcut.default({
    character: "c",
    description: props => `${props.enabled ? "Hide" : "Show"} console`,
    action: actions.toggleConsole
  });
  bind.toggleDoc = new _shortcut.default({
    character: "d",
    description: () => `Open documentation for this pattern`,
    action: actions.toggleDoc
  });
  bind.openDocumentation = new _shortcut.default({
    character: "7",
    description: () => `Navigate back to / route`,
    action: actions.openDocumentation
  });
  bind.openFullscreen = new _shortcut.default({
    character: "f",
    description: () => `Open fullscreen view`,
    action: actions.openFullscreen
  });
  bind.toggleHide = new _shortcut.default({
    character: "h",
    description: props => `${props.enabled ? "Show" : "Hide"} hidden items`,
    action: actions.toggleHide
  });
  bind.info = new _shortcut.default({
    character: "i",
    description: props => `${props.enabled ? "Hide" : "Show"} pattern infos`,
    action: actions.toggleInfo
  });
  bind.toggleOpacity = new _shortcut.default({
    character: "o",
    description: props => `${props.enabled ? "Hide" : "Show"} opacity indicators`,
    action: actions.toggleOpacity
  });
  bind.toggleShortcuts = new _shortcut.default({
    character: "k",
    description: props => `${props.enabled ? "Hide" : "Show"} keyboard shortcuts`,
    action: actions.toggleKeyboardShortcuts
  });
  bind.toggleRulers = new _shortcut.default({
    character: "l",
    description: props => `${props.enabled ? "Hide" : "Show"} rulers`,
    action: actions.toggleRulers
  });
  bind.toggleCode = new _shortcut.default({
    character: "m",
    description: props => `${props.enabled ? "Hide" : "Show"} pattern code`,
    action: actions.toggleCode
  });
  bind.toggleNavigation = new _shortcut.default({
    character: "n",
    description: props => `${props.enabled ? "Hide" : "Show"} navigation`,
    action: actions.toggleNavigation
  });
  bind.toggleNetwork = new _shortcut.default({
    character: "d",
    description: props => `${props.enabled ? "Hide" : "Show"} dependency network`,
    action: actions.toggleNetwork
  });

  const reload = () => actions.reload({
    reloadTime: Date.now()
  });

  reload.type = actions.reload.type;
  reload.key = actions.reload.key;
  reload.property = actions.reload.property;
  bind.reload = new _shortcut.default({
    character: "r",
    description: () => `Force sync`,
    action: reload
  });
  bind.toggleSearch = new _shortcut.default({
    character: "space",
    description: props => `${props.enabled ? "Disable" : "Enable"} search`,
    action: actions.toggleSearch
  });
  bind.toggleTheme = new _shortcut.default({
    character: "t",
    description: "Toggle active theme",
    action: actions.toggleTheme
  });
  bind.close = new _shortcut.default({
    character: "esc",
    modifiers: [],
    action: actions.closeAllTheThings
  });
  bind.up = new _shortcut.default({
    character: "arrow-up",
    action: () => actions.arrow("up")
  });
  bind.right = new _shortcut.default({
    character: "arrow-right",
    action: () => actions.arrow("right")
  });
  bind.down = new _shortcut.default({
    character: "arrow-down",
    action: () => actions.arrow("down")
  });
  bind.left = new _shortcut.default({
    character: "arrow-left",
    action: () => actions.arrow("left")
  });
  return bind;
}
//# sourceMappingURL=shortcuts.js.map