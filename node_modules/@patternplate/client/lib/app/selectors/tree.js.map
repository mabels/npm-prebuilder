{"version":3,"sources":["../../../src/app/selectors/tree.js"],"names":["WEIGHTS","folder","doc","pattern","flatten","tree","children","sanitize","context","id","config","prefix","base","location","search","map","child","enriched","enrich","sort","a","b","order","manifest","options","weight","type","comp","displayName","localeCompare","childid","contentType","join","active","parent","parsed","parse","href","path","q","query","format","pathname","pre","Object","assign","warnings","filter","item","flag","push","value","message","norm","p","startsWith","split","Boolean"],"mappings":"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","file":"tree.js","sourcesContent":["import path from \"path\";\nimport querystring from \"querystring\";\nimport url from \"url\";\nimport { merge } from \"lodash\";\n\nconst WEIGHTS = {\n  folder: 0,\n  doc: 1,\n  pattern: 2\n};\n\nexport function flatten(tree) {\n  return tree.children;\n}\n\nexport function sanitize(tree, context) {\n  const { id, config = {}, prefix, base, location, search } = context;\n\n  tree.children = tree.children\n    .map(child => {\n      const enriched = enrich(child, {\n        base,\n        location,\n        id,\n        config,\n        prefix,\n        search,\n      });\n      return enriched.children\n        ? sanitize(enriched, context)\n        : enriched;\n    })\n    .sort((a, b) => {\n      const order =\n        ((((a.manifest || {}).options || {}).order || 0) - (((b.manifest || {}).options || {}).order || 0));\n      const weight = (WEIGHTS[a.type] || 0) - (WEIGHTS[b.type] || 0);\n      const comp = a.manifest.displayName.localeCompare(b.manifest.displayName);\n\n      if (order !== 0) {\n        return order;\n      }\n\n      if (weight !== 0) {\n        return weight;\n      }\n\n      return comp;\n    });\n\n  return enrich(tree, { base, location, id, config, prefix, search });\n}\n\nexport function enrich(child, context) {\n  const { id, prefix, search } = context;\n  const childid = [child.contentType, child.id].join('/');\n  child.active = (childid === id) || `doc/${context.parent}/${childid}` === id;\n  const parsed = url.parse(child.href || path.join(prefix, child.id || child.path));\n\n  const q =\n    typeof parsed.query === \"string\"\n      ? querystring.parse(parsed.query)\n      : parsed.query;\n\n  child.href = url.format({\n    pathname: pre(context.base || '', parsed.pathname || ''),\n    query: Object.assign({}, context.location.query, q)\n  });\n\n  child.warnings = child.warnings || [];\n  child.type = child.contentType === \"doc\" && typeof ((child.manifest).options || {}).query === \"string\"\n    ? \"folder\"\n    : \"item\";\n\n  if (child.type === \"folder\") {\n    child.children = search(child.manifest.options.query)\n      .filter(item => item.id !== child.id);\n  }\n\n  if (\n    child.manifest &&\n    child.type === \"pattern\" &&\n    (child.manifest.flag === \"alpha\" || child.manifest.flag === \"deprecated\")\n  ) {\n    child.warnings.push({\n      type: \"flag\",\n      value: child.manifest.flag,\n      message: `${child.manifest.displayName} is flagged as ${child.manifest\n        .flag}.`\n    });\n  }\n\n  return child;\n}\n\nfunction pre(base, pathname) {\n  const b = norm(base);\n  const p = norm(pathname);\n\n  if (p.startsWith(b)) {\n    return `/${p}`;\n  }\n\n  return `/${[norm(base), norm(pathname)].join(\"/\")}`;\n}\n\nfunction norm(p) {\n  return p.split(\"/\").filter(Boolean).join(\"/\");\n}\n"]}