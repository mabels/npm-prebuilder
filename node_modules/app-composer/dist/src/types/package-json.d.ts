import { Names } from './names';
export interface PackageJsonAppComposer {
    'entry-point-file': string;
    compose: string;
}
export interface PackageJsonSchema {
    name: string;
    version: string;
    main: string;
    license: string;
    author: string;
    scripts: {
        [id: string]: string;
    };
    dependencies?: {
        [id: string]: string;
    };
    devDependencies?: {
        [id: string]: string;
    };
    'app-composer'?: {
        [id: string]: PackageJsonAppComposer;
    };
}
export declare class PackageJson implements PackageJsonSchema {
    readonly name: string;
    readonly version: string;
    readonly main: string;
    readonly license: string;
    readonly author: string;
    readonly scripts: {};
    readonly dependencies?: {
        [id: string]: string;
    };
    readonly devDependencies?: {
        [id: string]: string;
    };
    readonly 'app-composer'?: {
        [id: string]: PackageJsonAppComposer;
    };
    static read(basePath: string, startPath?: string): PackageJson;
    static writeDummy(pkgName: string, directory: string, pkgs: Names[]): string;
    static findPathTo(str: string): string;
    static isComposable(schema: PackageJsonSchema): boolean;
    constructor(schema: PackageJsonSchema);
    write(destination: string): void;
    mergeDependencies(pkgJson: PackageJson): PackageJson;
    removeDependencies(packageNames: string[]): PackageJson;
}
