"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const execa = require("execa");
const watcher_state_1 = require("./watcher-state");
const write_composed_js_1 = require("../functions/write-composed-js");
const lst_equal_1 = require("../functions/lst-equal");
const packer_1 = require("../functions/packer");
class Watcher {
    constructor(pkgName, baseDir, watchDir) {
        this.prevPkgs = [];
        this.pkgName = pkgName;
        this.baseDir = baseDir;
        this.watchDir = watchDir;
        this.watcherState = watcher_state_1.WatcherState.COULDSTARTED;
        this.dog = this.dog.bind(this);
    }
    run(fname) {
        const exec = execa('node', [fname]);
        console.log(`starting node ${fname}:${exec.pid}`);
        exec.stdout.pipe(process.stdout);
        exec.stderr.pipe(process.stderr);
        exec.catch(() => {
            console.log(`abort node got killed ${exec.pid}`);
        }).then(() => {
            console.log(`node got killed ${exec.pid} restarting`);
            this.run(fname);
        });
        this.started = exec;
    }
    restartComposeJs(fname) {
        if (this.started) {
            const started = this.started;
            // started.on('close', () => {
            //   console.log(`got close ${started.pid}`);
            //   this.run(fname);
            // });
            console.log(`doing kill node ${started.pid}`);
            started.kill();
        }
        else {
            this.run(fname);
        }
    }
    restartDog(src) {
        if (this.watcherState === watcher_state_1.WatcherState.RESTART) {
            this.dog(src);
            return;
        }
        this.watcherState = watcher_state_1.WatcherState.COULDSTARTED;
    }
    dog(src) {
        console.log(`source: ${src}:${this.watcherState}`);
        if (this.watcherState === watcher_state_1.WatcherState.RESTART) {
            this.watcherSrc = src;
            return;
        }
        this.watcherState = watcher_state_1.WatcherState.RESTART;
        packer_1.getArchives(this.baseDir).then((archives) => {
            if (!archives) {
                return;
            }
            packer_1.readPackageJsonFromArchives(archives).then((files) => {
                const packageJson = packer_1.createCombinedPackageJson(files, this.baseDir);
                const pkgsNames = [];
                Object.keys(packageJson.dependencies).reduce((pkgs, dep) => { pkgs.push(dep); return pkgs; }, pkgsNames);
                Object.keys(packageJson.devDependencies).reduce((pkgs, dep) => { pkgs.push(dep); return pkgs; }, pkgsNames);
                if (!lst_equal_1.lstEqual(pkgsNames, this.prevPkgs)) {
                    this.prevPkgs = pkgsNames;
                    console.log(`Yarn Setup needed`);
                    execa.sync('yarn', []);
                }
                packer_1.extractArchives(archives, this.baseDir).then((pkgs) => {
                    const composeJsFname = write_composed_js_1.writeComposedJs(this.pkgName, this.baseDir, pkgs);
                    this.restartComposeJs(composeJsFname);
                    this.watcherState = watcher_state_1.WatcherState.COULDSTARTED;
                    this.restartDog(this.watcherSrc);
                }).catch((e) => {
                    console.error(e);
                });
            }).catch((e) => console.error(e));
        }).catch((e) => {
            console.error(e);
        });
    }
}
exports.Watcher = Watcher;
//# sourceMappingURL=watcher.js.map