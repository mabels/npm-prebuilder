"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_loader_1 = require("../functions/config-loader");
class Invocation {
    // tslint:disable-next-line: no-any
    static fill(obj) {
        return new Invocation(obj.packageName, obj.jsEntryPoints, obj.jsLocalRequires, obj.jsGlobalRequires);
    }
    constructor(packageName, jeps = [], jlrs = [], jgrs = []) {
        this.packageName = packageName;
        this.jsEntryPoints = jeps;
        this.jsLocalRequires = jlrs;
        this.jsGlobalRequires = jgrs;
    }
    merge(other) {
        this.jsEntryPoints.push.apply(this.jsEntryPoints, other.jsEntryPoints);
        this.jsLocalRequires.push.apply(this.jsLocalRequires, other.jsLocalRequires);
        this.jsGlobalRequires.push.apply(this.jsGlobalRequires, other.jsGlobalRequires);
    }
    getInvokableArgs() {
        if (!this.invokableArgs) {
            try {
                this.invokableArgs = config_loader_1.loadConfig(process.cwd()).invokationArgs;
            }
            catch (e) {
                console.warn('could not load invokation args. Using stub args.');
                this.invokableArgs = {
                    preamble: () => ['// preamble'],
                    createServer: () => ['// create server'],
                    startServer: () => ['// start server'],
                    appServerConfig: () => { return { port: '8080' }; }
                };
            }
        }
        return this.invokableArgs;
    }
    createServer() {
        return this.getInvokableArgs().createServer();
    }
    add(entryPoint) {
        // console.log(`XXX:${JSON.stringify(entryPoint, null, 2)}`);
        if (entryPoint.entryPointFile) {
            const jsEntryPoint = `entryPoint${entryPoint.jsAppName()}`;
            this.jsLocalRequires.push(`const ${jsEntryPoint} = require('${entryPoint.entryPointFile}');`);
            this.jsGlobalRequires.push(`const ${jsEntryPoint} = require('${entryPoint.packageJson.name}/${entryPoint.entryPointFile}');`);
            this.jsEntryPoints.push(`appServer.addInvokable(${jsEntryPoint}.factory())`);
        }
    }
    startServer() {
        return this.getInvokableArgs().startServer();
    }
    preamble() {
        return this.getInvokableArgs().preamble();
    }
    initAppServer() {
        return [
            'const appServer = new AppServer();',
            `const appServerConfig = ${JSON.stringify(this.getInvokableArgs().appServerConfig())};`,
        ];
    }
    build(reqs) {
        const js = this.preamble()
            .concat(reqs)
            .concat(this.createServer())
            .concat(this.initAppServer())
            .concat(this.jsEntryPoints)
            .concat(this.startServer());
        return js.join('\n');
    }
}
exports.Invocation = Invocation;
//# sourceMappingURL=invocation.js.map