"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const package_json_1 = require("../types/package-json");
const extractor_1 = require("./extractor");
const write_composed_js_1 = require("./write-composed-js");
const archive_reader_1 = require("./archive-reader");
function getArchives(basePath) {
    return __awaiter(this, void 0, void 0, function* () {
        // tslint:disable-next-line: no-var-requires no-require-imports
        const globby = require('globby');
        const globFiles = `${basePath}/**/*tgz`;
        const globExcludeNodeModules = `!${basePath}/node_modules`;
        return yield globby([globFiles, globExcludeNodeModules]);
    });
}
exports.getArchives = getArchives;
function extractArchives(archives, destination) {
    return extractor_1.extractor(path.join(destination, 'node_modules'), createNames(archives));
}
exports.extractArchives = extractArchives;
function createNames(archives) {
    return archives.map((archive) => {
        return {
            package: '',
            invocationJson: '',
            npmPackage: archive
        };
    });
}
function createCombinedPackageJson(packageFiles, basePath) {
    let result = package_json_1.PackageJson.read(basePath);
    packageFiles.forEach((pkg) => {
        result = result.mergeDependencies(pkg);
    });
    result = result.removeDependencies(packageFiles.map((p) => p.name));
    result.write(path.join(basePath, 'package.json'));
    return result;
}
exports.createCombinedPackageJson = createCombinedPackageJson;
function createStartupScript(names, basePath) {
    console.log(`write startup script to ${basePath}`);
    write_composed_js_1.writeComposedJs('composed', basePath, names);
}
function readPackageJsonFromArchives(archives) {
    return Promise.all(archives.map((a) => archive_reader_1.getPackageJsonFromArchive(a)));
}
exports.readPackageJsonFromArchives = readPackageJsonFromArchives;
function createBuildPack(basePath) {
    getArchives(basePath).then((archives) => {
        if (!archives) {
            return;
        }
        readPackageJsonFromArchives(archives).then((files) => {
            createCombinedPackageJson(files, basePath);
        }).catch((e) => console.error(e));
    }).catch((e) => console.error(e));
}
exports.createBuildPack = createBuildPack;
function createStartup(basePath) {
    getArchives(basePath).then((archives) => {
        if (!archives) {
            return;
        }
        readPackageJsonFromArchives(archives).then((files) => {
            extractArchives(archives, basePath)
                .then((names) => createStartupScript(names, basePath))
                .catch((e) => console.error(e));
        }).catch((e) => console.error(e));
    }).catch((e) => console.error(e));
}
exports.createStartup = createStartup;
//# sourceMappingURL=packer.js.map