/// <reference types="googlemaps" />
import { GeoMarkerGoogle } from './geo-marker-google';
import * as Types from './types';
export interface GeoMapGoogleInit {
    context?: Types.GeoMapContext;
    config: Types.LoadGoogleMapConfig;
}
export declare class GeoMapGoogle implements Types.GeoMapImplementation {
    api: Types.GoogleApi;
    map: google.maps.Map;
    markers: GeoMarkerGoogle[];
    private layer;
    private loadResult;
    private context;
    private config;
    private phases;
    private handlers;
    constructor(init: GeoMapGoogleInit);
    fire(eventName: Types.GeoEvent): void;
    load(): Promise<Types.LoadGoogleMapResult>;
    mount(el: HTMLElement, mountInit: Types.GeoMapMountInit): Promise<void>;
    phase(phase: Types.GeoMapPhase): Promise<void>;
    getCenter(): Promise<Types.GeoPoint>;
    setCenter(center: Types.GeoPoint): Promise<void>;
    getMarkers(): Promise<GeoMarkerGoogle[]>;
    getLayer(): Promise<Types.GeoLayer>;
    setLayer(layer: Types.GeoLayer): Promise<void>;
    getType(): Promise<Types.GeoMapType>;
    setType(type: Types.GeoMapType): Promise<void>;
    getViewBounds(): Promise<Types.GeoBounds>;
    setViewBounds(bounds: Types.GeoBounds): Promise<void>;
    setViewport(viewport: Types.GeoMapViewport): Promise<void>;
    getZoom(): Promise<number>;
    setZoom(factor: number): Promise<void>;
    addEventListener(eventName: Types.GeoEvent.Click, handler: Types.GeoEventHandler<Types.GeoClickPayload>): Promise<void>;
    addEventListener(eventName: Types.GeoEvent.Changed, handler: Types.GeoEventHandler<void>): Promise<void>;
    coversLocation(point: Types.GeoPoint): Promise<boolean>;
}
