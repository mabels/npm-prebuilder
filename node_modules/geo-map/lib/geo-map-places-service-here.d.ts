/// <reference types="heremaps" />
import * as Types from './types';
interface HerePlaceCategory {
    id: string;
    title: string;
    href: string;
    type: string;
    system?: string;
    icon: string;
}
export interface HerePlaceAccess {
    position: number[];
    accessType: string;
}
export interface Images {
    available: number;
    next: string;
    items: ImagesItem[];
}
export interface ImagesItem {
    src: string;
    id: string;
    href: string;
    type: string;
    date: string;
    supports: string[];
    user: {
        id: string;
        name: string;
    };
    via: {
        href: string;
        type: string;
    };
    supplier: HerePlaceCategory;
    attribution: string;
}
export interface Ratings {
    available: number;
    items: RatingsItem[];
}
export interface RatingsItem {
    count: number;
    average: number;
    via: {
        href: string;
        type: string;
    };
    supplier: HerePlaceCategory;
    attribution: string;
}
export interface Related {
    recommended: {
        title: string;
        href: string;
        type: string;
    };
    'public-transport': {
        title: string;
        href: string;
        type: string;
    };
}
export declare class GeoMapPlacesServiceHere implements Types.GeoMapPlacesServiceImplementation {
    private platform;
    private api;
    static create(init: {
        api: Types.HereApi;
        platform: H.service.Platform;
    }): GeoMapPlacesServiceHere;
    private constructor();
    get(id: string): Promise<Types.Result<Types.GeoMapPlaceDetails>>;
    private getPlaceFromGeocodingData;
    search(needle: string, center: Types.GeoPoint, radius?: number): Promise<Types.Result<Types.GeoMapPlace[]>>;
    private getLocationFromPlaceData;
    distanceBetween(from: Types.GeoPoint, to: Types.GeoPoint, radius?: number): number;
}
export {};
