"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var geo_marker_1 = require("./geo-marker");
var geo_map_phases_1 = require("./geo-map-phases");
var geo_rect_here_1 = require("./geo-rect-here");
var load_map_api_1 = require("./load-map-api");
var Types = require("./types");
var GeoMapHere = /** @class */ (function () {
    function GeoMapHere(init) {
        this.markers = [];
        this.layer = Types.GeoLayer.None;
        this.mapType = Types.GeoMapType.Unknown;
        this.phases = new geo_map_phases_1.GeoMapPhases();
        this.handlers = new Map();
        this.context = init.context || { window: window };
        this.config = init.config;
        this.phases.resolve(Types.GeoMapPhase.Pristine);
    }
    GeoMapHere.prototype.fire = function (eventName, e) {
        var handlers = this.handlers.get(eventName) || [];
        handlers.forEach(function (h) { return h(e); });
    };
    GeoMapHere.prototype.changed = function () {
        return __awaiter(this, void 0, void 0, function () {
            var changed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.tainted) return [3 /*break*/, 2];
                        changed = this.context ? this.context.changed : undefined;
                        return [4 /*yield*/, (changed || hereMapChanged)(this.map)];
                    case 1:
                        _a.sent();
                        this.tainted = false;
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var load, mapResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.phases.resolve(Types.GeoMapPhase.Loading);
                        load = this.context.load ? this.context.load : load_map_api_1.loadMapApi;
                        return [4 /*yield*/, load(this.config, this.context)];
                    case 1:
                        mapResult = _a.sent();
                        if (mapResult.result.type === Types.ResultType.Success) {
                            this.api = mapResult.result.payload;
                        }
                        this.phases.resolve(Types.GeoMapPhase.Loaded);
                        return [2 /*return*/, mapResult];
                }
            });
        });
    };
    GeoMapHere.prototype.mount = function (el, mountInit) {
        return __awaiter(this, void 0, void 0, function () {
            var api, layer, _a, top_1, right, bottom, left;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.phases.resolve(Types.GeoMapPhase.Mounting);
                        api = this.api;
                        this.platform = new this.api.service.Platform({
                            app_code: this.config.appCode,
                            app_id: this.config.appId,
                            useHTTPS: true
                        });
                        this.mapType = mountInit.type || Types.GeoMapType.Roadmap;
                        this.layer = mountInit.layer || Types.GeoLayer.None;
                        layer = getHereMapLayer({
                            type: this.mapType,
                            layer: this.layer,
                            language: this.config.language
                        }, {
                            platform: this.platform,
                            window: this.context.window
                        });
                        this.map = new api.Map(el, layer, {
                            center: mountInit.center,
                            zoom: mountInit.zoom
                        });
                        this.phases.resolve(Types.GeoMapPhase.Mounted);
                        this.phases.resolve(Types.GeoMapPhase.Layouting);
                        // tslint:disable-next-line:no-unused-expression
                        new api.mapevents.Behavior(new api.mapevents.MapEvents(this.map));
                        this.context.window.addEventListener('resize', function () {
                            return _this.map.getViewPort().resize();
                        });
                        if (this.config.viewport) {
                            _a = this.config.viewport, top_1 = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left;
                            this.map.getViewPort().setPadding(top_1, right, bottom, left);
                        }
                        return [4 /*yield*/, (this.context.loaded
                                ? this.context.loaded(this.map, { api: this.api, context: this.context })
                                : hereMapLoaded(this.map, { api: this.api, context: this.context }))];
                    case 1:
                        _b.sent();
                        this.phases.resolve(Types.GeoMapPhase.Layouted);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.phase = function (phase) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.phases.get(phase)];
            });
        });
    };
    GeoMapHere.prototype.getCenter = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.map.getCenter()];
                }
            });
        });
    };
    GeoMapHere.prototype.setCenter = function (center) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        this.map.setCenter(center);
                        this.fire(Types.GeoEvent.Changed);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.getMarkers = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.markers];
            });
        });
    };
    GeoMapHere.prototype.getLayer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.layer];
            });
        });
    };
    GeoMapHere.prototype.setLayer = function (layer) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.layer = layer;
                return [2 /*return*/, this.setType(this.mapType)];
            });
        });
    };
    GeoMapHere.prototype.getType = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.mapType];
            });
        });
    };
    GeoMapHere.prototype.setType = function (type) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.mapType = type;
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        this.map.setBaseLayer(getHereMapLayer({
                            type: this.mapType,
                            layer: this.layer,
                            language: this.config.language
                        }, {
                            platform: this.platform,
                            window: this.context.window
                        }));
                        this.fire(Types.GeoEvent.Changed);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.setViewport = function (viewport) {
        return __awaiter(this, void 0, void 0, function () {
            var top, right, bottom, left;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        top = viewport.top, right = viewport.right, bottom = viewport.bottom, left = viewport.left;
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        this.map.getViewPort().setPadding(top, right, bottom, left);
                        return [4 /*yield*/, this.changed];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.getViewBounds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var bounds, rect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        bounds = this.map.getViewBounds();
                        rect = geo_rect_here_1.GeoRectHere.from(bounds, { mapImplementation: this });
                        return [2 /*return*/, rect.getBounds()];
                }
            });
        });
    };
    GeoMapHere.prototype.setViewBounds = function (bounds) {
        return __awaiter(this, void 0, void 0, function () {
            var rect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        rect = geo_rect_here_1.GeoRectHere.create(bounds, { mapImplementation: this });
                        this.map.setViewBounds(rect.toRect());
                        return [4 /*yield*/, this.changed];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.getZoom = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.changed()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, this.map.getZoom()];
                }
            });
        });
    };
    GeoMapHere.prototype.setZoom = function (factor) {
        return __awaiter(this, void 0, void 0, function () {
            var previousFactor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getZoom()];
                    case 1:
                        previousFactor = _a.sent();
                        if (previousFactor === factor) {
                            return [2 /*return*/];
                        }
                        this.tainted = true;
                        this.map.setZoom(factor);
                        return [4 /*yield*/, this.changed()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.addEventListener = function (eventName, handler) {
        return __awaiter(this, void 0, void 0, function () {
            var previous, hereEventName;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        previous = this.handlers.get(eventName) || [];
                        this.handlers.set(eventName, previous.concat([handler]));
                        hereEventName = geoToHereEvent(eventName);
                        if (!hereEventName) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        // tslint:disable-next-line:no-any
                        this.map.addEventListener(hereEventName, function (e) {
                            if (eventName === Types.GeoEvent.Click) {
                                var position = _this.map.screenToGeo(e.currentPointer.viewportX, e.currentPointer.viewportY);
                                handler({ position: position });
                                return;
                            }
                            handler();
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapHere.prototype.createMarker = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, geo_marker_1.GeoMarker.create({
                        provider: Types.GeoMapProvider.Here,
                        mapImplementation: this,
                        position: config.position,
                        icon: config.icon
                    })];
            });
        });
    };
    GeoMapHere.prototype.coversLocation = function (point) {
        return __awaiter(this, void 0, void 0, function () {
            var viewBounds, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = geo_rect_here_1.GeoRectHere).create;
                        return [4 /*yield*/, this.getViewBounds()];
                    case 1:
                        viewBounds = _b.apply(_a, [_c.sent(), {
                                mapImplementation: this
                            }]);
                        return [2 /*return*/, viewBounds.coversLocation(point)];
                }
            });
        });
    };
    return GeoMapHere;
}());
exports.GeoMapHere = GeoMapHere;
function hereMapLoaded(map, _) {
    return new Promise(function (resolve) {
        map.addEventListener('mapviewchangeend', function () {
            resolve();
        });
    });
}
function hereMapChanged(map) {
    return new Promise(function (resolve) {
        var onChanged = function () {
            resolve();
            map.removeEventListener('mapviewchangeend', onChanged);
        };
        map.addEventListener('mapviewchangeend', onChanged);
    });
}
function getHereMapLayer(config, context) {
    var defaultLayers = context.platform.createDefaultLayers({
        tileSize: 256,
        lg: isoToHereLanguage(config.language || 'en'),
        ppi: getOptimalHerePixelDensity(),
        pois: true
    });
    var key = getHereMapKey(config.layer);
    switch (config.type) {
        case Types.GeoMapType.Hybrid:
            return defaultLayers.satellite[key] || defaultLayers.satellite.map;
        case Types.GeoMapType.Roadmap:
        default:
            return defaultLayers.normal[key] || defaultLayers.normal.map;
    }
}
function getHereMapKey(layer) {
    switch (layer) {
        case Types.GeoLayer.Transit:
            return 'transit';
        case Types.GeoLayer.Traffic:
            return 'traffic';
        case Types.GeoLayer.None:
        default:
            return 'map';
    }
}
function isoToHereLanguage(isoCode) {
    // tslint:disable-next-line:no-any
    return (Types.HereLanguage[isoCode] ||
        Types.HereLanguage.en);
}
function getOptimalHerePixelDensity() {
    // tslint:disable:no-any
    var keys = Object.keys(Types.HerePixelDensity).filter(function (k) { return typeof Types.HerePixelDensity[k] === 'number'; });
    var scale = keys.map(function (k) { return Types.HerePixelDensity[k]; });
    var devicePpi = (window.devicePixelRatio || 1) * 72;
    return scale.find(function (ppi) { return ppi > devicePpi; }) || scale[scale.length - 1];
}
function geoToHereEvent(input) {
    switch (input) {
        case Types.GeoEvent.Click:
            return 'tap';
        case Types.GeoEvent.Changed:
            return 'mapviewchange';
        default:
            return;
    }
}
//# sourceMappingURL=geo-map-here.js.map