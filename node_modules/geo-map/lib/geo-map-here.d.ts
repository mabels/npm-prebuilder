/// <reference types="heremaps" />
import { GeoMarker } from './geo-marker';
import { GeoMarkerHere } from './geo-marker-here';
import * as Types from './types';
export interface GeoMapHereInit {
    context?: Types.GeoMapContext;
    config: Types.LoadHereMapConfig;
}
export declare class GeoMapHere implements Types.GeoMapImplementation {
    api: Types.HereApi;
    map: H.Map;
    markers: GeoMarkerHere[];
    platform: H.service.Platform;
    private layer;
    private tainted;
    private context;
    private config;
    private mapType;
    private phases;
    private handlers;
    constructor(init: GeoMapHereInit);
    fire(eventName: Types.GeoEvent, e?: Event): void;
    private changed;
    load(): Promise<Types.LoadHereMapResult>;
    mount(el: HTMLElement, mountInit: Types.GeoMapMountInit): Promise<void>;
    phase(phase: Types.GeoMapPhase): Promise<void>;
    getCenter(): Promise<Types.GeoPoint>;
    setCenter(center: Types.GeoPoint): Promise<void>;
    getMarkers(): Promise<GeoMarkerHere[]>;
    getLayer(): Promise<Types.GeoLayer>;
    setLayer(layer: Types.GeoLayer): Promise<void>;
    getType(): Promise<Types.GeoMapType>;
    setType(type: Types.GeoMapType): Promise<void>;
    setViewport(viewport: Types.GeoMapViewport): Promise<void>;
    getViewBounds(): Promise<Types.GeoBounds>;
    setViewBounds(bounds: Types.GeoBounds): Promise<void>;
    getZoom(): Promise<number>;
    setZoom(factor: number): Promise<void>;
    addEventListener(eventName: Types.GeoEvent.Click, handler: Types.GeoEventHandler<Types.GeoClickPayload>): Promise<void>;
    addEventListener(eventName: Types.GeoEvent.Changed, handler: Types.GeoEventHandler<void>): Promise<void>;
    createMarker(config: Types.GeoMarkerConfig): Promise<GeoMarker>;
    coversLocation(point: Types.GeoPoint): Promise<boolean>;
}
