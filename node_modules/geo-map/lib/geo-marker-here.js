"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Result = require("./result");
var Types = require("./types");
var GeoMarkerHere = /** @class */ (function () {
    function GeoMarkerHere(config, context) {
        this.anchor = {
            vertical: Types.GeoMarkerOrientation.Middle,
            horizontal: Types.GeoMarkerOrientation.Middle
        };
        this.implementation = context.mapImplementation;
        this.marker = new this.implementation.api.map.Marker(config.position);
        if (config.anchor) {
            this.anchor = config.anchor;
        }
        this.setIcon(config.icon);
        this.implementation.map.addObject(this.marker);
        this.implementation.markers.push(this);
        this.implementation.fire(Types.GeoEvent.Changed);
    }
    GeoMarkerHere.create = function (config, context) {
        return new GeoMarkerHere(config, context);
    };
    GeoMarkerHere.prototype.getIcon = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.iconMarkup];
            });
        });
    };
    GeoMarkerHere.prototype.setIcon = function (icon) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.iconMarkup = icon;
            _this.icon = new _this.implementation.api.map.Icon(icon);
            _this.marker.setIcon(_this.icon);
            // tslint:disable-next-line:no-any
            var IconState = _this.implementation.api.map.Icon
                .prototype.State;
            var onChange = function () {
                var result = Result.createResult();
                if (_this.icon.getState() === IconState.READY) {
                    var size = _this.icon.getSize();
                    var anchor = _this.icon.getAnchor();
                    var wRatio = getOrientationRatio(_this.anchor.horizontal);
                    var hRatio = getOrientationRatio(_this.anchor.vertical);
                    anchor.set(size.w * wRatio, size.h * hRatio);
                    Result.toSuccess(result, {});
                }
                if (_this.icon.getState() === IconState.ERROR) {
                    Result.toFailure(result, new Error("Failed loading marker icon"));
                }
                resolve(result);
                _this.icon.removeEventListener('statechange', onChange);
            };
            _this.icon.addEventListener('statechange', onChange);
        });
    };
    GeoMarkerHere.prototype.setPosition = function (position) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.marker.setPosition(position);
                return [2 /*return*/];
            });
        });
    };
    GeoMarkerHere.prototype.getPosition = function () {
        return __awaiter(this, void 0, void 0, function () {
            var position;
            return __generator(this, function (_a) {
                position = this.marker.getPosition();
                return [2 /*return*/, {
                        lat: position.lat,
                        lng: position.lng
                    }];
            });
        });
    };
    GeoMarkerHere.prototype.remove = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.implementation.map.removeObject(this.marker);
                this.implementation.markers.splice(this.implementation.markers.indexOf(this));
                this.implementation.fire(Types.GeoEvent.Changed);
                return [2 /*return*/];
            });
        });
    };
    return GeoMarkerHere;
}());
exports.GeoMarkerHere = GeoMarkerHere;
function getOrientationRatio(orientation) {
    switch (orientation) {
        case Types.GeoMarkerOrientation.Start:
            return 0;
        case Types.GeoMarkerOrientation.End:
            return 1;
        case Types.GeoMarkerOrientation.Middle:
        default:
            return 0.5;
    }
}
//# sourceMappingURL=geo-marker-here.js.map