"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Types = require("./types");
var Util = require("./util");
var CountryCodes = require("./country-codes");
var GeoMapPlacesServiceGoogle = /** @class */ (function () {
    function GeoMapPlacesServiceGoogle(init) {
        this.api = init.api;
    }
    GeoMapPlacesServiceGoogle.create = function (init) {
        return new GeoMapPlacesServiceGoogle(init);
    };
    GeoMapPlacesServiceGoogle.prototype.get = function (placeId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        var container = document.createElement('div');
                        var service = new _this.api.places.PlacesService(container);
                        service.getDetails({
                            placeId: placeId,
                            fields: [
                                'address_components',
                                'formatted_address',
                                'geometry',
                                'icon',
                                'name',
                                'permanently_closed',
                                'place_id',
                                'type',
                                'formatted_phone_number',
                                'opening_hours',
                                'website'
                            ]
                        }, function (result) {
                            if (!result || result === null) {
                                return resolve({
                                    type: Types.ResultType.Failure,
                                    error: new Error("Could not fetch place data for place id " + placeId)
                                });
                            }
                            var get = Util.getAddressComponent(result.address_components);
                            var countryCode = get('country', {
                                variant: Util.AddressComponentVariant.Short
                            });
                            resolve({
                                type: Types.ResultType.Success,
                                payload: {
                                    provider: Types.GeoMapProvider.Google,
                                    id: result.place_id,
                                    name: result.name,
                                    address: {
                                        country: get('country'),
                                        countryCode: CountryCodes.alphaTwo[countryCode],
                                        county: get('administrative_area_level_2'),
                                        district: get('sublocality_level_1'),
                                        state: get('administrative_area_level_1'),
                                        postalCode: get('postal_code'),
                                        locality: get('locality'),
                                        route: get('route'),
                                        streetNumber: get('street_number')
                                    },
                                    formattedAddress: result.formatted_address,
                                    location: result.geometry.location.toJSON(),
                                    icon: result.icon,
                                    permanentlyClosed: result.permanently_closed,
                                    type: result.types,
                                    formattedPhoneNumber: result.formatted_phone_number,
                                    website: result.website
                                }
                            });
                        });
                    })];
            });
        });
    };
    GeoMapPlacesServiceGoogle.prototype.search = function (needle, center, radius) {
        return __awaiter(this, void 0, void 0, function () {
            var container, service, request;
            var _this = this;
            return __generator(this, function (_a) {
                container = document.createElement('div');
                service = new this.api.places.PlacesService(container);
                request = {
                    query: needle,
                    location: center,
                    radius: radius
                };
                return [2 /*return*/, new Promise(function (resolve) {
                        try {
                            service.textSearch(request, function (results, status) {
                                if (status === _this.api.places.PlacesServiceStatus.OK) {
                                    return resolve({
                                        type: Types.ResultType.Success,
                                        payload: results.map(function (result) { return _this.convertResult(result); })
                                    });
                                }
                                else if (status === _this.api.places.PlacesServiceStatus.ZERO_RESULTS ||
                                    status === _this.api.places.PlacesServiceStatus.NOT_FOUND) {
                                    return resolve({
                                        type: Types.ResultType.Success,
                                        payload: []
                                    });
                                }
                                return resolve({
                                    type: Types.ResultType.Failure,
                                    error: new Error('Query status ' + status)
                                });
                            });
                        }
                        catch (error) {
                            return resolve({
                                type: Types.ResultType.Failure,
                                error: error
                            });
                        }
                    })];
            });
        });
    };
    GeoMapPlacesServiceGoogle.prototype.convertResult = function (result) {
        return {
            provider: Types.GeoMapProvider.Google,
            id: result.place_id,
            name: result.name,
            formattedAddress: result.formatted_address,
            location: result.geometry.location.toJSON()
        };
    };
    GeoMapPlacesServiceGoogle.prototype.distanceBetween = function (from, to, radius) {
        return this.api.geometry.spherical.computeDistanceBetween(new this.api.LatLng(from.lat, from.lng), new this.api.LatLng(to.lat, to.lng), radius);
    };
    return GeoMapPlacesServiceGoogle;
}());
exports.GeoMapPlacesServiceGoogle = GeoMapPlacesServiceGoogle;
//# sourceMappingURL=geo-map-places-service-google.js.map