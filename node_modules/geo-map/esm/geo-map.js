var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { GeoMapGoogle } from './geo-map-google';
import { GeoMapHere } from './geo-map-here';
import { GeoMarker } from './geo-marker';
import { GeoCircle } from './geo-circle';
import { GeoRect } from './geo-rect';
import * as Types from './types';
import { ServerSideGeoMap } from './server-side-geo-map';
import { GeoMapCodingService } from './geo-map-coding-service';
import { GeoMapPlacesService } from './geo-map-places-service';
import { GeoMapDirectionService } from './geo-map-direction-service';
var GeoMap = /** @class */ (function () {
    function GeoMap(init) {
        this.implementation = init.implementation;
        this.provider = init.provider;
    }
    GeoMap.create = function (init) {
        if (typeof window === 'undefined') {
            return new GeoMap({
                implementation: new ServerSideGeoMap(init.config),
                provider: Types.GeoMapProvider.Custom
            });
        }
        if (init.config.provider === Types.GeoMapProvider.Here) {
            return new GeoMap({
                implementation: new GeoMapHere({
                    config: init.config,
                    context: init.context
                }),
                provider: init.config.provider
            });
        }
        return new GeoMap({
            implementation: new GeoMapGoogle({
                config: init.config,
                context: init.context
            }),
            provider: init.config.provider
        });
    };
    GeoMap.from = function (implementation) {
        return new GeoMap({
            implementation: implementation,
            provider: Types.GeoMapProvider.Custom
        });
    };
    GeoMap.prototype.createMarker = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, GeoMarker.create({
                        anchor: config.anchor,
                        provider: this.provider,
                        mapImplementation: this.implementation,
                        position: config.position,
                        icon: config.icon
                    })];
            });
        });
    };
    GeoMap.prototype.createGeoRect = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, GeoRect.create(__assign({ provider: this.provider }, config), { mapImplementation: this.implementation })];
            });
        });
    };
    GeoMap.prototype.createGeoCircle = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, GeoCircle.create(__assign({ provider: this.provider }, config), { mapImplementation: this.implementation })];
            });
        });
    };
    GeoMap.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.implementation.load()];
            });
        });
    };
    GeoMap.prototype.mount = function (el, init) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.implementation.load()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.implementation.mount(el, init)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMap.prototype.phase = function (phase) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.implementation.phase(phase)];
            });
        });
    };
    GeoMap.prototype.getCenter = function () {
        return this.implementation.getCenter();
    };
    GeoMap.prototype.setCenter = function (center) {
        return this.implementation.setCenter(center);
    };
    GeoMap.prototype.getLayer = function () {
        return this.implementation.getLayer();
    };
    GeoMap.prototype.setLayer = function (type) {
        return this.implementation.setLayer(type);
    };
    GeoMap.prototype.getType = function () {
        return this.implementation.getType();
    };
    GeoMap.prototype.setType = function (type) {
        return this.implementation.setType(type);
    };
    GeoMap.prototype.setViewport = function (viewport) {
        return this.implementation.setViewport(viewport);
    };
    GeoMap.prototype.getViewBounds = function () {
        return this.implementation.getViewBounds();
    };
    GeoMap.prototype.setViewBounds = function (bounds) {
        return this.implementation.setViewBounds(bounds);
    };
    GeoMap.prototype.getZoom = function () {
        return this.implementation.getZoom();
    };
    GeoMap.prototype.setZoom = function (zoomFactor) {
        return this.implementation.setZoom(zoomFactor);
    };
    GeoMap.prototype.addEventListener = function (event, handler) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.implementation.addEventListener(event, handler)];
            });
        });
    };
    // public async coversLocation(point: Types.GeoPoint): Promise<boolean> {
    //   return this.implementation.coversLocation(point);
    // }
    GeoMap.prototype.reverseGeocode = function (point) {
        return __awaiter(this, void 0, void 0, function () {
            var hereService, googleService;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Loaded)];
                    case 1:
                        _a.sent();
                        // TODO: Move out of here when splitting GeoMap into Geo -> Map, Geo -> Code, Geo -> ...
                        if (this.provider === Types.GeoMapProvider.Here) {
                            hereService = GeoMapCodingService.create({
                                type: this.provider,
                                api: this.implementation.api,
                                platform: this.implementation.platform
                            });
                            return [2 /*return*/, hereService.reverse(point)];
                        }
                        googleService = GeoMapCodingService.create({
                            type: this.provider,
                            api: this.implementation.api
                        });
                        return [2 /*return*/, googleService.reverse(point)];
                }
            });
        });
    };
    GeoMap.prototype.getPlacesService = function () {
        return __awaiter(this, void 0, void 0, function () {
            var hereService, googleService;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Loaded)];
                    case 1:
                        _a.sent();
                        if (this.provider === Types.GeoMapProvider.Here) {
                            hereService = GeoMapPlacesService.create({
                                type: this.provider,
                                api: this.implementation.api,
                                platform: this.implementation.platform
                            });
                            return [2 /*return*/, hereService];
                        }
                        googleService = GeoMapPlacesService.create({
                            type: this.provider,
                            api: this.implementation.api
                        });
                        return [2 /*return*/, googleService];
                }
            });
        });
    };
    GeoMap.prototype.getDirectionService = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.directionService) {
                            return [2 /*return*/, this.directionService];
                        }
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Loaded)];
                    case 1:
                        _a.sent();
                        if (this.provider === Types.GeoMapProvider.Here) {
                            this.directionService = GeoMapDirectionService.create({
                                type: this.provider,
                                api: this.implementation.api,
                                platform: this.implementation.platform,
                                map: this.implementation
                            });
                            return [2 /*return*/, this.directionService];
                        }
                        this.directionService = GeoMapDirectionService.create({
                            type: this.provider,
                            api: this.implementation.api,
                            map: this.implementation
                        });
                        return [2 /*return*/, this.directionService];
                }
            });
        });
    };
    GeoMap.prototype.getPlace = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var service;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPlacesService()];
                    case 1:
                        service = _a.sent();
                        return [2 /*return*/, service.get(id)];
                }
            });
        });
    };
    /**
     * @param needle Phrase to search for
     * @param center Center of the search operation
     * @param radius Radius around `center` to search in. Defaults to 50000m as the whole earth radius.
     */
    GeoMap.prototype.search = function (needle, center, radius) {
        if (radius === void 0) { radius = 50000; }
        return __awaiter(this, void 0, void 0, function () {
            var service;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPlacesService()];
                    case 1:
                        service = _a.sent();
                        return [2 /*return*/, service.search(needle, center, radius)];
                }
            });
        });
    };
    /**
     * @param from
     * @param to
     * @param radius
     */
    GeoMap.prototype.distanceBetween = function (from, to, radius) {
        return __awaiter(this, void 0, void 0, function () {
            var service;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPlacesService()];
                    case 1:
                        service = _a.sent();
                        return [2 /*return*/, service.distanceBetween(from, to, radius)];
                }
            });
        });
    };
    GeoMap.prototype.paintRoute = function (from, to) {
        return __awaiter(this, void 0, void 0, function () {
            var service;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDirectionService()];
                    case 1:
                        service = _a.sent();
                        return [2 /*return*/, service.paintRoute(from, to)];
                }
            });
        });
    };
    GeoMap.prototype.clearDrawings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var service;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getDirectionService()];
                    case 1:
                        service = _a.sent();
                        service.clear();
                        return [2 /*return*/];
                }
            });
        });
    };
    return GeoMap;
}());
export { GeoMap };
//# sourceMappingURL=geo-map.js.map