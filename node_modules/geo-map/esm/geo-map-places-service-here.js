var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as Result from './result';
import * as Types from './types';
var GeoMapPlacesServiceHere = /** @class */ (function () {
    function GeoMapPlacesServiceHere(init) {
        this.platform = init.platform;
        this.api = init.api;
    }
    GeoMapPlacesServiceHere.create = function (init) {
        return new GeoMapPlacesServiceHere(init);
    };
    GeoMapPlacesServiceHere.prototype.get = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        var service = _this.platform.getGeocodingService();
                        service.geocode({
                            locationid: id,
                            responseattributes: 'matchType,matchCode,parsedRequest',
                            locationattributes: 'address,mapReference,mapView,addressDetails,streetDetails,additionalData,adminIds,linkInfo,adminInfo,timeZone,addressNamesBilingual,related.nearByAddress',
                            addressattributes: 'country,state,county,city,district,subdistrict,street,houseNumber,postalCode,addressLines,additionalData'
                        }, function (payload) {
                            if (!payload.Response) {
                                return resolve(Result.createFailure(new Error('TODO: error')));
                            }
                            if (payload.Response.View.length === 0) {
                                return resolve(Result.createFailure(new Error('TODO: no result')));
                            }
                            if (payload.Response.View[0].Result.length === 0) {
                                return resolve(Result.createFailure(new Error('TODO: no result')));
                            }
                            var location = payload.Response.View[0].Result[0].Location;
                            _this.getPlaceFromGeocodingData(location.Address.Label, location.DisplayPosition.Latitude, location.DisplayPosition.Longitude)
                                .then(function (place) {
                                resolve(Result.createSuccess({
                                    provider: Types.GeoMapProvider.Here,
                                    id: id,
                                    name: place.title,
                                    formattedAddress: location.Address.Label,
                                    address: {
                                        country: location.Address.AdditionalData['CountryName'],
                                        countryCode: location.Address.Country,
                                        county: location.Address.County,
                                        district: location.Address.District,
                                        state: location.Address.State,
                                        postalCode: location.Address.PostalCode,
                                        locality: location.Address.City,
                                        route: location.Address.Street,
                                        streetNumber: location.Address.HouseNumber
                                    },
                                    location: {
                                        lat: location.DisplayPosition.Latitude,
                                        lng: location.DisplayPosition.Longitude
                                    },
                                    permanentlyClosed: false
                                }));
                            })
                                .catch(function (err) { return resolve(Result.createFailure(err)); });
                        }, function (serviceError) { return resolve(Result.createFailure(serviceError)); });
                    })];
            });
        });
    };
    GeoMapPlacesServiceHere.prototype.getPlaceFromGeocodingData = function (address, lat, lng) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var service = _this.platform.getPlacesService();
                        var point = [lat, lng].join(',');
                        service.request('browse', { at: point }, function (response) {
                            if (!response.results ||
                                !response.results.items ||
                                response.results.items.length === 0) {
                                return reject(new Error('Invalid search result'));
                            }
                            resolve(response.results.items[0]);
                        }, function (serviceError) { return reject(serviceError); });
                    })];
            });
        });
    };
    GeoMapPlacesServiceHere.prototype.search = function (needle, center, radius) {
        var _this = this;
        return new Promise(function (resolve) {
            var service = _this.platform.getPlacesService();
            var point = [center.lat, center.lng].join(',');
            var params = typeof radius !== 'undefined'
                ? { in: point + ";r=" + radius }
                : { at: point };
            service.search(__assign({ q: needle, tf: 'plain' }, params), function (response) {
                var results = response.results;
                if (typeof results === 'undefined' || !Array.isArray(results.items)) {
                    resolve(Result.createSuccess([]));
                }
                var locationPromises = Promise.all(results.items.map(function (item) {
                    return _this.getLocationFromPlaceData(item.vicinity, item.position[0], item.position[1]);
                }));
                locationPromises
                    .then(function (locations) {
                    var places = results.items.map(function (item, index) {
                        var location = locations[index];
                        return {
                            provider: Types.GeoMapProvider.Here,
                            id: location.Response.View[0].Result[0].Location.LocationId,
                            name: item.title,
                            formattedAddress: item.vicinity,
                            location: {
                                lat: item.position[0],
                                lng: item.position[1]
                            }
                        };
                    });
                    resolve(Result.createSuccess(places));
                })
                    .catch(function (err) {
                    resolve(Result.createFailure(err));
                });
            }, function (serviceError) { return resolve(Result.createFailure(serviceError)); });
        });
    };
    GeoMapPlacesServiceHere.prototype.getLocationFromPlaceData = function (query, lat, lng) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var service = _this.platform.getGeocodingService();
                        service.geocode({
                            searchtext: query,
                            prox: lat + "," + lng,
                            responseattributes: 'matchType,matchCode,parsedRequest',
                            locationattributes: 'address,mapReference,mapView,addressDetails,streetDetails,additionalData,adminIds,linkInfo,adminInfo,timeZone,addressNamesBilingual,related.nearByAddress',
                            addressattributes: 'country,state,county,city,district,subdistrict,street,houseNumber,postalCode,addressLines,additionalData'
                        }, function (payload) {
                            if (!payload.Response) {
                                return resolve(Result.createFailure(new Error('TODO: error')));
                            }
                            if (payload.Response.View.length === 0) {
                                return resolve(Result.createFailure(new Error('TODO: no result')));
                            }
                            if (payload.Response.View[0].Result.length === 0) {
                                return resolve(Result.createFailure(new Error('TODO: no result')));
                            }
                            resolve(payload);
                        }, function (serviceError) { return reject(serviceError); });
                    })];
            });
        });
    };
    GeoMapPlacesServiceHere.prototype.distanceBetween = function (from, to, radius) {
        return new this.api.geo.Point(from.lat, from.lng).distance(new this.api.geo.Point(to.lat, to.lng));
    };
    return GeoMapPlacesServiceHere;
}());
export { GeoMapPlacesServiceHere };
//# sourceMappingURL=geo-map-places-service-here.js.map