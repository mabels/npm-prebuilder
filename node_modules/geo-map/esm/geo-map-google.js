var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { GeoMapPhases } from './geo-map-phases';
import { GeoRectGoogle } from './geo-rect-google';
import { loadMapApi } from './load-map-api';
import * as Types from './types';
var DEFAULT_VIEWPORT = { top: 0, right: 0, bottom: 0, left: 0 };
var GeoMapGoogle = /** @class */ (function () {
    function GeoMapGoogle(init) {
        this.markers = [];
        this.layer = [Types.GeoLayer.None, undefined];
        this.phases = new GeoMapPhases();
        this.handlers = new Map();
        this.context = init.context || { window: window };
        this.config = init.config;
        this.phases.resolve(Types.GeoMapPhase.Pristine);
    }
    GeoMapGoogle.prototype.fire = function (eventName) {
        var handlers = this.handlers.get(eventName) || [];
        handlers.forEach(function (h) { return h(); });
    };
    GeoMapGoogle.prototype.load = function () {
        return __awaiter(this, void 0, void 0, function () {
            var load, mapResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.phases.resolve(Types.GeoMapPhase.Loading);
                        load = this.context.load ? this.context.load : loadMapApi;
                        this.loadResult = this.loadResult || load(this.config, this.context);
                        return [4 /*yield*/, this.loadResult];
                    case 1:
                        mapResult = _a.sent();
                        if (mapResult.result.type === Types.ResultType.Success) {
                            this.api = mapResult.result.payload;
                        }
                        this.phases.resolve(Types.GeoMapPhase.Loaded);
                        return [2 /*return*/, mapResult];
                }
            });
        });
    };
    GeoMapGoogle.prototype.mount = function (el, mountInit) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.phases.resolve(Types.GeoMapPhase.Mounting);
                        this.map = new this.api.Map(el, {
                            center: mountInit.center,
                            zoom: mountInit.zoom || 1,
                            mapTypeId: typeToGoogleMapTypeId(mountInit.type || Types.GeoMapType.Roadmap, this.api),
                            disableDefaultUI: true
                        });
                        if (mountInit.layer) {
                            this.setLayer(mountInit.layer);
                        }
                        this.phases.resolve(Types.GeoMapPhase.Mounted);
                        this.phases.resolve(Types.GeoMapPhase.Layouting);
                        return [4 /*yield*/, this.setCenter(mountInit.center)];
                    case 1:
                        _a.sent();
                        // Disable default POI click handling
                        this.map.addListener('click', function (e) { return e.placeId && e.stop(); });
                        return [4 /*yield*/, (this.context.loaded
                                ? this.context.loaded(this.map, { api: this.api, context: this.context })
                                : googleMapLoaded(this.map, { api: this.api, context: this.context }))];
                    case 2:
                        _a.sent();
                        this.api.event.addListenerOnce(this.map, 'tilesloaded', function () {
                            _this.phases.resolve(Types.GeoMapPhase.Layouted);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.phase = function (phase) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.phases.get(phase)];
            });
        });
    };
    GeoMapGoogle.prototype.getCenter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, viewport, projection, apparentCenter, apparentPoint, center;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.config.viewport, viewport = _a === void 0 ? DEFAULT_VIEWPORT : _a;
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, getProjection(this.map, this.api)];
                    case 2:
                        projection = _b.sent();
                        apparentCenter = this.map.getCenter();
                        apparentPoint = projection.fromLatLngToContainerPixel(apparentCenter);
                        apparentPoint.x += Math.abs(viewport.left - viewport.right) / 2;
                        apparentPoint.y += Math.abs(viewport.top - viewport.bottom) / 2;
                        center = projection.fromContainerPixelToLatLng(apparentPoint);
                        return [2 /*return*/, {
                                lat: center.lat(),
                                lng: center.lng()
                            }];
                }
            });
        });
    };
    GeoMapGoogle.prototype.setCenter = function (center) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, viewport, projection, latlng, apparentPoint;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.config.viewport, viewport = _a === void 0 ? DEFAULT_VIEWPORT : _a;
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, getProjection(this.map, this.api)];
                    case 2:
                        projection = _b.sent();
                        latlng = new this.api.LatLng(center.lat, center.lng);
                        apparentPoint = projection.fromLatLngToContainerPixel(latlng);
                        apparentPoint.x -= Math.abs(viewport.left - viewport.right) / 2;
                        apparentPoint.y -= Math.abs(viewport.top - viewport.bottom) / 2;
                        this.map.setCenter(projection.fromContainerPixelToLatLng(apparentPoint));
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.getMarkers = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.markers];
            });
        });
    };
    GeoMapGoogle.prototype.getLayer = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.layer[0]];
            });
        });
    };
    GeoMapGoogle.prototype.setLayer = function (layer) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, current, googleLayer, _b, newLayer;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _c.sent();
                        _a = this.layer, current = _a[0], googleLayer = _a[1];
                        if (current === layer) {
                            return [2 /*return*/];
                        }
                        if (googleLayer) {
                            googleLayer.setMap(null);
                        }
                        switch (layer) {
                            case Types.GeoLayer.Traffic:
                                this.layer = [layer, new this.api.TrafficLayer()];
                                break;
                            case Types.GeoLayer.Transit:
                                this.layer = [layer, new this.api.TransitLayer()];
                                break;
                            case Types.GeoLayer.None:
                            default:
                                this.layer = [layer, undefined];
                        }
                        _b = this.layer, newLayer = _b[1];
                        if (newLayer) {
                            newLayer.setMap(this.map);
                        }
                        this.fire(Types.GeoEvent.Changed);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.getType = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        switch (this.map.getMapTypeId()) {
                            case this.api.MapTypeId.HYBRID:
                                return [2 /*return*/, Types.GeoMapType.Hybrid];
                            case this.api.MapTypeId.ROADMAP:
                                return [2 /*return*/, Types.GeoMapType.Roadmap];
                            default:
                                return [2 /*return*/, Types.GeoMapType.Unknown];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.setType = function (type) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        this.map.setMapTypeId(typeToGoogleMapTypeId(type, this.api));
                        this.fire(Types.GeoEvent.Changed);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.getViewBounds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var bounds, rect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        bounds = this.map.getBounds();
                        rect = GeoRectGoogle.from(bounds, { mapImplementation: this });
                        return [2 /*return*/, rect.getBounds()];
                }
            });
        });
    };
    GeoMapGoogle.prototype.setViewBounds = function (bounds) {
        return __awaiter(this, void 0, void 0, function () {
            var rect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        rect = GeoRectGoogle.create(bounds, { mapImplementation: this });
                        this.map.fitBounds(rect.toBounds(), this.config.viewport);
                        this.fire(Types.GeoEvent.Changed);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.setViewport = function (viewport) {
        return __awaiter(this, void 0, void 0, function () {
            var center;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCenter()];
                    case 1:
                        center = _a.sent();
                        this.config.viewport = viewport;
                        return [4 /*yield*/, this.setCenter(center)];
                    case 2:
                        _a.sent();
                        this.fire(Types.GeoEvent.Changed);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.getZoom = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.map.getZoom()];
                }
            });
        });
    };
    GeoMapGoogle.prototype.setZoom = function (factor) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        this.map.setZoom(factor);
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.addEventListener = function (eventName, handler) {
        return __awaiter(this, void 0, void 0, function () {
            var previous, googleEventName;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        previous = this.handlers.get(eventName) || [];
                        this.handlers.set(eventName, previous.concat([handler]));
                        return [4 /*yield*/, this.phase(Types.GeoMapPhase.Mounted)];
                    case 1:
                        _a.sent();
                        googleEventName = geoToGoogleEvent(eventName);
                        if (eventName === 'changed') {
                            this.map.addListener('bounds_changed', handler);
                            this.map.addListener('zoom_changed', handler);
                            this.map.addListener('center_changed', handler);
                            this.map.addListener('maptypeid_changed', handler);
                            return [2 /*return*/];
                        }
                        if (!googleEventName) {
                            return [2 /*return*/];
                        }
                        // tslint:disable-next-line:no-any
                        this.map.addListener(googleEventName, function (e) {
                            if (eventName === Types.GeoEvent.Click) {
                                var position = {
                                    lat: e.latLng.lat(),
                                    lng: e.latLng.lng()
                                };
                                handler({ position: position });
                                return;
                            }
                            handler();
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    GeoMapGoogle.prototype.coversLocation = function (point) {
        return __awaiter(this, void 0, void 0, function () {
            var rect, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = GeoRectGoogle).create;
                        return [4 /*yield*/, this.getViewBounds()];
                    case 1:
                        rect = _b.apply(_a, [_c.sent(), {
                                mapImplementation: this
                            }]);
                        return [2 /*return*/, rect.coversLocation(point)];
                }
            });
        });
    };
    return GeoMapGoogle;
}());
export { GeoMapGoogle };
function googleMapLoaded(map, _a) {
    var api = _a.api;
    return new Promise(function (resolve) {
        return api.event.addListenerOnce(map, 'idle', function () { return resolve(); });
    });
}
function typeToGoogleMapTypeId(type, api) {
    switch (type) {
        case Types.GeoMapType.Hybrid:
            return api.MapTypeId.HYBRID;
        case Types.GeoMapType.Roadmap:
        default:
            return api.MapTypeId.ROADMAP;
    }
}
function getProjection(map, api) {
    return new Promise(function (resolve, reject) {
        try {
            var overlayView_1 = new api.OverlayView();
            overlayView_1.draw = function () {
                /** */
            };
            overlayView_1.onAdd = function () { return resolve(overlayView_1.getProjection()); };
            overlayView_1.setMap(map);
        }
        catch (err) {
            reject(err);
        }
    });
}
function geoToGoogleEvent(input) {
    switch (input) {
        case Types.GeoEvent.Click:
            return 'click';
        case Types.GeoEvent.Changed:
            return 'idle';
        case Types.GeoEvent.Loaded:
            return 'tilesloaded';
        default:
            return;
    }
}
//# sourceMappingURL=geo-map-google.js.map