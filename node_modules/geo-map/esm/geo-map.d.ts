import { GeoMarker } from './geo-marker';
import { GeoCircle } from './geo-circle';
import { GeoRect } from './geo-rect';
import * as Types from './types';
export declare class GeoMap {
    readonly provider: Types.GeoMapProvider;
    static create(init: {
        config: Types.GeoMapConfig;
        context?: Types.GeoMapContext;
    }): GeoMap;
    static from(implementation: Types.GeoMapImplementation): GeoMap;
    private constructor();
    createMarker(config: Types.GeoMarkerConfig): Promise<GeoMarker>;
    createGeoRect(config: Types.GeoBounds): Promise<GeoRect>;
    createGeoCircle(config: Types.GeoCircleConfig): Promise<GeoCircle>;
    load(): Promise<Types.LoadMapResult>;
    mount(el: HTMLElement, init: Types.GeoMapMountInit): Promise<void>;
    phase(phase: Types.GeoMapPhase): Promise<void>;
    getCenter(): Promise<Types.GeoPoint>;
    setCenter(center: Types.GeoPoint): Promise<void>;
    getLayer(): Promise<Types.GeoLayer>;
    setLayer(type: Types.GeoLayer): Promise<void>;
    getType(): Promise<Types.GeoMapType>;
    setType(type: Types.GeoMapType): Promise<void>;
    setViewport(viewport: Types.GeoMapViewport): Promise<void>;
    getViewBounds(): Promise<Types.GeoBounds>;
    setViewBounds(bounds: Types.GeoBounds): Promise<void>;
    getZoom(): Promise<number>;
    setZoom(zoomFactor: number): Promise<void>;
    addEventListener(eventName: Types.GeoEvent.Click, handler: Types.GeoEventHandler<Types.GeoClickPayload>): Promise<void>;
    addEventListener(eventName: Types.GeoEvent.Changed | Types.GeoEvent.Loaded, handler: Types.GeoEventHandler<void>): Promise<void>;
    reverseGeocode(point: Types.GeoPoint): Promise<Types.Result<Types.GeoMapPlaceDetails[]>>;
    private getPlacesService;
    private getDirectionService;
    getPlace(id: string): Promise<Types.Result<Types.GeoMapPlaceDetails>>;
    /**
     * @param needle Phrase to search for
     * @param center Center of the search operation
     * @param radius Radius around `center` to search in. Defaults to 50000m as the whole earth radius.
     */
    search(needle: string, center: Types.GeoPoint, radius?: number): Promise<Types.Result<Types.GeoMapPlace[]>>;
    /**
     * @param from
     * @param to
     * @param radius
     */
    distanceBetween(from: Types.GeoPoint, to: Types.GeoPoint, radius?: number): Promise<number>;
    paintRoute(from: Types.GeoPoint, to: Types.GeoPoint): Promise<Types.GeoMapDirectionResult>;
    clearDrawings(): Promise<void>;
}
