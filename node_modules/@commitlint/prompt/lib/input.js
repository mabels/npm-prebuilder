'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

/* eslint-disable valid-jsdoc */
/**
 * Get user input by interactive prompt based on
 * conventional-changelog-lint rules.
 * @param {function} prompter
 * @return {Promise<string>} commit message
 */
var input = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(prompter) {
		var _this = this;

		var results, _ref2, rules;

		return _regenerator2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						results = {
							type: null,
							scope: null,
							subject: null,
							body: null,
							footer: null
						};
						_context2.next = 3;
						return (0, _core.load)();

					case 3:
						_ref2 = _context2.sent;
						rules = _ref2.rules;
						_context2.next = 7;
						return Promise.all(['type', 'scope', 'subject', 'body', 'footer'].map((0, _throat2.default)(1, function () {
							var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(input) {
								var inputRules, inputSettings, isHeader, headerLengthRule, _headerLengthRule, _headerLengthRule$, severity, applicable, length;

								return _regenerator2.default.wrap(function _callee$(_context) {
									while (1) {
										switch (_context.prev = _context.next) {
											case 0:
												inputRules = getRules(input, rules);
												inputSettings = _settings2.default[input];
												isHeader = ['type', 'scope', 'subject'].indexOf(input) > -1;
												headerLengthRule = getRules('header', rules).filter((0, _getHasName2.default)('max-length'))[0];


												if (isHeader && headerLengthRule) {
													_headerLengthRule = (0, _slicedToArray3.default)(headerLengthRule, 2), _headerLengthRule$ = (0, _slicedToArray3.default)(_headerLengthRule[1], 3), severity = _headerLengthRule$[0], applicable = _headerLengthRule$[1], length = _headerLengthRule$[2];

													if (severity > 0 && applicable === 'always') {
														inputSettings.header = {
															length
														};
													}
												}

												_context.next = 7;
												return (0, _getPrompt2.default)(input, {
													// eslint-disable-line no-await-in-loop
													rules: inputRules,
													settings: inputSettings,
													results,
													prompter
												});

											case 7:
												results[input] = _context.sent;

											case 8:
											case 'end':
												return _context.stop();
										}
									}
								}, _callee, _this);
							}));

							return function (_x2) {
								return _ref3.apply(this, arguments);
							};
						}()))).catch(function (err) {
							console.error(err);
							return '';
						});

					case 7:
						return _context2.abrupt('return', (0, _format2.default)(results));

					case 8:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, this);
	}));

	return function input(_x) {
		return _ref.apply(this, arguments);
	};
}();

/**
 * Get prefix for a given rule id
 * @param  {string} id of the rule
 * @return {string} prefix of the rule
 */


var _core = require('@commitlint/core');

var _throat = require('throat');

var _throat2 = _interopRequireDefault(_throat);

var _format = require('./library/format');

var _format2 = _interopRequireDefault(_format);

var _getHasName = require('./library/get-has-name');

var _getHasName2 = _interopRequireDefault(_getHasName);

var _getPrompt = require('./library/get-prompt');

var _getPrompt2 = _interopRequireDefault(_getPrompt);

var _settings = require('./settings');

var _settings2 = _interopRequireDefault(_settings);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = input;
function getRulePrefix(id) {
	var fragments = id.split('-');

	var _fragments = (0, _slicedToArray3.default)(fragments, 1),
	    prefix = _fragments[0];

	return fragments.length > 1 ? prefix : null;
}

/**
 * Get a predecate matching rule definitions with a given prefix
 * @param  {[type]} name [description]
 * @return {[type]}      [description]
 */
function getHasPrefix(name) {
	return function (rule) {
		return getRulePrefix(rule[0]) === name;
	};
}

/**
 * Get rules for a given prefix
 * @param  {string} prefix to search in rule names
 * @param  {object} rules  rules to search in
 * @return {object}        rules matching the prefix search
 */
function getRules(prefix, rules) {
	return Object.entries(rules).filter(getHasPrefix(prefix));
}
module.exports = exports['default'];