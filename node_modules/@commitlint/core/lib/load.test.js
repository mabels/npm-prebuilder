'use strict';

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _load = require('./load');

var _load2 = _interopRequireDefault(_load);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var cwd = process.cwd();

_ava2.default.afterEach.always(function (t) {
	t.context.back();
});

(0, _ava2.default)('extends-empty should have no rules', function () {
	var _ref = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/extends-empty');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual.rules, {});
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('uses seed as configured', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/extends-empty');
		var actual = yield (0, _load2.default)({ rules: { foo: 'bar' } });
		t.is(actual.rules.foo, 'bar');
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('invalid extend should throw', function (t) {
	t.context.back = chdir('fixtures/extends-invalid');
	t.throws((0, _load2.default)());
});

(0, _ava2.default)('empty file should have no rules', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/empty-object-file');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual.rules, {});
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty file should extend nothing', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/empty-file');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual.extends, []);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('recursive extends', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/recursive-extends');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual, {
			extends: ['./first-extended'],
			rules: {
				zero: 0,
				one: 1,
				two: 2
			}
		});
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('ignores unknow keys', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/trash-file');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual, {
			extends: [],
			rules: {
				foo: 'bar',
				baz: 'bar'
			}
		});
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('ignores unknow keys recursively', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/trash-extend');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual, {
			extends: ['./one'],
			rules: {
				zero: 0,
				one: 1
			}
		});
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('supports legacy .conventional-changelog-lintrc', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/legacy');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual, {
			extends: [],
			rules: {
				legacy: true
			}
		});
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('commitlint.config.js overrides .conventional-changelog-lintrc', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		t.context.back = chdir('fixtures/overriden-legacy');
		var actual = yield (0, _load2.default)();
		t.deepEqual(actual, {
			extends: [],
			rules: {
				legacy: false
			}
		});
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());

function chdir(target) {
	var to = _path2.default.resolve(cwd, target.split('/').join(_path2.default.sep));
	process.chdir(to);
	return function () {
		return process.chdir(cwd);
	};
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2FkLnRlc3QuanMiXSwibmFtZXMiOlsiY3dkIiwicHJvY2VzcyIsImFmdGVyRWFjaCIsImFsd2F5cyIsInQiLCJjb250ZXh0IiwiYmFjayIsImNoZGlyIiwiYWN0dWFsIiwiZGVlcEVxdWFsIiwicnVsZXMiLCJmb28iLCJpcyIsInRocm93cyIsImV4dGVuZHMiLCJ6ZXJvIiwib25lIiwidHdvIiwiYmF6IiwibGVnYWN5IiwidGFyZ2V0IiwidG8iLCJyZXNvbHZlIiwic3BsaXQiLCJqb2luIiwic2VwIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7Ozs7QUFFQSxJQUFNQSxNQUFNQyxRQUFRRCxHQUFSLEVBQVo7O0FBRUEsY0FBS0UsU0FBTCxDQUFlQyxNQUFmLENBQXNCLGFBQUs7QUFDMUJDLEdBQUVDLE9BQUYsQ0FBVUMsSUFBVjtBQUNBLENBRkQ7O0FBSUEsbUJBQUssb0NBQUw7QUFBQSw4QkFBMkMsV0FBTUYsQ0FBTixFQUFXO0FBQ3JEQSxJQUFFQyxPQUFGLENBQVVDLElBQVYsR0FBaUJDLE1BQU0sd0JBQU4sQ0FBakI7QUFDQSxNQUFNQyxTQUFTLE1BQU0scUJBQXJCO0FBQ0FKLElBQUVLLFNBQUYsQ0FBWUQsT0FBT0UsS0FBbkIsRUFBMEIsRUFBMUI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHlCQUFMO0FBQUEsK0JBQWdDLFdBQU1OLENBQU4sRUFBVztBQUMxQ0EsSUFBRUMsT0FBRixDQUFVQyxJQUFWLEdBQWlCQyxNQUFNLHdCQUFOLENBQWpCO0FBQ0EsTUFBTUMsU0FBUyxNQUFNLG9CQUFLLEVBQUNFLE9BQU8sRUFBQ0MsS0FBSyxLQUFOLEVBQVIsRUFBTCxDQUFyQjtBQUNBUCxJQUFFUSxFQUFGLENBQUtKLE9BQU9FLEtBQVAsQ0FBYUMsR0FBbEIsRUFBdUIsS0FBdkI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLDZCQUFMLEVBQW9D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O0FBTUEsRUFURDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFXQSxTQUFTWixLQUFULENBQWVhLE1BQWYsRUFBdUI7QUFDdEIsS0FBTUMsS0FBSyxlQUFLQyxPQUFMLENBQWF0QixHQUFiLEVBQWtCb0IsT0FBT0csS0FBUCxDQUFhLEdBQWIsRUFBa0JDLElBQWxCLENBQXVCLGVBQUtDLEdBQTVCLENBQWxCLENBQVg7QUFDQXhCLFNBQVFNLEtBQVIsQ0FBY2MsRUFBZDtBQUNBLFFBQU87QUFBQSxTQUFNcEIsUUFBUU0sS0FBUixDQUFjUCxHQUFkLENBQU47QUFBQSxFQUFQO0FBQ0EiLCJmaWxlIjoibG9hZC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuXG5pbXBvcnQgbG9hZCBmcm9tICcuL2xvYWQnO1xuXG5jb25zdCBjd2QgPSBwcm9jZXNzLmN3ZCgpO1xuXG50ZXN0LmFmdGVyRWFjaC5hbHdheXModCA9PiB7XG5cdHQuY29udGV4dC5iYWNrKCk7XG59KTtcblxudGVzdCgnZXh0ZW5kcy1lbXB0eSBzaG91bGQgaGF2ZSBubyBydWxlcycsIGFzeW5jIHQgPT4ge1xuXHR0LmNvbnRleHQuYmFjayA9IGNoZGlyKCdmaXh0dXJlcy9leHRlbmRzLWVtcHR5Jyk7XG5cdGNvbnN0IGFjdHVhbCA9IGF3YWl0IGxvYWQoKTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLnJ1bGVzLCB7fSk7XG59KTtcblxudGVzdCgndXNlcyBzZWVkIGFzIGNvbmZpZ3VyZWQnLCBhc3luYyB0ID0+IHtcblx0dC5jb250ZXh0LmJhY2sgPSBjaGRpcignZml4dHVyZXMvZXh0ZW5kcy1lbXB0eScpO1xuXHRjb25zdCBhY3R1YWwgPSBhd2FpdCBsb2FkKHtydWxlczoge2ZvbzogJ2Jhcid9fSk7XG5cdHQuaXMoYWN0dWFsLnJ1bGVzLmZvbywgJ2JhcicpO1xufSk7XG5cbnRlc3QoJ2ludmFsaWQgZXh0ZW5kIHNob3VsZCB0aHJvdycsIHQgPT4ge1xuXHR0LmNvbnRleHQuYmFjayA9IGNoZGlyKCdmaXh0dXJlcy9leHRlbmRzLWludmFsaWQnKTtcblx0dC50aHJvd3MobG9hZCgpKTtcbn0pO1xuXG50ZXN0KCdlbXB0eSBmaWxlIHNob3VsZCBoYXZlIG5vIHJ1bGVzJywgYXN5bmMgdCA9PiB7XG5cdHQuY29udGV4dC5iYWNrID0gY2hkaXIoJ2ZpeHR1cmVzL2VtcHR5LW9iamVjdC1maWxlJyk7XG5cdGNvbnN0IGFjdHVhbCA9IGF3YWl0IGxvYWQoKTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLnJ1bGVzLCB7fSk7XG59KTtcblxudGVzdCgnZW1wdHkgZmlsZSBzaG91bGQgZXh0ZW5kIG5vdGhpbmcnLCBhc3luYyB0ID0+IHtcblx0dC5jb250ZXh0LmJhY2sgPSBjaGRpcignZml4dHVyZXMvZW1wdHktZmlsZScpO1xuXHRjb25zdCBhY3R1YWwgPSBhd2FpdCBsb2FkKCk7XG5cdHQuZGVlcEVxdWFsKGFjdHVhbC5leHRlbmRzLCBbXSk7XG59KTtcblxudGVzdCgncmVjdXJzaXZlIGV4dGVuZHMnLCBhc3luYyB0ID0+IHtcblx0dC5jb250ZXh0LmJhY2sgPSBjaGRpcignZml4dHVyZXMvcmVjdXJzaXZlLWV4dGVuZHMnKTtcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgbG9hZCgpO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIHtcblx0XHRleHRlbmRzOiBbJy4vZmlyc3QtZXh0ZW5kZWQnXSxcblx0XHRydWxlczoge1xuXHRcdFx0emVybzogMCxcblx0XHRcdG9uZTogMSxcblx0XHRcdHR3bzogMlxuXHRcdH1cblx0fSk7XG59KTtcblxudGVzdCgnaWdub3JlcyB1bmtub3cga2V5cycsIGFzeW5jIHQgPT4ge1xuXHR0LmNvbnRleHQuYmFjayA9IGNoZGlyKCdmaXh0dXJlcy90cmFzaC1maWxlJyk7XG5cdGNvbnN0IGFjdHVhbCA9IGF3YWl0IGxvYWQoKTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLCB7XG5cdFx0ZXh0ZW5kczogW10sXG5cdFx0cnVsZXM6IHtcblx0XHRcdGZvbzogJ2JhcicsXG5cdFx0XHRiYXo6ICdiYXInXG5cdFx0fVxuXHR9KTtcbn0pO1xuXG50ZXN0KCdpZ25vcmVzIHVua25vdyBrZXlzIHJlY3Vyc2l2ZWx5JywgYXN5bmMgdCA9PiB7XG5cdHQuY29udGV4dC5iYWNrID0gY2hkaXIoJ2ZpeHR1cmVzL3RyYXNoLWV4dGVuZCcpO1xuXHRjb25zdCBhY3R1YWwgPSBhd2FpdCBsb2FkKCk7XG5cdHQuZGVlcEVxdWFsKGFjdHVhbCwge1xuXHRcdGV4dGVuZHM6IFsnLi9vbmUnXSxcblx0XHRydWxlczoge1xuXHRcdFx0emVybzogMCxcblx0XHRcdG9uZTogMVxuXHRcdH1cblx0fSk7XG59KTtcblxudGVzdCgnc3VwcG9ydHMgbGVnYWN5IC5jb252ZW50aW9uYWwtY2hhbmdlbG9nLWxpbnRyYycsIGFzeW5jIHQgPT4ge1xuXHR0LmNvbnRleHQuYmFjayA9IGNoZGlyKCdmaXh0dXJlcy9sZWdhY3knKTtcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgbG9hZCgpO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIHtcblx0XHRleHRlbmRzOiBbXSxcblx0XHRydWxlczoge1xuXHRcdFx0bGVnYWN5OiB0cnVlXG5cdFx0fVxuXHR9KTtcbn0pO1xuXG50ZXN0KCdjb21taXRsaW50LmNvbmZpZy5qcyBvdmVycmlkZXMgLmNvbnZlbnRpb25hbC1jaGFuZ2Vsb2ctbGludHJjJywgYXN5bmMgdCA9PiB7XG5cdHQuY29udGV4dC5iYWNrID0gY2hkaXIoJ2ZpeHR1cmVzL292ZXJyaWRlbi1sZWdhY3knKTtcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgbG9hZCgpO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIHtcblx0XHRleHRlbmRzOiBbXSxcblx0XHRydWxlczoge1xuXHRcdFx0bGVnYWN5OiBmYWxzZVxuXHRcdH1cblx0fSk7XG59KTtcblxuZnVuY3Rpb24gY2hkaXIodGFyZ2V0KSB7XG5cdGNvbnN0IHRvID0gcGF0aC5yZXNvbHZlKGN3ZCwgdGFyZ2V0LnNwbGl0KCcvJykuam9pbihwYXRoLnNlcCkpO1xuXHRwcm9jZXNzLmNoZGlyKHRvKTtcblx0cmV0dXJuICgpID0+IHByb2Nlc3MuY2hkaXIoY3dkKTtcbn1cbiJdfQ==