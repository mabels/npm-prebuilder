'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _lint = require('./lint');

var _lint2 = _interopRequireDefault(_lint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

(0, _ava2.default)('throws without params', function (t) {
	t.throws((0, _lint2.default)());
});

(0, _ava2.default)('throws with empty message', function (t) {
	t.throws((0, _lint2.default)(''));
});

(0, _ava2.default)('positive on stub message and no rule', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var actual = yield (0, _lint2.default)('foo: bar');
		t.true(actual.valid);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('positive on stub message and adhered rule', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var actual = yield (0, _lint2.default)('foo: bar', {
			'type-enum': [2, 'always', ['foo']]
		});
		t.true(actual.valid);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('negative on stub message and broken rule', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var actual = yield (0, _lint2.default)('foo: bar', {
			'type-enum': [2, 'never', ['foo']]
		});
		t.false(actual.valid);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('positive on ignored message and broken rule', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var actual = yield (0, _lint2.default)('Revert "some bogus commit"', {
			'type-empty': [2, 'never']
		});
		t.true(actual.valid);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9saW50LnRlc3QuanMiXSwibmFtZXMiOlsidCIsInRocm93cyIsImFjdHVhbCIsInRydWUiLCJ2YWxpZCIsImZhbHNlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7Ozs7O0FBRUEsbUJBQUssdUJBQUwsRUFBOEIsYUFBSztBQUNsQ0EsR0FBRUMsTUFBRixDQUFTLHFCQUFUO0FBQ0EsQ0FGRDs7QUFJQSxtQkFBSywyQkFBTCxFQUFrQyxhQUFLO0FBQ3RDRCxHQUFFQyxNQUFGLENBQVMsb0JBQUssRUFBTCxDQUFUO0FBQ0EsQ0FGRDs7QUFJQSxtQkFBSyxzQ0FBTDtBQUFBLDhCQUE2QyxXQUFNRCxDQUFOLEVBQVc7QUFDdkQsTUFBTUUsU0FBUyxNQUFNLG9CQUFLLFVBQUwsQ0FBckI7QUFDQUYsSUFBRUcsSUFBRixDQUFPRCxPQUFPRSxLQUFkO0FBQ0EsRUFIRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFLQSxtQkFBSywyQ0FBTDtBQUFBLCtCQUFrRCxXQUFNSixDQUFOLEVBQVc7QUFDNUQsTUFBTUUsU0FBUyxNQUFNLG9CQUFLLFVBQUwsRUFBaUI7QUFDckMsZ0JBQWEsQ0FBQyxDQUFELEVBQUksUUFBSixFQUFjLENBQUMsS0FBRCxDQUFkO0FBRHdCLEdBQWpCLENBQXJCO0FBR0FGLElBQUVHLElBQUYsQ0FBT0QsT0FBT0UsS0FBZDtBQUNBLEVBTEQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBT0EsbUJBQUssMENBQUw7QUFBQSwrQkFBaUQsV0FBTUosQ0FBTixFQUFXO0FBQzNELE1BQU1FLFNBQVMsTUFBTSxvQkFBSyxVQUFMLEVBQWlCO0FBQ3JDLGdCQUFhLENBQUMsQ0FBRCxFQUFJLE9BQUosRUFBYSxDQUFDLEtBQUQsQ0FBYjtBQUR3QixHQUFqQixDQUFyQjtBQUdBRixJQUFFSyxLQUFGLENBQVFILE9BQU9FLEtBQWY7QUFDQSxFQUxEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU9BLG1CQUFLLDZDQUFMO0FBQUEsK0JBQW9ELFdBQU1KLENBQU4sRUFBVztBQUM5RCxNQUFNRSxTQUFTLE1BQU0sb0JBQUssNEJBQUwsRUFBbUM7QUFDdkQsaUJBQWMsQ0FBQyxDQUFELEVBQUksT0FBSjtBQUR5QyxHQUFuQyxDQUFyQjtBQUdBRixJQUFFRyxJQUFGLENBQU9ELE9BQU9FLEtBQWQ7QUFDQSxFQUxEOztBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6ImxpbnQudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgbGludCBmcm9tICcuL2xpbnQnO1xuXG50ZXN0KCd0aHJvd3Mgd2l0aG91dCBwYXJhbXMnLCB0ID0+IHtcblx0dC50aHJvd3MobGludCgpKTtcbn0pO1xuXG50ZXN0KCd0aHJvd3Mgd2l0aCBlbXB0eSBtZXNzYWdlJywgdCA9PiB7XG5cdHQudGhyb3dzKGxpbnQoJycpKTtcbn0pO1xuXG50ZXN0KCdwb3NpdGl2ZSBvbiBzdHViIG1lc3NhZ2UgYW5kIG5vIHJ1bGUnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgbGludCgnZm9vOiBiYXInKTtcblx0dC50cnVlKGFjdHVhbC52YWxpZCk7XG59KTtcblxudGVzdCgncG9zaXRpdmUgb24gc3R1YiBtZXNzYWdlIGFuZCBhZGhlcmVkIHJ1bGUnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgbGludCgnZm9vOiBiYXInLCB7XG5cdFx0J3R5cGUtZW51bSc6IFsyLCAnYWx3YXlzJywgWydmb28nXV1cblx0fSk7XG5cdHQudHJ1ZShhY3R1YWwudmFsaWQpO1xufSk7XG5cbnRlc3QoJ25lZ2F0aXZlIG9uIHN0dWIgbWVzc2FnZSBhbmQgYnJva2VuIHJ1bGUnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgbGludCgnZm9vOiBiYXInLCB7XG5cdFx0J3R5cGUtZW51bSc6IFsyLCAnbmV2ZXInLCBbJ2ZvbyddXVxuXHR9KTtcblx0dC5mYWxzZShhY3R1YWwudmFsaWQpO1xufSk7XG5cbnRlc3QoJ3Bvc2l0aXZlIG9uIGlnbm9yZWQgbWVzc2FnZSBhbmQgYnJva2VuIHJ1bGUnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgbGludCgnUmV2ZXJ0IFwic29tZSBib2d1cyBjb21taXRcIicsIHtcblx0XHQndHlwZS1lbXB0eSc6IFsyLCAnbmV2ZXInXVxuXHR9KTtcblx0dC50cnVlKGFjdHVhbC52YWxpZCk7XG59KTtcbiJdfQ==