'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _isIgnored = require('./library/is-ignored');

var _isIgnored2 = _interopRequireDefault(_isIgnored);

var _parse = require('./library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _rules = require('./rules');

var _rules2 = _interopRequireDefault(_rules);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(message) {
		var rules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var parsed, results, errors, warnings, valid;
		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						if (!(0, _isIgnored2.default)(message)) {
							_context.next = 2;
							break;
						}

						return _context.abrupt('return', {
							valid: true,
							errors: [],
							warnings: []
						});

					case 2:
						_context.next = 4;
						return (0, _parse2.default)(message);

					case 4:
						parsed = _context.sent;


						// Validate against all rules
						results = (0, _lodash.entries)(rules).filter(function (entry) {
							var _entry = (0, _slicedToArray3.default)(entry, 2),
							    _entry$ = (0, _slicedToArray3.default)(_entry[1], 1),
							    level = _entry$[0];

							return level > 0;
						}).map(function (entry) {
							var _entry2 = (0, _slicedToArray3.default)(entry, 2),
							    name = _entry2[0],
							    config = _entry2[1];

							var _config = (0, _slicedToArray3.default)(config, 3),
							    level = _config[0],
							    when = _config[1],
							    value = _config[2];

							// Level 0 rules are ignored


							if (level === 0) {
								return null;
							}

							var rule = _rules2.default[name];

							var _rule = rule(parsed, when, value),
							    _rule2 = (0, _slicedToArray3.default)(_rule, 2),
							    valid = _rule2[0],
							    message = _rule2[1];

							return {
								level,
								valid,
								name,
								message
							};
						}).filter(Boolean);
						errors = results.filter(function (result) {
							return result.level > 1 && !result.valid;
						});
						warnings = results.filter(function (result) {
							return result.level < 2 && !result.valid;
						});
						valid = errors.length === 0;
						return _context.abrupt('return', {
							valid,
							errors,
							warnings
						});

					case 10:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, undefined);
	}));

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}();

module.exports = exports['default'];