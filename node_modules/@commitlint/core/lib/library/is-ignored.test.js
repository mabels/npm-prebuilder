'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _isIgnored = require('./is-ignored');

var _isIgnored2 = _interopRequireDefault(_isIgnored);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('should return false when called without arguments', function (t) {
	t.false((0, _isIgnored2.default)());
});

(0, _ava2.default)('should return false when called with empty string', function (t) {
	t.false((0, _isIgnored2.default)(''));
});

(0, _ava2.default)('should return false for normal commit', function (t) {
	t.false((0, _isIgnored2.default)('initial commit'));
});

(0, _ava2.default)('should return false for branch merges', function (t) {
	t.true((0, _isIgnored2.default)("Merge branch 'iss53'"));
});

(0, _ava2.default)('should return true for merged PRs', function (t) {
	t.true((0, _isIgnored2.default)('Merge pull request #369'));
});

(0, _ava2.default)('should return true for revert commits', function (t) {
	t.true((0, _isIgnored2.default)(`Revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
	t.true((0, _isIgnored2.default)(`revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
});

(0, _ava2.default)('should return true for npm version commits', function (t) {
	t.true((0, _isIgnored2.default)(`0.0.1`));
	t.true((0, _isIgnored2.default)(`0.1.0`));
	t.true((0, _isIgnored2.default)(`1.0.0`));
	t.true((0, _isIgnored2.default)(`0.0.1-alpha`));
	t.true((0, _isIgnored2.default)(`0.0.1-some-crazy-tag`));
	t.true((0, _isIgnored2.default)(`0.0.1-0`));
	t.true((0, _isIgnored2.default)(`0.0.1-999`));
	t.true((0, _isIgnored2.default)(`0.0.1-alpha.0`));
	t.true((0, _isIgnored2.default)(`0.0.1-alpha.999`));
	t.true((0, _isIgnored2.default)(`0.0.1-some-crazy-tag.0`));
	t.true((0, _isIgnored2.default)(`0.0.1-some-crazy-tag.999`));
	t.true((0, _isIgnored2.default)(`0.0.1-1e69d54`));
	t.true((0, _isIgnored2.default)(`v0.0.1`));
	t.true((0, _isIgnored2.default)(` v3.0.0`));
});

(0, _ava2.default)('should return true fixup commits', function (t) {
	t.true((0, _isIgnored2.default)('fixup! initial commit'));
});

(0, _ava2.default)('should return true squash commits', function (t) {
	t.true((0, _isIgnored2.default)('squash! initial commit'));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJyYXJ5L2lzLWlnbm9yZWQudGVzdC5qcyJdLCJuYW1lcyI6WyJ0IiwiZmFsc2UiLCJ0cnVlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLG1CQUFLLG1EQUFMLEVBQTBELGFBQUs7QUFDOURBLEdBQUVDLEtBQUYsQ0FBUSwwQkFBUjtBQUNBLENBRkQ7O0FBSUEsbUJBQUssbURBQUwsRUFBMEQsYUFBSztBQUM5REQsR0FBRUMsS0FBRixDQUFRLHlCQUFVLEVBQVYsQ0FBUjtBQUNBLENBRkQ7O0FBSUEsbUJBQUssdUNBQUwsRUFBOEMsYUFBSztBQUNsREQsR0FBRUMsS0FBRixDQUFRLHlCQUFVLGdCQUFWLENBQVI7QUFDQSxDQUZEOztBQUlBLG1CQUFLLHVDQUFMLEVBQThDLGFBQUs7QUFDbERELEdBQUVFLElBQUYsQ0FBTyx5QkFBVSxzQkFBVixDQUFQO0FBQ0EsQ0FGRDs7QUFJQSxtQkFBSyxtQ0FBTCxFQUEwQyxhQUFLO0FBQzlDRixHQUFFRSxJQUFGLENBQU8seUJBQVUseUJBQVYsQ0FBUDtBQUNBLENBRkQ7O0FBSUEsbUJBQUssdUNBQUwsRUFBOEMsYUFBSztBQUNsREYsR0FBRUUsSUFBRixDQUNDLHlCQUNFLHFJQURGLENBREQ7QUFLQUYsR0FBRUUsSUFBRixDQUNDLHlCQUNFLHFJQURGLENBREQ7QUFLQSxDQVhEOztBQWFBLG1CQUFLLDRDQUFMLEVBQW1ELGFBQUs7QUFDdkRGLEdBQUVFLElBQUYsQ0FBTyx5QkFBVyxPQUFYLENBQVA7QUFDQUYsR0FBRUUsSUFBRixDQUFPLHlCQUFXLE9BQVgsQ0FBUDtBQUNBRixHQUFFRSxJQUFGLENBQU8seUJBQVcsT0FBWCxDQUFQO0FBQ0FGLEdBQUVFLElBQUYsQ0FBTyx5QkFBVyxhQUFYLENBQVA7QUFDQUYsR0FBRUUsSUFBRixDQUFPLHlCQUFXLHNCQUFYLENBQVA7QUFDQUYsR0FBRUUsSUFBRixDQUFPLHlCQUFXLFNBQVgsQ0FBUDtBQUNBRixHQUFFRSxJQUFGLENBQU8seUJBQVcsV0FBWCxDQUFQO0FBQ0FGLEdBQUVFLElBQUYsQ0FBTyx5QkFBVyxlQUFYLENBQVA7QUFDQUYsR0FBRUUsSUFBRixDQUFPLHlCQUFXLGlCQUFYLENBQVA7QUFDQUYsR0FBRUUsSUFBRixDQUFPLHlCQUFXLHdCQUFYLENBQVA7QUFDQUYsR0FBRUUsSUFBRixDQUFPLHlCQUFXLDBCQUFYLENBQVA7QUFDQUYsR0FBRUUsSUFBRixDQUFPLHlCQUFXLGVBQVgsQ0FBUDtBQUNBRixHQUFFRSxJQUFGLENBQU8seUJBQVcsUUFBWCxDQUFQO0FBQ0FGLEdBQUVFLElBQUYsQ0FBTyx5QkFBVyxTQUFYLENBQVA7QUFDQSxDQWZEOztBQWlCQSxtQkFBSyxrQ0FBTCxFQUF5QyxhQUFLO0FBQzdDRixHQUFFRSxJQUFGLENBQU8seUJBQVUsdUJBQVYsQ0FBUDtBQUNBLENBRkQ7O0FBSUEsbUJBQUssbUNBQUwsRUFBMEMsYUFBSztBQUM5Q0YsR0FBRUUsSUFBRixDQUFPLHlCQUFVLHdCQUFWLENBQVA7QUFDQSxDQUZEIiwiZmlsZSI6ImlzLWlnbm9yZWQudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgaXNJZ25vcmVkIGZyb20gJy4vaXMtaWdub3JlZCc7XG5cbnRlc3QoJ3Nob3VsZCByZXR1cm4gZmFsc2Ugd2hlbiBjYWxsZWQgd2l0aG91dCBhcmd1bWVudHMnLCB0ID0+IHtcblx0dC5mYWxzZShpc0lnbm9yZWQoKSk7XG59KTtcblxudGVzdCgnc2hvdWxkIHJldHVybiBmYWxzZSB3aGVuIGNhbGxlZCB3aXRoIGVtcHR5IHN0cmluZycsIHQgPT4ge1xuXHR0LmZhbHNlKGlzSWdub3JlZCgnJykpO1xufSk7XG5cbnRlc3QoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZm9yIG5vcm1hbCBjb21taXQnLCB0ID0+IHtcblx0dC5mYWxzZShpc0lnbm9yZWQoJ2luaXRpYWwgY29tbWl0JykpO1xufSk7XG5cbnRlc3QoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZm9yIGJyYW5jaCBtZXJnZXMnLCB0ID0+IHtcblx0dC50cnVlKGlzSWdub3JlZChcIk1lcmdlIGJyYW5jaCAnaXNzNTMnXCIpKTtcbn0pO1xuXG50ZXN0KCdzaG91bGQgcmV0dXJuIHRydWUgZm9yIG1lcmdlZCBQUnMnLCB0ID0+IHtcblx0dC50cnVlKGlzSWdub3JlZCgnTWVyZ2UgcHVsbCByZXF1ZXN0ICMzNjknKSk7XG59KTtcblxudGVzdCgnc2hvdWxkIHJldHVybiB0cnVlIGZvciByZXZlcnQgY29tbWl0cycsIHQgPT4ge1xuXHR0LnRydWUoXG5cdFx0aXNJZ25vcmVkKFxuXHRcdFx0YFJldmVydCBcImRvY3M6IGFkZCByZWNpcGUgZm9yIGxpbnRpbmcgb2YgYWxsIGNvbW1pdHMgaW4gYSBQUiAoIzM2KVwiXFxuXFxuVGhpcyByZXZlcnRzIGNvbW1pdCAxZTY5ZDU0MmMxNmMyYTMyYWNmZDEzOWUzMmVmYTA3YTQ1ZjE5MTExLmBcblx0XHQpXG5cdCk7XG5cdHQudHJ1ZShcblx0XHRpc0lnbm9yZWQoXG5cdFx0XHRgcmV2ZXJ0IFwiZG9jczogYWRkIHJlY2lwZSBmb3IgbGludGluZyBvZiBhbGwgY29tbWl0cyBpbiBhIFBSICgjMzYpXCJcXG5cXG5UaGlzIHJldmVydHMgY29tbWl0IDFlNjlkNTQyYzE2YzJhMzJhY2ZkMTM5ZTMyZWZhMDdhNDVmMTkxMTEuYFxuXHRcdClcblx0KTtcbn0pO1xuXG50ZXN0KCdzaG91bGQgcmV0dXJuIHRydWUgZm9yIG5wbSB2ZXJzaW9uIGNvbW1pdHMnLCB0ID0+IHtcblx0dC50cnVlKGlzSWdub3JlZChgMC4wLjFgKSk7XG5cdHQudHJ1ZShpc0lnbm9yZWQoYDAuMS4wYCkpO1xuXHR0LnRydWUoaXNJZ25vcmVkKGAxLjAuMGApKTtcblx0dC50cnVlKGlzSWdub3JlZChgMC4wLjEtYWxwaGFgKSk7XG5cdHQudHJ1ZShpc0lnbm9yZWQoYDAuMC4xLXNvbWUtY3JhenktdGFnYCkpO1xuXHR0LnRydWUoaXNJZ25vcmVkKGAwLjAuMS0wYCkpO1xuXHR0LnRydWUoaXNJZ25vcmVkKGAwLjAuMS05OTlgKSk7XG5cdHQudHJ1ZShpc0lnbm9yZWQoYDAuMC4xLWFscGhhLjBgKSk7XG5cdHQudHJ1ZShpc0lnbm9yZWQoYDAuMC4xLWFscGhhLjk5OWApKTtcblx0dC50cnVlKGlzSWdub3JlZChgMC4wLjEtc29tZS1jcmF6eS10YWcuMGApKTtcblx0dC50cnVlKGlzSWdub3JlZChgMC4wLjEtc29tZS1jcmF6eS10YWcuOTk5YCkpO1xuXHR0LnRydWUoaXNJZ25vcmVkKGAwLjAuMS0xZTY5ZDU0YCkpO1xuXHR0LnRydWUoaXNJZ25vcmVkKGB2MC4wLjFgKSk7XG5cdHQudHJ1ZShpc0lnbm9yZWQoYCB2My4wLjBgKSk7XG59KTtcblxudGVzdCgnc2hvdWxkIHJldHVybiB0cnVlIGZpeHVwIGNvbW1pdHMnLCB0ID0+IHtcblx0dC50cnVlKGlzSWdub3JlZCgnZml4dXAhIGluaXRpYWwgY29tbWl0JykpO1xufSk7XG5cbnRlc3QoJ3Nob3VsZCByZXR1cm4gdHJ1ZSBzcXVhc2ggY29tbWl0cycsIHQgPT4ge1xuXHR0LnRydWUoaXNJZ25vcmVkKCdzcXVhc2ghIGluaXRpYWwgY29tbWl0JykpO1xufSk7XG4iXX0=