'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _ensureTense = require('./ensure-tense');

var _ensureTense2 = _interopRequireDefault(_ensureTense);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('true for empty', function (t) {
	var actual = (0, _ensureTense2.default)('', []);
	t.is(actual.matches, true);
});

_ava2.default.failing('true for past-tense against past-tense', function (t) {
	var actual = (0, _ensureTense2.default)('implemented', ['past-tense']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('true for present-imperative against present-imperative', function (t) {
	var actual = (0, _ensureTense2.default)('implement', ['present-imperative']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('true for present-participle against present-participle', function (t) {
	var actual = (0, _ensureTense2.default)('implementing', ['present-participle']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('true for present-third-person against present-third-person', function (t) {
	var actual = (0, _ensureTense2.default)('implements', ['present-third-person']);
	t.is(actual.matches, true);
});

(0, _ava2.default)('false for past-tense against present-third-person', function (t) {
	var actual = (0, _ensureTense2.default)('implemented', ['present-third-person']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implemented', tense: 'present-imperative' }]);
});

_ava2.default.failing('false for present-imperative against past-tense', function (t) {
	var actual = (0, _ensureTense2.default)('implement', ['past-tense']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implement', tense: 'present-imperative' }]);
});

(0, _ava2.default)('false for present-participle against present-third-person', function (t) {
	var actual = (0, _ensureTense2.default)('implementing', ['present-third-person']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implementing', tense: 'present-participle' }]);
});

_ava2.default.failing('false for present-third-person against past-tense', function (t) {
	var actual = (0, _ensureTense2.default)('implements', ['past-tense']);
	t.is(actual.matches, false);
	t.deepEqual(actual.offending, [{ lemma: 'implements', tense: 'present-third-person' }]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJyYXJ5L2Vuc3VyZS10ZW5zZS50ZXN0LmpzIl0sIm5hbWVzIjpbImFjdHVhbCIsInQiLCJpcyIsIm1hdGNoZXMiLCJmYWlsaW5nIiwiZGVlcEVxdWFsIiwib2ZmZW5kaW5nIiwibGVtbWEiLCJ0ZW5zZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFQSxtQkFBSyxnQkFBTCxFQUF1QixhQUFLO0FBQzNCLEtBQU1BLFNBQVMsMkJBQU8sRUFBUCxFQUFXLEVBQVgsQ0FBZjtBQUNBQyxHQUFFQyxFQUFGLENBQUtGLE9BQU9HLE9BQVosRUFBcUIsSUFBckI7QUFDQSxDQUhEOztBQUtBLGNBQUtDLE9BQUwsQ0FBYSx3Q0FBYixFQUF1RCxhQUFLO0FBQzNELEtBQU1KLFNBQVMsMkJBQU8sYUFBUCxFQUFzQixDQUFDLFlBQUQsQ0FBdEIsQ0FBZjtBQUNBQyxHQUFFQyxFQUFGLENBQUtGLE9BQU9HLE9BQVosRUFBcUIsSUFBckI7QUFDQSxDQUhEOztBQUtBLG1CQUFLLHdEQUFMLEVBQStELGFBQUs7QUFDbkUsS0FBTUgsU0FBUywyQkFBTyxXQUFQLEVBQW9CLENBQUMsb0JBQUQsQ0FBcEIsQ0FBZjtBQUNBQyxHQUFFQyxFQUFGLENBQUtGLE9BQU9HLE9BQVosRUFBcUIsSUFBckI7QUFDQSxDQUhEOztBQUtBLG1CQUFLLHdEQUFMLEVBQStELGFBQUs7QUFDbkUsS0FBTUgsU0FBUywyQkFBTyxjQUFQLEVBQXVCLENBQUMsb0JBQUQsQ0FBdkIsQ0FBZjtBQUNBQyxHQUFFQyxFQUFGLENBQUtGLE9BQU9HLE9BQVosRUFBcUIsSUFBckI7QUFDQSxDQUhEOztBQUtBLG1CQUFLLDREQUFMLEVBQW1FLGFBQUs7QUFDdkUsS0FBTUgsU0FBUywyQkFBTyxZQUFQLEVBQXFCLENBQUMsc0JBQUQsQ0FBckIsQ0FBZjtBQUNBQyxHQUFFQyxFQUFGLENBQUtGLE9BQU9HLE9BQVosRUFBcUIsSUFBckI7QUFDQSxDQUhEOztBQUtBLG1CQUFLLG1EQUFMLEVBQTBELGFBQUs7QUFDOUQsS0FBTUgsU0FBUywyQkFBTyxhQUFQLEVBQXNCLENBQUMsc0JBQUQsQ0FBdEIsQ0FBZjtBQUNBQyxHQUFFQyxFQUFGLENBQUtGLE9BQU9HLE9BQVosRUFBcUIsS0FBckI7QUFDQUYsR0FBRUksU0FBRixDQUFZTCxPQUFPTSxTQUFuQixFQUE4QixDQUM3QixFQUFDQyxPQUFPLGFBQVIsRUFBdUJDLE9BQU8sb0JBQTlCLEVBRDZCLENBQTlCO0FBR0EsQ0FORDs7QUFRQSxjQUFLSixPQUFMLENBQWEsaURBQWIsRUFBZ0UsYUFBSztBQUNwRSxLQUFNSixTQUFTLDJCQUFPLFdBQVAsRUFBb0IsQ0FBQyxZQUFELENBQXBCLENBQWY7QUFDQUMsR0FBRUMsRUFBRixDQUFLRixPQUFPRyxPQUFaLEVBQXFCLEtBQXJCO0FBQ0FGLEdBQUVJLFNBQUYsQ0FBWUwsT0FBT00sU0FBbkIsRUFBOEIsQ0FDN0IsRUFBQ0MsT0FBTyxXQUFSLEVBQXFCQyxPQUFPLG9CQUE1QixFQUQ2QixDQUE5QjtBQUdBLENBTkQ7O0FBUUEsbUJBQUssMkRBQUwsRUFBa0UsYUFBSztBQUN0RSxLQUFNUixTQUFTLDJCQUFPLGNBQVAsRUFBdUIsQ0FBQyxzQkFBRCxDQUF2QixDQUFmO0FBQ0FDLEdBQUVDLEVBQUYsQ0FBS0YsT0FBT0csT0FBWixFQUFxQixLQUFyQjtBQUNBRixHQUFFSSxTQUFGLENBQVlMLE9BQU9NLFNBQW5CLEVBQThCLENBQzdCLEVBQUNDLE9BQU8sY0FBUixFQUF3QkMsT0FBTyxvQkFBL0IsRUFENkIsQ0FBOUI7QUFHQSxDQU5EOztBQVFBLGNBQUtKLE9BQUwsQ0FBYSxtREFBYixFQUFrRSxhQUFLO0FBQ3RFLEtBQU1KLFNBQVMsMkJBQU8sWUFBUCxFQUFxQixDQUFDLFlBQUQsQ0FBckIsQ0FBZjtBQUNBQyxHQUFFQyxFQUFGLENBQUtGLE9BQU9HLE9BQVosRUFBcUIsS0FBckI7QUFDQUYsR0FBRUksU0FBRixDQUFZTCxPQUFPTSxTQUFuQixFQUE4QixDQUM3QixFQUFDQyxPQUFPLFlBQVIsRUFBc0JDLE9BQU8sc0JBQTdCLEVBRDZCLENBQTlCO0FBR0EsQ0FORCIsImZpbGUiOiJlbnN1cmUtdGVuc2UudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgZW5zdXJlIGZyb20gJy4vZW5zdXJlLXRlbnNlJztcblxudGVzdCgndHJ1ZSBmb3IgZW1wdHknLCB0ID0+IHtcblx0Y29uc3QgYWN0dWFsID0gZW5zdXJlKCcnLCBbXSk7XG5cdHQuaXMoYWN0dWFsLm1hdGNoZXMsIHRydWUpO1xufSk7XG5cbnRlc3QuZmFpbGluZygndHJ1ZSBmb3IgcGFzdC10ZW5zZSBhZ2FpbnN0IHBhc3QtdGVuc2UnLCB0ID0+IHtcblx0Y29uc3QgYWN0dWFsID0gZW5zdXJlKCdpbXBsZW1lbnRlZCcsIFsncGFzdC10ZW5zZSddKTtcblx0dC5pcyhhY3R1YWwubWF0Y2hlcywgdHJ1ZSk7XG59KTtcblxudGVzdCgndHJ1ZSBmb3IgcHJlc2VudC1pbXBlcmF0aXZlIGFnYWluc3QgcHJlc2VudC1pbXBlcmF0aXZlJywgdCA9PiB7XG5cdGNvbnN0IGFjdHVhbCA9IGVuc3VyZSgnaW1wbGVtZW50JywgWydwcmVzZW50LWltcGVyYXRpdmUnXSk7XG5cdHQuaXMoYWN0dWFsLm1hdGNoZXMsIHRydWUpO1xufSk7XG5cbnRlc3QoJ3RydWUgZm9yIHByZXNlbnQtcGFydGljaXBsZSBhZ2FpbnN0IHByZXNlbnQtcGFydGljaXBsZScsIHQgPT4ge1xuXHRjb25zdCBhY3R1YWwgPSBlbnN1cmUoJ2ltcGxlbWVudGluZycsIFsncHJlc2VudC1wYXJ0aWNpcGxlJ10pO1xuXHR0LmlzKGFjdHVhbC5tYXRjaGVzLCB0cnVlKTtcbn0pO1xuXG50ZXN0KCd0cnVlIGZvciBwcmVzZW50LXRoaXJkLXBlcnNvbiBhZ2FpbnN0IHByZXNlbnQtdGhpcmQtcGVyc29uJywgdCA9PiB7XG5cdGNvbnN0IGFjdHVhbCA9IGVuc3VyZSgnaW1wbGVtZW50cycsIFsncHJlc2VudC10aGlyZC1wZXJzb24nXSk7XG5cdHQuaXMoYWN0dWFsLm1hdGNoZXMsIHRydWUpO1xufSk7XG5cbnRlc3QoJ2ZhbHNlIGZvciBwYXN0LXRlbnNlIGFnYWluc3QgcHJlc2VudC10aGlyZC1wZXJzb24nLCB0ID0+IHtcblx0Y29uc3QgYWN0dWFsID0gZW5zdXJlKCdpbXBsZW1lbnRlZCcsIFsncHJlc2VudC10aGlyZC1wZXJzb24nXSk7XG5cdHQuaXMoYWN0dWFsLm1hdGNoZXMsIGZhbHNlKTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLm9mZmVuZGluZywgW1xuXHRcdHtsZW1tYTogJ2ltcGxlbWVudGVkJywgdGVuc2U6ICdwcmVzZW50LWltcGVyYXRpdmUnfVxuXHRdKTtcbn0pO1xuXG50ZXN0LmZhaWxpbmcoJ2ZhbHNlIGZvciBwcmVzZW50LWltcGVyYXRpdmUgYWdhaW5zdCBwYXN0LXRlbnNlJywgdCA9PiB7XG5cdGNvbnN0IGFjdHVhbCA9IGVuc3VyZSgnaW1wbGVtZW50JywgWydwYXN0LXRlbnNlJ10pO1xuXHR0LmlzKGFjdHVhbC5tYXRjaGVzLCBmYWxzZSk7XG5cdHQuZGVlcEVxdWFsKGFjdHVhbC5vZmZlbmRpbmcsIFtcblx0XHR7bGVtbWE6ICdpbXBsZW1lbnQnLCB0ZW5zZTogJ3ByZXNlbnQtaW1wZXJhdGl2ZSd9XG5cdF0pO1xufSk7XG5cbnRlc3QoJ2ZhbHNlIGZvciBwcmVzZW50LXBhcnRpY2lwbGUgYWdhaW5zdCBwcmVzZW50LXRoaXJkLXBlcnNvbicsIHQgPT4ge1xuXHRjb25zdCBhY3R1YWwgPSBlbnN1cmUoJ2ltcGxlbWVudGluZycsIFsncHJlc2VudC10aGlyZC1wZXJzb24nXSk7XG5cdHQuaXMoYWN0dWFsLm1hdGNoZXMsIGZhbHNlKTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLm9mZmVuZGluZywgW1xuXHRcdHtsZW1tYTogJ2ltcGxlbWVudGluZycsIHRlbnNlOiAncHJlc2VudC1wYXJ0aWNpcGxlJ31cblx0XSk7XG59KTtcblxudGVzdC5mYWlsaW5nKCdmYWxzZSBmb3IgcHJlc2VudC10aGlyZC1wZXJzb24gYWdhaW5zdCBwYXN0LXRlbnNlJywgdCA9PiB7XG5cdGNvbnN0IGFjdHVhbCA9IGVuc3VyZSgnaW1wbGVtZW50cycsIFsncGFzdC10ZW5zZSddKTtcblx0dC5pcyhhY3R1YWwubWF0Y2hlcywgZmFsc2UpO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwub2ZmZW5kaW5nLCBbXG5cdFx0e2xlbW1hOiAnaW1wbGVtZW50cycsIHRlbnNlOiAncHJlc2VudC10aGlyZC1wZXJzb24nfVxuXHRdKTtcbn0pO1xuIl19