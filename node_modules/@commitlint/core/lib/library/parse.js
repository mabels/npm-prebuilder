'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var parse = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(message) {
		var parser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _conventionalCommitsParser.sync;

		var _error, opts, _ref2, parserOpts, parsed;

		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						// Prevent conventional-changelog-angular from spamming startup
						// TODO: Remove when https://github.com/conventional-changelog/conventional-changelog/pull/206 lands
						_error = console.error;

						console.error = function () {};
						opts = require('conventional-changelog-angular');

						console.error = _error;

						_context.next = 6;
						return opts;

					case 6:
						_ref2 = _context.sent;
						parserOpts = _ref2.parserOpts;
						parsed = parser(message, parserOpts);

						parsed.raw = message;
						return _context.abrupt('return', parsed);

					case 11:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this);
	}));

	return function parse(_x) {
		return _ref.apply(this, arguments);
	};
}();

var _conventionalCommitsParser = require('conventional-commits-parser');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = parse;
module.exports = exports['default'];