{"version":3,"sources":["../../src/library/ensure-tense.js"],"names":["lexer","tagger","tenses","getLemmata","input","lex","err","getTags","lemmata","tag","allowed","options","tagged","verbs","filter","tags","reduce","registry","name","offending","verb","length","indexOf","word","ignored","some","Boolean","map","lemma","tense","item","matches"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,QAAQ,gBAAd;AACA,IAAMC,SAAS,iBAAf;;AAEA,IAAMC,SAAS;AACd,eAAc,CAAC,IAAD,EAAO,KAAP,CADA;AAEd,uBAAsB,CAAC,IAAD,EAAO,KAAP,EAAc,KAAd,CAFR;AAGd,uBAAsB,CAAC,IAAD,EAAO,KAAP,CAHR;AAId,yBAAwB,CAAC,IAAD,EAAO,KAAP;AAJV,CAAf;;AAOA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAC1B,KAAI;AACH,SAAOJ,MAAMK,GAAN,CAAUD,KAAV,CAAP;AACA,EAFD,CAEE,OAAOE,GAAP,EAAY;AACb,SAAO,EAAP;AACA;AACD;;AAED,SAASC,OAAT,CAAiBC,OAAjB,EAA0B;AACzB,KAAI;AACH,SAAOP,OAAOQ,GAAP,CAAWD,OAAX,CAAP;AACA,EAFD,CAEE,OAAOF,GAAP,EAAY;AACb,SAAO,EAAP;AACA;AACD;;kBAEc,UAACF,KAAD,EAAQM,OAAR,EAAkC;AAAA,KAAjBC,OAAiB,uEAAP,EAAO;;AAChD,KAAMH,UAAUL,WAAWC,KAAX,CAAhB;AACA,KAAMQ,SAASL,QAAQC,OAAR,CAAf;AACA,KAAMK,QAAQD,OAAOE,MAAP,CAAc;AAAA,SAAOL,IAAI,CAAJ,EAAO,CAAP,MAAc,GAArB;AAAA,EAAd,CAAd;AACA,KAAMM,OAAOL,QAAQM,MAAR,CAAe,UAACC,QAAD,EAAWC,IAAX,EAAoB;AAC/C,oDAAWD,QAAX,oCAAyBf,OAAOgB,IAAP,KAAgB,EAAzC;AACA,EAFY,EAEV,EAFU,CAAb;;AAIA,KAAMC,YAAYN,MAChBC,MADgB,CACT,gBAAQ;AAAA,2CACCM,IADD;AAAA,MACNX,GADM;;AAEf,SAAOM,KAAKM,MAAL,GAAc,CAAd,IAAmBN,KAAKO,OAAL,CAAab,GAAb,MAAsB,CAAC,CAAjD;AACA,EAJgB,EAKhBK,MALgB,CAKT,gBAAQ;AAAA,4CACAM,IADA;AAAA,MACRG,IADQ;;AAEf,SAAO,CAAC,CAACZ,QAAQa,OAAR,IAAmB,EAApB,EACNC,IADM,CACD;AAAA,UAAWD,QAAQF,OAAR,CAAgBC,IAAhB,IAAwB,CAAC,CAApC;AAAA,GADC,CAAR;AAEA,EATgB,EAUhBT,MAVgB,CAUTY,OAVS,EAWhBC,GAXgB,CAWZ,gBAAQ;AAAA,4CACSP,IADT;AAAA,MACLQ,KADK;AAAA,MACEnB,GADF;;AAEZ,MAAMoB,QAAQ,qBAAQ3B,MAAR,EACZY,MADY,CACL,gBAAQ;AAAA,4CACEgB,IADF;AAAA,OACNf,IADM;;AAEf,UAAOA,KAAKO,OAAL,CAAab,GAAb,IAAoB,CAAC,CAA5B;AACA,GAJY,EAKZkB,GALY,CAKR;AAAA,UAAQG,KAAK,CAAL,CAAR;AAAA,GALQ,EAKS,CALT,CAAd;;AAOA,SAAO;AACNF,QADM;AAENC;AAFM,GAAP;AAIA,EAxBgB,CAAlB;;AA0BA,QAAO;AACNE,WAASZ,UAAUE,MAAV,KAAqB,CADxB;AAENF;AAFM,EAAP;AAIA,C","file":"ensure-tense.js","sourcesContent":["import {Lexer, Tagger} from 'pos';\nimport {entries} from 'lodash';\n\nconst lexer = new Lexer();\nconst tagger = new Tagger();\n\nconst tenses = {\n\t'past-tense': ['VB', 'VBD'],\n\t'present-imperative': ['VB', 'VBN', 'VBP'],\n\t'present-participle': ['VB', 'VBG'],\n\t'present-third-person': ['VB', 'VBZ']\n};\n\nfunction getLemmata(input) {\n\ttry {\n\t\treturn lexer.lex(input);\n\t} catch (err) {\n\t\treturn [];\n\t}\n}\n\nfunction getTags(lemmata) {\n\ttry {\n\t\treturn tagger.tag(lemmata);\n\t} catch (err) {\n\t\treturn [];\n\t}\n}\n\nexport default (input, allowed, options = {}) => {\n\tconst lemmata = getLemmata(input);\n\tconst tagged = getTags(lemmata);\n\tconst verbs = tagged.filter(tag => tag[1][0] === 'V');\n\tconst tags = allowed.reduce((registry, name) => {\n\t\treturn [...registry, ...(tenses[name] || [])];\n\t}, []);\n\n\tconst offending = verbs\n\t\t.filter(verb => {\n\t\t\tconst [, tag] = verb;\n\t\t\treturn tags.length > 0 && tags.indexOf(tag) === -1;\n\t\t})\n\t\t.filter(verb => {\n\t\t\tconst [word] = verb;\n\t\t\treturn !(options.ignored || [])\n\t\t\t\t.some(ignored => ignored.indexOf(word) > -1);\n\t\t})\n\t\t.filter(Boolean)\n\t\t.map(verb => {\n\t\t\tconst [lemma, tag] = verb;\n\t\t\tconst tense = entries(tenses)\n\t\t\t\t.filter(item => {\n\t\t\t\t\tconst [, tags] = item;\n\t\t\t\t\treturn tags.indexOf(tag) > -1;\n\t\t\t\t})\n\t\t\t\t.map(item => item[0])[0];\n\n\t\t\treturn {\n\t\t\t\tlemma,\n\t\t\t\ttense\n\t\t\t};\n\t\t});\n\n\treturn {\n\t\tmatches: offending.length === 0,\n\t\toffending\n\t};\n};\n"]}