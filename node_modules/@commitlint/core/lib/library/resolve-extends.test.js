'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _resolveExtends = require('./resolve-extends');

var _resolveExtends2 = _interopRequireDefault(_resolveExtends);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = function id(_id) {
	return _id;
};

(0, _ava2.default)('returns empty object when called without params', function (t) {
	var actual = (0, _resolveExtends2.default)();
	t.deepEqual(actual, {});
});

(0, _ava2.default)('returns an equivalent object as passed in', function (t) {
	var expected = { foo: 'bar' };
	var actual = (0, _resolveExtends2.default)(expected);
	t.deepEqual(actual, expected);
});

(0, _ava2.default)('uses empty prefix by default', function (t) {
	var input = { extends: ['extender-name'] };

	(0, _resolveExtends2.default)(input, {
		resolve: id,
		require(id) {
			t.is(id, 'extender-name');
		}
	});
});

(0, _ava2.default)('uses prefix as configured', function (t) {
	var input = { extends: ['extender-name'] };

	(0, _resolveExtends2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			t.is(id, 'prefix-extender-name');
		}
	});
});

(0, _ava2.default)('ignores prefix for scoped extends', function (t) {
	var input = { extends: ['@scope/extender-name'] };

	(0, _resolveExtends2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			t.is(id, '@scope/extender-name');
		}
	});
});

(0, _ava2.default)('ignores prefix for relative extends', function (t) {
	var input = { extends: ['./extender'] };

	(0, _resolveExtends2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			t.is(id, './extender');
		}
	});
});

(0, _ava2.default)('propagates return value of require function', function (t) {
	var input = { extends: ['extender-name'] };
	var propagated = { foo: 'bar' };

	var actual = (0, _resolveExtends2.default)(input, {
		resolve: id,
		require() {
			return propagated;
		}
	});

	t.is(actual.foo, 'bar');
});

(0, _ava2.default)('resolves extends recursively', function (t) {
	var input = { extends: ['extender-name'] };
	var actual = [];

	(0, _resolveExtends2.default)(input, {
		resolve: id,
		require(id) {
			actual.push(id);
			if (id === 'extender-name') {
				return { extends: ['recursive-extender-name'] };
			}
			if (id === 'recursive-extender-name') {
				return { foo: 'bar' };
			}
		}
	});

	t.deepEqual(actual, ['extender-name', 'recursive-extender-name']);
});

(0, _ava2.default)('uses prefix key recursively', function (t) {
	var input = { extends: ['extender-name'] };
	var actual = [];

	(0, _resolveExtends2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			actual.push(id);
			if (id === 'prefix-extender-name') {
				return { extends: ['recursive-extender-name'] };
			}
			if (id === 'prefix-recursive-extender-name') {
				return { foo: 'bar' };
			}
		}
	});

	t.deepEqual(actual, ['prefix-extender-name', 'prefix-recursive-extender-name']);
});

(0, _ava2.default)('propagates contents recursively', function (t) {
	var input = { extends: ['extender-name'] };

	var actual = (0, _resolveExtends2.default)(input, {
		resolve: id,
		require(id) {
			if (id === 'extender-name') {
				return { extends: ['recursive-extender-name'], foo: 'bar' };
			}
			if (id === 'recursive-extender-name') {
				return { baz: 'bar' };
			}
		}
	});

	var expected = {
		extends: ['extender-name'],
		foo: 'bar',
		baz: 'bar'
	};

	t.deepEqual(actual, expected);
});

(0, _ava2.default)('extending contents should take precedence', function (t) {
	var input = { extends: ['extender-name'], zero: 'root' };

	var actual = (0, _resolveExtends2.default)(input, {
		resolve: id,
		require(id) {
			if (id === 'extender-name') {
				return { extends: ['recursive-extender-name'], zero: id, one: id };
			}
			if (id === 'recursive-extender-name') {
				return {
					extends: ['second-recursive-extender-name'],
					zero: id,
					one: id,
					two: id
				};
			}
			if (id === 'second-recursive-extender-name') {
				return { zero: id, one: id, two: id, three: id };
			}
		}
	});

	var expected = {
		extends: ['extender-name'],
		zero: 'root',
		one: 'extender-name',
		two: 'recursive-extender-name',
		three: 'second-recursive-extender-name'
	};

	t.deepEqual(actual, expected);
});

(0, _ava2.default)('should fall back to conventional-changelog-lint-config prefix', function (t) {
	var input = { extends: ['extender-name'] };

	var actual = (0, _resolveExtends2.default)(input, {
		prefix: 'prefix',
		resolve(id) {
			if (id === 'conventional-changelog-lint-config-extender-name') {
				return 'conventional-changelog-lint-config-extender-name';
			}
			throw new Error(`Could not find module "*${id}"`);
		},
		require(id) {
			if (id === 'conventional-changelog-lint-config-extender-name') {
				return {
					rules: {
						fallback: true
					}
				};
			}
		}
	});

	t.deepEqual(actual, {
		extends: ['extender-name'],
		rules: {
			fallback: true
		}
	});
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,