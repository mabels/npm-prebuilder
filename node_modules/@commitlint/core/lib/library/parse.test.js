'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

(0, _ava2.default)('throws when called without params', function (t) {
	t.throws((0, _parse2.default)(), /Expected a raw commit/);
});

(0, _ava2.default)('throws when called with empty message', function (t) {
	t.throws((0, _parse2.default)(''), /Expected a raw commit/);
});

(0, _ava2.default)('returns object with raw message', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var message = 'type(scope): subject';
		var actual = yield (0, _parse2.default)(message);
		t.is(actual.raw, message);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('calls parser with message and passed options', function (t) {
	var message = 'message';

	(0, _parse2.default)(message, function (m) {
		t.is(message, m);
		return {};
	});
});

(0, _ava2.default)('passes object up from parser function', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var message = 'message';
		var result = {};
		var actual = yield (0, _parse2.default)(message, function () {
			return result;
		});
		t.is(actual, result);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('returns object with expected keys', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var message = 'message';
		var actual = yield (0, _parse2.default)(message);
		var expected = {
			body: null,
			footer: null,
			header: 'message',
			mentions: [],
			merge: null,
			notes: [],
			raw: 'message',
			references: [],
			revert: null,
			scope: null,
			subject: null,
			type: null
		};
		t.deepEqual(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('uses angular grammar', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var message = 'type(scope): subject';
		var actual = yield (0, _parse2.default)(message);
		var expected = {
			body: null,
			footer: null,
			header: 'type(scope): subject',
			mentions: [],
			merge: null,
			notes: [],
			raw: 'type(scope): subject',
			references: [],
			revert: null,
			scope: 'scope',
			subject: 'subject',
			type: 'type'
		};
		t.deepEqual(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('supports scopes with /', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var message = 'type(some/scope): subject';
		var actual = yield (0, _parse2.default)(message);
		t.is(actual.scope, 'some/scope');
		t.is(actual.subject, 'subject');
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWJyYXJ5L3BhcnNlLnRlc3QuanMiXSwibmFtZXMiOlsidCIsInRocm93cyIsIm1lc3NhZ2UiLCJhY3R1YWwiLCJpcyIsInJhdyIsIm0iLCJyZXN1bHQiLCJleHBlY3RlZCIsImJvZHkiLCJmb290ZXIiLCJoZWFkZXIiLCJtZW50aW9ucyIsIm1lcmdlIiwibm90ZXMiLCJyZWZlcmVuY2VzIiwicmV2ZXJ0Iiwic2NvcGUiLCJzdWJqZWN0IiwidHlwZSIsImRlZXBFcXVhbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7Ozs7OztBQUVBLG1CQUFLLG1DQUFMLEVBQTBDLGFBQUs7QUFDOUNBLEdBQUVDLE1BQUYsQ0FBUyxzQkFBVCxFQUFrQix1QkFBbEI7QUFDQSxDQUZEOztBQUlBLG1CQUFLLHVDQUFMLEVBQThDLGFBQUs7QUFDbERELEdBQUVDLE1BQUYsQ0FBUyxxQkFBTSxFQUFOLENBQVQsRUFBb0IsdUJBQXBCO0FBQ0EsQ0FGRDs7QUFJQSxtQkFBSyxpQ0FBTDtBQUFBLDhCQUF3QyxXQUFNRCxDQUFOLEVBQVc7QUFDbEQsTUFBTUUsVUFBVSxzQkFBaEI7QUFDQSxNQUFNQyxTQUFTLE1BQU0scUJBQU1ELE9BQU4sQ0FBckI7QUFDQUYsSUFBRUksRUFBRixDQUFLRCxPQUFPRSxHQUFaLEVBQWlCSCxPQUFqQjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssOENBQUwsRUFBcUQsYUFBSztBQUN6RCxLQUFNQSxVQUFVLFNBQWhCOztBQUVBLHNCQUFNQSxPQUFOLEVBQWUsYUFBSztBQUNuQkYsSUFBRUksRUFBRixDQUFLRixPQUFMLEVBQWNJLENBQWQ7QUFDQSxTQUFPLEVBQVA7QUFDQSxFQUhEO0FBSUEsQ0FQRDs7QUFTQSxtQkFBSyx1Q0FBTDtBQUFBLCtCQUE4QyxXQUFNTixDQUFOLEVBQVc7QUFDeEQsTUFBTUUsVUFBVSxTQUFoQjtBQUNBLE1BQU1LLFNBQVMsRUFBZjtBQUNBLE1BQU1KLFNBQVMsTUFBTSxxQkFBTUQsT0FBTixFQUFlO0FBQUEsVUFBTUssTUFBTjtBQUFBLEdBQWYsQ0FBckI7QUFDQVAsSUFBRUksRUFBRixDQUFLRCxNQUFMLEVBQWFJLE1BQWI7QUFDQSxFQUxEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU9BLG1CQUFLLG1DQUFMO0FBQUEsK0JBQTBDLFdBQU1QLENBQU4sRUFBVztBQUNwRCxNQUFNRSxVQUFVLFNBQWhCO0FBQ0EsTUFBTUMsU0FBUyxNQUFNLHFCQUFNRCxPQUFOLENBQXJCO0FBQ0EsTUFBTU0sV0FBVztBQUNoQkMsU0FBTSxJQURVO0FBRWhCQyxXQUFRLElBRlE7QUFHaEJDLFdBQVEsU0FIUTtBQUloQkMsYUFBVSxFQUpNO0FBS2hCQyxVQUFPLElBTFM7QUFNaEJDLFVBQU8sRUFOUztBQU9oQlQsUUFBSyxTQVBXO0FBUWhCVSxlQUFZLEVBUkk7QUFTaEJDLFdBQVEsSUFUUTtBQVVoQkMsVUFBTyxJQVZTO0FBV2hCQyxZQUFTLElBWE87QUFZaEJDLFNBQU07QUFaVSxHQUFqQjtBQWNBbkIsSUFBRW9CLFNBQUYsQ0FBWWpCLE1BQVosRUFBb0JLLFFBQXBCO0FBQ0EsRUFsQkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBb0JBLG1CQUFLLHNCQUFMO0FBQUEsK0JBQTZCLFdBQU1SLENBQU4sRUFBVztBQUN2QyxNQUFNRSxVQUFVLHNCQUFoQjtBQUNBLE1BQU1DLFNBQVMsTUFBTSxxQkFBTUQsT0FBTixDQUFyQjtBQUNBLE1BQU1NLFdBQVc7QUFDaEJDLFNBQU0sSUFEVTtBQUVoQkMsV0FBUSxJQUZRO0FBR2hCQyxXQUFRLHNCQUhRO0FBSWhCQyxhQUFVLEVBSk07QUFLaEJDLFVBQU8sSUFMUztBQU1oQkMsVUFBTyxFQU5TO0FBT2hCVCxRQUFLLHNCQVBXO0FBUWhCVSxlQUFZLEVBUkk7QUFTaEJDLFdBQVEsSUFUUTtBQVVoQkMsVUFBTyxPQVZTO0FBV2hCQyxZQUFTLFNBWE87QUFZaEJDLFNBQU07QUFaVSxHQUFqQjtBQWNBbkIsSUFBRW9CLFNBQUYsQ0FBWWpCLE1BQVosRUFBb0JLLFFBQXBCO0FBQ0EsRUFsQkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBb0JBLG1CQUFLLHdCQUFMO0FBQUEsK0JBQStCLFdBQU1SLENBQU4sRUFBVztBQUN6QyxNQUFNRSxVQUFVLDJCQUFoQjtBQUNBLE1BQU1DLFNBQVMsTUFBTSxxQkFBTUQsT0FBTixDQUFyQjtBQUNBRixJQUFFSSxFQUFGLENBQUtELE9BQU9jLEtBQVosRUFBbUIsWUFBbkI7QUFDQWpCLElBQUVJLEVBQUYsQ0FBS0QsT0FBT2UsT0FBWixFQUFxQixTQUFyQjtBQUNBLEVBTEQ7O0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoicGFyc2UudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZSc7XG5cbnRlc3QoJ3Rocm93cyB3aGVuIGNhbGxlZCB3aXRob3V0IHBhcmFtcycsIHQgPT4ge1xuXHR0LnRocm93cyhwYXJzZSgpLCAvRXhwZWN0ZWQgYSByYXcgY29tbWl0Lyk7XG59KTtcblxudGVzdCgndGhyb3dzIHdoZW4gY2FsbGVkIHdpdGggZW1wdHkgbWVzc2FnZScsIHQgPT4ge1xuXHR0LnRocm93cyhwYXJzZSgnJyksIC9FeHBlY3RlZCBhIHJhdyBjb21taXQvKTtcbn0pO1xuXG50ZXN0KCdyZXR1cm5zIG9iamVjdCB3aXRoIHJhdyBtZXNzYWdlJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IG1lc3NhZ2UgPSAndHlwZShzY29wZSk6IHN1YmplY3QnO1xuXHRjb25zdCBhY3R1YWwgPSBhd2FpdCBwYXJzZShtZXNzYWdlKTtcblx0dC5pcyhhY3R1YWwucmF3LCBtZXNzYWdlKTtcbn0pO1xuXG50ZXN0KCdjYWxscyBwYXJzZXIgd2l0aCBtZXNzYWdlIGFuZCBwYXNzZWQgb3B0aW9ucycsIHQgPT4ge1xuXHRjb25zdCBtZXNzYWdlID0gJ21lc3NhZ2UnO1xuXG5cdHBhcnNlKG1lc3NhZ2UsIG0gPT4ge1xuXHRcdHQuaXMobWVzc2FnZSwgbSk7XG5cdFx0cmV0dXJuIHt9O1xuXHR9KTtcbn0pO1xuXG50ZXN0KCdwYXNzZXMgb2JqZWN0IHVwIGZyb20gcGFyc2VyIGZ1bmN0aW9uJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IG1lc3NhZ2UgPSAnbWVzc2FnZSc7XG5cdGNvbnN0IHJlc3VsdCA9IHt9O1xuXHRjb25zdCBhY3R1YWwgPSBhd2FpdCBwYXJzZShtZXNzYWdlLCAoKSA9PiByZXN1bHQpO1xuXHR0LmlzKGFjdHVhbCwgcmVzdWx0KTtcbn0pO1xuXG50ZXN0KCdyZXR1cm5zIG9iamVjdCB3aXRoIGV4cGVjdGVkIGtleXMnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgbWVzc2FnZSA9ICdtZXNzYWdlJztcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgcGFyc2UobWVzc2FnZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0ge1xuXHRcdGJvZHk6IG51bGwsXG5cdFx0Zm9vdGVyOiBudWxsLFxuXHRcdGhlYWRlcjogJ21lc3NhZ2UnLFxuXHRcdG1lbnRpb25zOiBbXSxcblx0XHRtZXJnZTogbnVsbCxcblx0XHRub3RlczogW10sXG5cdFx0cmF3OiAnbWVzc2FnZScsXG5cdFx0cmVmZXJlbmNlczogW10sXG5cdFx0cmV2ZXJ0OiBudWxsLFxuXHRcdHNjb3BlOiBudWxsLFxuXHRcdHN1YmplY3Q6IG51bGwsXG5cdFx0dHlwZTogbnVsbFxuXHR9O1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd1c2VzIGFuZ3VsYXIgZ3JhbW1hcicsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBtZXNzYWdlID0gJ3R5cGUoc2NvcGUpOiBzdWJqZWN0Jztcblx0Y29uc3QgYWN0dWFsID0gYXdhaXQgcGFyc2UobWVzc2FnZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0ge1xuXHRcdGJvZHk6IG51bGwsXG5cdFx0Zm9vdGVyOiBudWxsLFxuXHRcdGhlYWRlcjogJ3R5cGUoc2NvcGUpOiBzdWJqZWN0Jyxcblx0XHRtZW50aW9uczogW10sXG5cdFx0bWVyZ2U6IG51bGwsXG5cdFx0bm90ZXM6IFtdLFxuXHRcdHJhdzogJ3R5cGUoc2NvcGUpOiBzdWJqZWN0Jyxcblx0XHRyZWZlcmVuY2VzOiBbXSxcblx0XHRyZXZlcnQ6IG51bGwsXG5cdFx0c2NvcGU6ICdzY29wZScsXG5cdFx0c3ViamVjdDogJ3N1YmplY3QnLFxuXHRcdHR5cGU6ICd0eXBlJ1xuXHR9O1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCdzdXBwb3J0cyBzY29wZXMgd2l0aCAvJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IG1lc3NhZ2UgPSAndHlwZShzb21lL3Njb3BlKTogc3ViamVjdCc7XG5cdGNvbnN0IGFjdHVhbCA9IGF3YWl0IHBhcnNlKG1lc3NhZ2UpO1xuXHR0LmlzKGFjdHVhbC5zY29wZSwgJ3NvbWUvc2NvcGUnKTtcblx0dC5pcyhhY3R1YWwuc3ViamVjdCwgJ3N1YmplY3QnKTtcbn0pO1xuIl19