'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _importFrom = require('import-from');

var _importFrom2 = _interopRequireDefault(_importFrom);

var _lodash = require('lodash');

var _rc = require('rc');

var _rc2 = _interopRequireDefault(_rc);

var _resolveFrom = require('resolve-from');

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _resolveExtends = require('./library/resolve-extends');

var _resolveExtends2 = _interopRequireDefault(_resolveExtends);

var _executeRule = require('./library/execute-rule');

var _executeRule2 = _interopRequireDefault(_executeRule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var w = function w(a, b) {
	return Array.isArray(b) ? b : undefined;
};
var valid = function valid(input) {
	return (0, _lodash.pick)(input, 'extends', 'rules');
};

exports.default = function () {
	var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
		var seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var raw, config, opts, extended, preset, executed;
		return _regenerator2.default.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						// Obtain config from .rc files
						raw = file();

						// Merge passed config with file based options

						config = valid((0, _lodash.merge)(raw, seed));
						opts = (0, _lodash.merge)({ extends: [], rules: {} }, (0, _lodash.pick)(config, 'extends'));

						// Resolve extends key

						extended = (0, _resolveExtends2.default)(opts, {
							prefix: 'commitlint-config',
							cwd: raw.config ? _path2.default.dirname(raw.config) : process.cwd()
						});
						preset = valid((0, _lodash.mergeWith)({}, extended, config, w));

						// Execute rule config functions if needed

						_context2.next = 7;
						return Promise.all(['rules'].map(function (key) {
							return [key, preset[key]];
						}).map(function () {
							var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(item) {
								var _item, key, value, executedValue;

								return _regenerator2.default.wrap(function _callee$(_context) {
									while (1) {
										switch (_context.prev = _context.next) {
											case 0:
												_item = (0, _slicedToArray3.default)(item, 2), key = _item[0], value = _item[1];
												_context.next = 3;
												return Promise.all((0, _lodash.entries)(value || {}).map(function (entry) {
													return (0, _executeRule2.default)(entry);
												}));

											case 3:
												executedValue = _context.sent;
												return _context.abrupt('return', [key, executedValue.reduce(function (registry, item) {
													var _item2 = (0, _slicedToArray3.default)(item, 2),
													    key = _item2[0],
													    value = _item2[1];

													return (0, _extends3.default)({}, registry, {
														[key]: value
													});
												}, {})]);

											case 5:
											case 'end':
												return _context.stop();
										}
									}
								}, _callee, undefined);
							}));

							return function (_x2) {
								return _ref2.apply(this, arguments);
							};
						}()));

					case 7:
						executed = _context2.sent;
						return _context2.abrupt('return', executed.reduce(function (registry, item) {
							var _item3 = (0, _slicedToArray3.default)(item, 2),
							    key = _item3[0],
							    value = _item3[1];

							return (0, _extends3.default)({}, registry, {
								[key]: value
							});
						}, preset));

					case 9:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, undefined);
	}));

	return function () {
		return _ref.apply(this, arguments);
	};
}();

function file() {
	var legacy = (0, _rc2.default)('conventional-changelog-lint');
	var legacyFound = typeof legacy.config === 'string';

	var found = resolveable('./commitlint.config');
	var raw = found ? (0, _importFrom2.default)(process.cwd(), './commitlint.config') : {};

	if (legacyFound && !found) {
		console.warn(`Using legacy ${_path2.default.relative(process.cwd(), legacy.config)}. Rename to commitlint.config.js to silence this warning.`);
	}

	if (legacyFound && found) {
		console.warn(`Ignored legacy ${_path2.default.relative(process.cwd(), legacy.config)} as commitlint.config.js superseeds it. Remove .conventional-changelog-lintrc to silence this warning.`);
	}

	if (found) {
		return raw;
	}

	return legacy;
}

function resolveable(id) {
	try {
		(0, _resolveFrom2.default)(process.cwd(), id);
		return true;
	} catch (err) {
		return false;
	}
}
module.exports = exports['default'];