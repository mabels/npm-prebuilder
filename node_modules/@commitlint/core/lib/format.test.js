'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _hasAnsi = require('has-ansi');

var _hasAnsi2 = _interopRequireDefault(_hasAnsi);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _ansiStyles = require('ansi-styles');

var _format17 = require('./format');

var _format18 = _interopRequireDefault(_format17);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ok = _chalk2.default.bold(`${_chalk2.default.green('✔')}   found 0 problems, 0 warnings`);

(0, _ava2.default)('does nothing without arguments', function (t) {
	var actual = (0, _format18.default)();
	t.deepEqual(actual, [ok]);
});

(0, _ava2.default)('does nothing without .errors and .warnings', function (t) {
	var actual = (0, _format18.default)({});
	t.deepEqual(actual, [ok]);
});

(0, _ava2.default)('returns empty summary of problems for empty .errors and .warnings', function (t) {
	var _format = (0, _format18.default)({
		errors: [],
		warnings: []
	}),
	    _format2 = _slicedToArray(_format, 1),
	    msg = _format2[0];

	t.true(msg.includes('0 problems, 0 warnings'));
});

(0, _ava2.default)('returns a correct of empty .errors and .warnings', function (t) {
	var _format3 = (0, _format18.default)({
		errors: [{
			level: 2,
			name: 'error-name',
			message: 'There was an error'
		}],
		warnings: [{
			level: 1,
			name: 'warning-name',
			message: 'There was a problem'
		}]
	}),
	    _format4 = _slicedToArray(_format3, 3),
	    err = _format4[0],
	    prob = _format4[1],
	    msg = _format4[2];

	t.true(err.includes('There was an error'));
	t.true(prob.includes('There was a problem'));
	t.true(msg.includes('1 problems, 1 warnings'));
});

(0, _ava2.default)('colors messages by default', function (t) {
	var _format5 = (0, _format18.default)({
		errors: [],
		warnings: []
	}),
	    _format6 = _slicedToArray(_format5, 1),
	    msg = _format6[0];

	t.true((0, _hasAnsi2.default)(msg));
});

(0, _ava2.default)('does not color messages if configured', function (t) {
	var _format7 = (0, _format18.default)({}, { color: false }),
	    _format8 = _slicedToArray(_format7, 1),
	    msg = _format8[0];

	t.false((0, _hasAnsi2.default)(msg));
});

(0, _ava2.default)('uses appropriate signs by default', function (t) {
	var _format9 = (0, _format18.default)({
		errors: [{
			level: 2,
			name: 'error-name',
			message: 'There was an error'
		}],
		warnings: [{
			level: 1,
			name: 'warning-name',
			message: 'There was a problem'
		}]
	}),
	    _format10 = _slicedToArray(_format9, 2),
	    err = _format10[0],
	    warn = _format10[1];

	t.true(err.includes('✖'));
	t.true(warn.includes('⚠'));
});

(0, _ava2.default)('uses signs as configured', function (t) {
	var _format11 = (0, _format18.default)({
		errors: [{
			level: 2,
			name: 'error-name',
			message: 'There was an error'
		}],
		warnings: [{
			level: 1,
			name: 'warning-name',
			message: 'There was a problem'
		}]
	}, {
		signs: ['HNT', 'WRN', 'ERR']
	}),
	    _format12 = _slicedToArray(_format11, 2),
	    err = _format12[0],
	    warn = _format12[1];

	t.true(err.includes('ERR'));
	t.true(warn.includes('WRN'));
});

(0, _ava2.default)('uses appropriate colors by default', function (t) {
	var _format13 = (0, _format18.default)({
		errors: [{
			level: 2,
			name: 'error-name',
			message: 'There was an error'
		}],
		warnings: [{
			level: 1,
			name: 'warning-name',
			message: 'There was a problem'
		}]
	}),
	    _format14 = _slicedToArray(_format13, 2),
	    err = _format14[0],
	    warn = _format14[1];

	t.true(err.includes(_ansiStyles.red.open));
	t.true(warn.includes(_ansiStyles.yellow.open));
});

if (process.platform !== 'win32') {
	(0, _ava2.default)('uses colors as configured', function (t) {
		var _format15 = (0, _format18.default)({
			errors: [{
				level: 2,
				name: 'error-name',
				message: 'There was an error'
			}],
			warnings: [{
				level: 1,
				name: 'warning-name',
				message: 'There was a problem'
			}]
		}, {
			colors: ['white', 'magenta', 'blue']
		}),
		    _format16 = _slicedToArray(_format15, 2),
		    err = _format16[0],
		    warn = _format16[1];

		t.true(err.includes(_ansiStyles.blue.open));
		t.true(warn.includes(_ansiStyles.magenta.open));
	});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9mb3JtYXQudGVzdC5qcyJdLCJuYW1lcyI6WyJvayIsImJvbGQiLCJncmVlbiIsImFjdHVhbCIsInQiLCJkZWVwRXF1YWwiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsIm1zZyIsInRydWUiLCJpbmNsdWRlcyIsImxldmVsIiwibmFtZSIsIm1lc3NhZ2UiLCJlcnIiLCJwcm9iIiwiY29sb3IiLCJmYWxzZSIsIndhcm4iLCJzaWducyIsIm9wZW4iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJjb2xvcnMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsS0FBSyxnQkFBTUMsSUFBTixDQUFZLEdBQUUsZ0JBQU1DLEtBQU4sQ0FBWSxHQUFaLENBQWlCLGlDQUEvQixDQUFYOztBQUVBLG1CQUFLLGdDQUFMLEVBQXVDLGFBQUs7QUFDM0MsS0FBTUMsU0FBUyx3QkFBZjtBQUNBQyxHQUFFQyxTQUFGLENBQVlGLE1BQVosRUFBb0IsQ0FBQ0gsRUFBRCxDQUFwQjtBQUNBLENBSEQ7O0FBS0EsbUJBQUssNENBQUwsRUFBbUQsYUFBSztBQUN2RCxLQUFNRyxTQUFTLHVCQUFPLEVBQVAsQ0FBZjtBQUNBQyxHQUFFQyxTQUFGLENBQVlGLE1BQVosRUFBb0IsQ0FBQ0gsRUFBRCxDQUFwQjtBQUNBLENBSEQ7O0FBS0EsbUJBQUssbUVBQUwsRUFBMEUsYUFBSztBQUFBLGVBQ2hFLHVCQUFPO0FBQ3BCTSxVQUFRLEVBRFk7QUFFcEJDLFlBQVU7QUFGVSxFQUFQLENBRGdFO0FBQUE7QUFBQSxLQUN2RUMsR0FEdUU7O0FBTTlFSixHQUFFSyxJQUFGLENBQU9ELElBQUlFLFFBQUosQ0FBYSx3QkFBYixDQUFQO0FBQ0EsQ0FQRDs7QUFTQSxtQkFBSyxrREFBTCxFQUF5RCxhQUFLO0FBQUEsZ0JBQ3BDLHVCQUFPO0FBQy9CSixVQUFRLENBQ1A7QUFDQ0ssVUFBTyxDQURSO0FBRUNDLFNBQU0sWUFGUDtBQUdD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VSxJQUFyQixDQUFQO0FBQ0EsQ0FwQkQ7O0FBc0JBLElBQUlDLFFBQVFDLFFBQVIsS0FBcUIsT0FBekIsRUFBa0M7QUFDakMsb0JBQUssMkJBQUwsRUFBa0MsYUFBSztBQUFBLGtCQUNsQix1QkFDbkI7QUFDQ2hCLFdBQVEsQ0FDUDtBQUNDSyxXQUFPLENBRFI7QUFFQ0MsVUFBTSxZQUZQO0FBR0NDLGFBQVM7QUFIVixJQURPLENBRFQ7QUFRQ04sYUFBVSxDQUNUO0FBQ0NJLFdBQU8sQ0FEUjtBQUVDQyxVQUFNLGNBRlA7QUFHQ0MsYUFBUztBQUhWLElBRFM7QUFSWCxHQURtQixFQWlCbkI7QUFDQ1UsV0FBUSxDQUFDLE9BQUQsRUFBVSxTQUFWLEVBQXFCLE1BQXJCO0FBRFQsR0FqQm1CLENBRGtCO0FBQUE7QUFBQSxNQUMvQlQsR0FEK0I7QUFBQSxNQUMxQkksSUFEMEI7O0FBdUJ0Q2QsSUFBRUssSUFBRixDQUFPSyxJQUFJSixRQUFKLENBQWEsaUJBQUtVLElBQWxCLENBQVA7QUFDQWhCLElBQUVLLElBQUYsQ0FBT1MsS0FBS1IsUUFBTCxDQUFjLG9CQUFRVSxJQUF0QixDQUFQO0FBQ0EsRUF6QkQ7QUEwQkEiLCJmaWxlIjoiZm9ybWF0LnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IGhhc0Fuc2kgZnJvbSAnaGFzLWFuc2knO1xuaW1wb3J0IGNoYWxrIGZyb20gJ2NoYWxrJztcbmltcG9ydCB7eWVsbG93LCByZWQsIG1hZ2VudGEsIGJsdWV9IGZyb20gJ2Fuc2ktc3R5bGVzJztcbmltcG9ydCBmb3JtYXQgZnJvbSAnLi9mb3JtYXQnO1xuXG5jb25zdCBvayA9IGNoYWxrLmJvbGQoYCR7Y2hhbGsuZ3JlZW4oJ+KclCcpfSAgIGZvdW5kIDAgcHJvYmxlbXMsIDAgd2FybmluZ3NgKTtcblxudGVzdCgnZG9lcyBub3RoaW5nIHdpdGhvdXQgYXJndW1lbnRzJywgdCA9PiB7XG5cdGNvbnN0IGFjdHVhbCA9IGZvcm1hdCgpO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIFtva10pO1xufSk7XG5cbnRlc3QoJ2RvZXMgbm90aGluZyB3aXRob3V0IC5lcnJvcnMgYW5kIC53YXJuaW5ncycsIHQgPT4ge1xuXHRjb25zdCBhY3R1YWwgPSBmb3JtYXQoe30pO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIFtva10pO1xufSk7XG5cbnRlc3QoJ3JldHVybnMgZW1wdHkgc3VtbWFyeSBvZiBwcm9ibGVtcyBmb3IgZW1wdHkgLmVycm9ycyBhbmQgLndhcm5pbmdzJywgdCA9PiB7XG5cdGNvbnN0IFttc2ddID0gZm9ybWF0KHtcblx0XHRlcnJvcnM6IFtdLFxuXHRcdHdhcm5pbmdzOiBbXVxuXHR9KTtcblxuXHR0LnRydWUobXNnLmluY2x1ZGVzKCcwIHByb2JsZW1zLCAwIHdhcm5pbmdzJykpO1xufSk7XG5cbnRlc3QoJ3JldHVybnMgYSBjb3JyZWN0IG9mIGVtcHR5IC5lcnJvcnMgYW5kIC53YXJuaW5ncycsIHQgPT4ge1xuXHRjb25zdCBbZXJyLCBwcm9iLCBtc2ddID0gZm9ybWF0KHtcblx0XHRlcnJvcnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bGV2ZWw6IDIsXG5cdFx0XHRcdG5hbWU6ICdlcnJvci1uYW1lJyxcblx0XHRcdFx0bWVzc2FnZTogJ1RoZXJlIHdhcyBhbiBlcnJvcidcblx0XHRcdH1cblx0XHRdLFxuXHRcdHdhcm5pbmdzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGxldmVsOiAxLFxuXHRcdFx0XHRuYW1lOiAnd2FybmluZy1uYW1lJyxcblx0XHRcdFx0bWVzc2FnZTogJ1RoZXJlIHdhcyBhIHByb2JsZW0nXG5cdFx0XHR9XG5cdFx0XVxuXHR9KTtcblxuXHR0LnRydWUoZXJyLmluY2x1ZGVzKCdUaGVyZSB3YXMgYW4gZXJyb3InKSk7XG5cdHQudHJ1ZShwcm9iLmluY2x1ZGVzKCdUaGVyZSB3YXMgYSBwcm9ibGVtJykpO1xuXHR0LnRydWUobXNnLmluY2x1ZGVzKCcxIHByb2JsZW1zLCAxIHdhcm5pbmdzJykpO1xufSk7XG5cbnRlc3QoJ2NvbG9ycyBtZXNzYWdlcyBieSBkZWZhdWx0JywgdCA9PiB7XG5cdGNvbnN0IFttc2ddID0gZm9ybWF0KHtcblx0XHRlcnJvcnM6IFtdLFxuXHRcdHdhcm5pbmdzOiBbXVxuXHR9KTtcblx0dC50cnVlKGhhc0Fuc2kobXNnKSk7XG59KTtcblxudGVzdCgnZG9lcyBub3QgY29sb3IgbWVzc2FnZXMgaWYgY29uZmlndXJlZCcsIHQgPT4ge1xuXHRjb25zdCBbbXNnXSA9IGZvcm1hdCh7fSwge2NvbG9yOiBmYWxzZX0pO1xuXHR0LmZhbHNlKGhhc0Fuc2kobXNnKSk7XG59KTtcblxudGVzdCgndXNlcyBhcHByb3ByaWF0ZSBzaWducyBieSBkZWZhdWx0JywgdCA9PiB7XG5cdGNvbnN0IFtlcnIsIHdhcm5dID0gZm9ybWF0KHtcblx0XHRlcnJvcnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bGV2ZWw6IDIsXG5cdFx0XHRcdG5hbWU6ICdlcnJvci1uYW1lJyxcblx0XHRcdFx0bWVzc2FnZTogJ1RoZXJlIHdhcyBhbiBlcnJvcidcblx0XHRcdH1cblx0XHRdLFxuXHRcdHdhcm5pbmdzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGxldmVsOiAxLFxuXHRcdFx0XHRuYW1lOiAnd2FybmluZy1uYW1lJyxcblx0XHRcdFx0bWVzc2FnZTogJ1RoZXJlIHdhcyBhIHByb2JsZW0nXG5cdFx0XHR9XG5cdFx0XVxuXHR9KTtcblxuXHR0LnRydWUoZXJyLmluY2x1ZGVzKCfinJYnKSk7XG5cdHQudHJ1ZSh3YXJuLmluY2x1ZGVzKCfimqAnKSk7XG59KTtcblxudGVzdCgndXNlcyBzaWducyBhcyBjb25maWd1cmVkJywgdCA9PiB7XG5cdGNvbnN0IFtlcnIsIHdhcm5dID0gZm9ybWF0KFxuXHRcdHtcblx0XHRcdGVycm9yczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGV2ZWw6IDIsXG5cdFx0XHRcdFx0bmFtZTogJ2Vycm9yLW5hbWUnLFxuXHRcdFx0XHRcdG1lc3NhZ2U6ICdUaGVyZSB3YXMgYW4gZXJyb3InXG5cdFx0XHRcdH1cblx0XHRcdF0sXG5cdFx0XHR3YXJuaW5nczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bGV2ZWw6IDEsXG5cdFx0XHRcdFx0bmFtZTogJ3dhcm5pbmctbmFtZScsXG5cdFx0XHRcdFx0bWVzc2FnZTogJ1RoZXJlIHdhcyBhIHByb2JsZW0nXG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9LFxuXHRcdHtcblx0XHRcdHNpZ25zOiBbJ0hOVCcsICdXUk4nLCAnRVJSJ11cblx0XHR9XG5cdCk7XG5cblx0dC50cnVlKGVyci5pbmNsdWRlcygnRVJSJykpO1xuXHR0LnRydWUod2Fybi5pbmNsdWRlcygnV1JOJykpO1xufSk7XG5cbnRlc3QoJ3VzZXMgYXBwcm9wcmlhdGUgY29sb3JzIGJ5IGRlZmF1bHQnLCB0ID0+IHtcblx0Y29uc3QgW2Vyciwgd2Fybl0gPSBmb3JtYXQoe1xuXHRcdGVycm9yczogW1xuXHRcdFx0e1xuXHRcdFx0XHRsZXZlbDogMixcblx0XHRcdFx0bmFtZTogJ2Vycm9yLW5hbWUnLFxuXHRcdFx0XHRtZXNzYWdlOiAnVGhlcmUgd2FzIGFuIGVycm9yJ1xuXHRcdFx0fVxuXHRcdF0sXG5cdFx0d2FybmluZ3M6IFtcblx0XHRcdHtcblx0XHRcdFx0bGV2ZWw6IDEsXG5cdFx0XHRcdG5hbWU6ICd3YXJuaW5nLW5hbWUnLFxuXHRcdFx0XHRtZXNzYWdlOiAnVGhlcmUgd2FzIGEgcHJvYmxlbSdcblx0XHRcdH1cblx0XHRdXG5cdH0pO1xuXG5cdHQudHJ1ZShlcnIuaW5jbHVkZXMocmVkLm9wZW4pKTtcblx0dC50cnVlKHdhcm4uaW5jbHVkZXMoeWVsbG93Lm9wZW4pKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ3dpbjMyJykge1xuXHR0ZXN0KCd1c2VzIGNvbG9ycyBhcyBjb25maWd1cmVkJywgdCA9PiB7XG5cdFx0Y29uc3QgW2Vyciwgd2Fybl0gPSBmb3JtYXQoXG5cdFx0XHR7XG5cdFx0XHRcdGVycm9yczogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGxldmVsOiAyLFxuXHRcdFx0XHRcdFx0bmFtZTogJ2Vycm9yLW5hbWUnLFxuXHRcdFx0XHRcdFx0bWVzc2FnZTogJ1RoZXJlIHdhcyBhbiBlcnJvcidcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF0sXG5cdFx0XHRcdHdhcm5pbmdzOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGV2ZWw6IDEsXG5cdFx0XHRcdFx0XHRuYW1lOiAnd2FybmluZy1uYW1lJyxcblx0XHRcdFx0XHRcdG1lc3NhZ2U6ICdUaGVyZSB3YXMgYSBwcm9ibGVtJ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29sb3JzOiBbJ3doaXRlJywgJ21hZ2VudGEnLCAnYmx1ZSddXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdHQudHJ1ZShlcnIuaW5jbHVkZXMoYmx1ZS5vcGVuKSk7XG5cdFx0dC50cnVlKHdhcm4uaW5jbHVkZXMobWFnZW50YS5vcGVuKSk7XG5cdH0pO1xufVxuIl19