'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var initRepository = function () {
	var _ref8 = _asyncToGenerator(function* () {
		var previous = process.cwd();
		var directory = (0, _path.join)((0, _os.tmpdir)(), rand());

		yield (0, _execa2.default)('git', ['init', directory]);

		process.chdir(directory);

		yield (0, _execa2.default)('git', ['config', 'user.email', 'test@example.com']);
		yield (0, _execa2.default)('git', ['config', 'user.name', 'ava']);

		return { directory, previous };
	});

	return function initRepository() {
		return _ref8.apply(this, arguments);
	};
}();

var cloneRepository = function () {
	var _ref9 = _asyncToGenerator(function* (source, context) {
		var directory = (0, _path.join)((0, _os.tmpdir)(), rand());

		for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
			args[_key - 2] = arguments[_key];
		}

		yield (0, _execa2.default)('git', ['clone'].concat(args, [source, directory]));
		process.chdir(directory);

		yield (0, _execa2.default)('git', ['config', 'user.email', 'test@example.com']);
		yield (0, _execa2.default)('git', ['config', 'user.name', 'ava']);

		return { directory, previous: context.previous };
	});

	return function cloneRepository(_x8, _x9) {
		return _ref9.apply(this, arguments);
	};
}();

var cleanRepository = function () {
	var _ref10 = _asyncToGenerator(function* (repo) {
		if (repo.previous && repo.previous !== process.cwd()) {
			process.chdir(repo.previous);
		}

		if (yield (0, _pathExists2.default)(repo.directory)) {
			yield rm(repo.directory);
		}
	});

	return function cleanRepository(_x10) {
		return _ref10.apply(this, arguments);
	};
}();

var _os = require('os');

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _path = require('path');

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireDefault(_denodeify);

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _fs = require('mz/fs');

var _pathExists = require('path-exists');

var _pathExists2 = _interopRequireDefault(_pathExists);

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _package = require('../package');

var _package2 = _interopRequireDefault(_package);

var _read = require('./read');

var _read2 = _interopRequireDefault(_read);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var rm = (0, _denodeify2.default)(_rimraf2.default);

_ava2.default.beforeEach(function () {
	var _ref = _asyncToGenerator(function* (t) {
		t.context.repos = [yield initRepository()];
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

_ava2.default.afterEach.always(function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		try {
			yield Promise.all(t.context.repos.map(function () {
				var _ref3 = _asyncToGenerator(function* (repo) {
					return cleanRepository(repo);
				});

				return function (_x3) {
					return _ref3.apply(this, arguments);
				};
			}()));
			t.context.repos = [];
		} catch (err) {
			console.log({ err });
		}
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

_ava2.default.serial('get edit commit message from git root', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		yield (0, _fs.writeFile)('alpha.txt', 'alpha');
		yield (0, _execa2.default)('git', ['add', '.']);
		yield (0, _execa2.default)('git', ['commit', '-m', 'alpha']);
		var expected = ['alpha\n\n'];
		var actual = yield (0, _read2.default)({ edit: true });
		t.deepEqual(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

_ava2.default.serial('get history commit messages', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		yield (0, _fs.writeFile)('alpha.txt', 'alpha');
		yield (0, _execa2.default)('git', ['add', 'alpha.txt']);
		yield (0, _execa2.default)('git', ['commit', '-m', 'alpha']);
		yield (0, _execa2.default)('git', ['rm', 'alpha.txt']);
		yield (0, _execa2.default)('git', ['commit', '-m', 'remove alpha']);

		var expected = ['remove alpha\n\n', 'alpha\n\n'];
		var actual = yield (0, _read2.default)({});
		t.deepEqual(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

_ava2.default.serial('get edit commit message from git subdirectory', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		yield (0, _fs.mkdir)('beta');
		yield (0, _fs.writeFile)('beta/beta.txt', 'beta');
		process.chdir('beta');
		yield (0, _execa2.default)('git', ['add', '.']);
		yield (0, _execa2.default)('git', ['commit', '-m', 'beta']);

		var expected = ['beta\n\n'];
		var actual = yield (0, _read2.default)({ edit: true });
		t.deepEqual(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

_ava2.default.serial('get history commit messages from shallow clone', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _t$context$repos = _slicedToArray(t.context.repos, 1),
		    repo = _t$context$repos[0];

		yield (0, _fs.writeFile)('alpha.txt', 'alpha');
		yield (0, _execa2.default)('git', ['add', 'alpha.txt']);
		yield (0, _execa2.default)('git', ['commit', '-m', 'alpha']);

		var clone = yield cloneRepository(_package2.default.repository.url, repo, '--depth', '1');
		t.context.repos = [].concat(_toConsumableArray(t.context.repos), [clone]);

		var err = yield t.throws((0, _read2.default)({ from: 'master' }));
		t.true(err.message.indexOf('Could not get git history from shallow clone') > -1);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

function rand() {
	return _crypto2.default.randomBytes(Math.ceil(6)).toString('hex').slice(0, 12);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWFkLnRlc3QuanMiXSwibmFtZXMiOlsicHJldmlvdXMiLCJwcm9jZXNzIiwiY3dkIiwiZGlyZWN0b3J5IiwicmFuZCIsImNoZGlyIiwiaW5pdFJlcG9zaXRvcnkiLCJzb3VyY2UiLCJjb250ZXh0IiwiYXJncyIsImNsb25lUmVwb3NpdG9yeSIsInJlcG8iLCJybSIsImNsZWFuUmVwb3NpdG9yeSIsImJlZm9yZUVhY2giLCJ0IiwicmVwb3MiLCJhZnRlckVhY2giLCJhbHdheXMiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiZXJyIiwiY29uc29sZSIsImxvZyIsInNlcmlhbCIsImV4cGVjdGVkIiwiYWN0dWFsIiwiZWRpdCIsImRlZXBFcXVhbCIsImNsb25lIiwicmVwb3NpdG9yeSIsInVybCIsInRocm93cyIsImZyb20iLCJ0cnVlIiwibWVzc2FnZSIsImluZGV4T2YiLCJyYW5kb21CeXRlcyIsIk1hdGgiLCJjZWlsIiwidG9TdHJpbmciLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7K0JBOEVBLGFBQWdDO0FBQy9CLE1BQU1BLFdBQVdDLFFBQVFDLEdBQVIsRUFBakI7QUFDQSxNQUFNQyxZQUFZLGdCQUFLLGlCQUFMLEVBQWVDLE1BQWYsQ0FBbEI7O0FBRUEsUUFBTSxxQkFBTSxLQUFOLEVBQWEsQ0FBQyxNQUFELEVBQVNELFNBQVQsQ0FBYixDQUFOOztBQUVBRixVQUFRSSxLQUFSLENBQWNGLFNBQWQ7O0FBRUEsUUFBTSxxQkFBTSxLQUFOLEVBQWEsQ0FBQyxRQUFELEVBQVcsWUFBWCxFQUF5QixrQkFBekIsQ0FBYixDQUFOO0FBQ0EsUUFBTSxxQkFBTSxLQUFOLEVBQWEsQ0FBQyxRQUFELEVBQVcsV0FBWCxFQUF3QixLQUF4QixDQUFiLENBQU47O0FBRUEsU0FBTyxFQUFDQSxTQUFELEVBQVlILFFBQVosRUFBUDtBQUNBLEU7O2lCQVpjTSxjOzs7Ozs7K0JBY2YsV0FBK0JDLE1BQS9CLEVBQXVDQyxPQUF2QyxFQUF5RDtBQUN4RCxNQUFN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O0FBQ0EsUUFBTSxxQkFBTSxLQUFOLEVBQWEsQ0FBQyxLQUFELEVBQVEsV0FBUixDQUFiLENBQU47QUFDQSxRQUFNLHFCQUFNLEtBQU4sRUFBYSxDQUFDLFFBQUQsRUFBVyxJQUFYLEVBQWlCLE9BQWpCLENBQWIsQ0FBTjs7QUFFQSxNQUFNbUIsUUFBUSxNQUFNcEIsZ0JBQWdCLGtCQUFJcUIsVUFBSixDQUFlQyxHQUEvQixFQUFvQ3JCLElBQXBDLEVBQTBDLFNBQTFDLEVBQXFELEdBQXJELENBQXBCO0FBQ0FJLElBQUVQLE9BQUYsQ0FBVVEsS0FBVixnQ0FBc0JELEVBQUVQLE9BQUYsQ0FBVVEsS0FBaEMsSUFBdUNjLEtBQXZDOztBQUVBLE1BQU1SLE1BQU0sTUFBTVAsRUFBRWtCLE1BQUYsQ0FBUyxvQkFBSyxFQUFDQyxNQUFNLFFBQVAsRUFBTCxDQUFULENBQWxCO0FBQ0FuQixJQUFFb0IsSUFBRixDQUNDYixJQUFJYyxPQUFKLENBQVlDLE9BQVosQ0FBb0IsOENBQXBCLElBQXNFLENBQUMsQ0FEeEU7QUFHQSxFQWREOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQW1EQSxTQUFTakMsSUFBVCxHQUFnQjtBQUNmLFFBQU8saUJBQU9rQyxXQUFQLENBQW1CQyxLQUFLQyxJQUFMLENBQVUsQ0FBVixDQUFuQixFQUFpQ0MsUUFBakMsQ0FBMEMsS0FBMUMsRUFBaURDLEtBQWpELENBQXVELENBQXZELEVBQTBELEVBQTFELENBQVA7QUFDQSIsImZpbGUiOiJyZWFkLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3RtcGRpcn0gZnJvbSAnb3MnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHtqb2lufSBmcm9tICdwYXRoJztcblxuaW1wb3J0IHRlc3QgZnJvbSAnYXZhJztcbmltcG9ydCBkZW5vZGVpZnkgZnJvbSAnZGVub2RlaWZ5JztcbmltcG9ydCBleGVjYSBmcm9tICdleGVjYSc7XG5pbXBvcnQge21rZGlyLCB3cml0ZUZpbGV9IGZyb20gJ216L2ZzJztcbmltcG9ydCBleGlzdHMgZnJvbSAncGF0aC1leGlzdHMnO1xuaW1wb3J0IHJpbXJhZiBmcm9tICdyaW1yYWYnO1xuXG5pbXBvcnQgcGtnIGZyb20gJy4uL3BhY2thZ2UnO1xuaW1wb3J0IHJlYWQgZnJvbSAnLi9yZWFkJztcblxuY29uc3Qgcm0gPSBkZW5vZGVpZnkocmltcmFmKTtcblxudGVzdC5iZWZvcmVFYWNoKGFzeW5jIHQgPT4ge1xuXHR0LmNvbnRleHQucmVwb3MgPSBbYXdhaXQgaW5pdFJlcG9zaXRvcnkoKV07XG59KTtcblxudGVzdC5hZnRlckVhY2guYWx3YXlzKGFzeW5jIHQgPT4ge1xuXHR0cnkge1xuXHRcdGF3YWl0IFByb21pc2UuYWxsKHQuY29udGV4dC5yZXBvcy5tYXAoYXN5bmMgcmVwbyA9PiBjbGVhblJlcG9zaXRvcnkocmVwbykpKTtcblx0XHR0LmNvbnRleHQucmVwb3MgPSBbXTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Y29uc29sZS5sb2coe2Vycn0pO1xuXHR9XG59KTtcblxudGVzdC5zZXJpYWwoJ2dldCBlZGl0IGNvbW1pdCBtZXNzYWdlIGZyb20gZ2l0IHJvb3QnLCBhc3luYyB0ID0+IHtcblx0YXdhaXQgd3JpdGVGaWxlKCdhbHBoYS50eHQnLCAnYWxwaGEnKTtcblx0YXdhaXQgZXhlY2EoJ2dpdCcsIFsnYWRkJywgJy4nXSk7XG5cdGF3YWl0IGV4ZWNhKCdnaXQnLCBbJ2NvbW1pdCcsICctbScsICdhbHBoYSddKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBbJ2FscGhhXFxuXFxuJ107XG5cdGNvbnN0IGFjdHVhbCA9IGF3YWl0IHJlYWQoe2VkaXQ6IHRydWV9KTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdC5zZXJpYWwoJ2dldCBoaXN0b3J5IGNvbW1pdCBtZXNzYWdlcycsIGFzeW5jIHQgPT4ge1xuXHRhd2FpdCB3cml0ZUZpbGUoJ2FscGhhLnR4dCcsICdhbHBoYScpO1xuXHRhd2FpdCBleGVjYSgnZ2l0JywgWydhZGQnLCAnYWxwaGEudHh0J10pO1xuXHRhd2FpdCBleGVjYSgnZ2l0JywgWydjb21taXQnLCAnLW0nLCAnYWxwaGEnXSk7XG5cdGF3YWl0IGV4ZWNhKCdnaXQnLCBbJ3JtJywgJ2FscGhhLnR4dCddKTtcblx0YXdhaXQgZXhlY2EoJ2dpdCcsIFsnY29tbWl0JywgJy1tJywgJ3JlbW92ZSBhbHBoYSddKTtcblxuXHRjb25zdCBleHBlY3RlZCA9IFsncmVtb3ZlIGFscGhhXFxuXFxuJywgJ2FscGhhXFxuXFxuJ107XG5cdGNvbnN0IGFjdHVhbCA9IGF3YWl0IHJlYWQoe30pO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0LnNlcmlhbCgnZ2V0IGVkaXQgY29tbWl0IG1lc3NhZ2UgZnJvbSBnaXQgc3ViZGlyZWN0b3J5JywgYXN5bmMgdCA9PiB7XG5cdGF3YWl0IG1rZGlyKCdiZXRhJyk7XG5cdGF3YWl0IHdyaXRlRmlsZSgnYmV0YS9iZXRhLnR4dCcsICdiZXRhJyk7XG5cdHByb2Nlc3MuY2hkaXIoJ2JldGEnKTtcblx0YXdhaXQgZXhlY2EoJ2dpdCcsIFsnYWRkJywgJy4nXSk7XG5cdGF3YWl0IGV4ZWNhKCdnaXQnLCBbJ2NvbW1pdCcsICctbScsICdiZXRhJ10pO1xuXG5cdGNvbnN0IGV4cGVjdGVkID0gWydiZXRhXFxuXFxuJ107XG5cdGNvbnN0IGFjdHVhbCA9IGF3YWl0IHJlYWQoe2VkaXQ6IHRydWV9KTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdC5zZXJpYWwoJ2dldCBoaXN0b3J5IGNvbW1pdCBtZXNzYWdlcyBmcm9tIHNoYWxsb3cgY2xvbmUnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW3JlcG9dID0gdC5jb250ZXh0LnJlcG9zO1xuXG5cdGF3YWl0IHdyaXRlRmlsZSgnYWxwaGEudHh0JywgJ2FscGhhJyk7XG5cdGF3YWl0IGV4ZWNhKCdnaXQnLCBbJ2FkZCcsICdhbHBoYS50eHQnXSk7XG5cdGF3YWl0IGV4ZWNhKCdnaXQnLCBbJ2NvbW1pdCcsICctbScsICdhbHBoYSddKTtcblxuXHRjb25zdCBjbG9uZSA9IGF3YWl0IGNsb25lUmVwb3NpdG9yeShwa2cucmVwb3NpdG9yeS51cmwsIHJlcG8sICctLWRlcHRoJywgJzEnKTtcblx0dC5jb250ZXh0LnJlcG9zID0gWy4uLnQuY29udGV4dC5yZXBvcywgY2xvbmVdO1xuXG5cdGNvbnN0IGVyciA9IGF3YWl0IHQudGhyb3dzKHJlYWQoe2Zyb206ICdtYXN0ZXInfSkpO1xuXHR0LnRydWUoXG5cdFx0ZXJyLm1lc3NhZ2UuaW5kZXhPZignQ291bGQgbm90IGdldCBnaXQgaGlzdG9yeSBmcm9tIHNoYWxsb3cgY2xvbmUnKSA+IC0xXG5cdCk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gaW5pdFJlcG9zaXRvcnkoKSB7XG5cdGNvbnN0IHByZXZpb3VzID0gcHJvY2Vzcy5jd2QoKTtcblx0Y29uc3QgZGlyZWN0b3J5ID0gam9pbih0bXBkaXIoKSwgcmFuZCgpKTtcblxuXHRhd2FpdCBleGVjYSgnZ2l0JywgWydpbml0JywgZGlyZWN0b3J5XSk7XG5cblx0cHJvY2Vzcy5jaGRpcihkaXJlY3RvcnkpO1xuXG5cdGF3YWl0IGV4ZWNhKCdnaXQnLCBbJ2NvbmZpZycsICd1c2VyLmVtYWlsJywgJ3Rlc3RAZXhhbXBsZS5jb20nXSk7XG5cdGF3YWl0IGV4ZWNhKCdnaXQnLCBbJ2NvbmZpZycsICd1c2VyLm5hbWUnLCAnYXZhJ10pO1xuXG5cdHJldHVybiB7ZGlyZWN0b3J5LCBwcmV2aW91c307XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsb25lUmVwb3NpdG9yeShzb3VyY2UsIGNvbnRleHQsIC4uLmFyZ3MpIHtcblx0Y29uc3QgZGlyZWN0b3J5ID0gam9pbih0bXBkaXIoKSwgcmFuZCgpKTtcblx0YXdhaXQgZXhlY2EoJ2dpdCcsIFsnY2xvbmUnLCAuLi5hcmdzLCBzb3VyY2UsIGRpcmVjdG9yeV0pO1xuXHRwcm9jZXNzLmNoZGlyKGRpcmVjdG9yeSk7XG5cblx0YXdhaXQgZXhlY2EoJ2dpdCcsIFsnY29uZmlnJywgJ3VzZXIuZW1haWwnLCAndGVzdEBleGFtcGxlLmNvbSddKTtcblx0YXdhaXQgZXhlY2EoJ2dpdCcsIFsnY29uZmlnJywgJ3VzZXIubmFtZScsICdhdmEnXSk7XG5cblx0cmV0dXJuIHtkaXJlY3RvcnksIHByZXZpb3VzOiBjb250ZXh0LnByZXZpb3VzfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xlYW5SZXBvc2l0b3J5KHJlcG8pIHtcblx0aWYgKHJlcG8ucHJldmlvdXMgJiYgcmVwby5wcmV2aW91cyAhPT0gcHJvY2Vzcy5jd2QoKSkge1xuXHRcdHByb2Nlc3MuY2hkaXIocmVwby5wcmV2aW91cyk7XG5cdH1cblxuXHRpZiAoYXdhaXQgZXhpc3RzKHJlcG8uZGlyZWN0b3J5KSkge1xuXHRcdGF3YWl0IHJtKHJlcG8uZGlyZWN0b3J5KTtcblx0fVxufVxuXG5mdW5jdGlvbiByYW5kKCkge1xuXHRyZXR1cm4gY3J5cHRvLnJhbmRvbUJ5dGVzKE1hdGguY2VpbCg2KSkudG9TdHJpbmcoJ2hleCcpLnNsaWNlKDAsIDEyKTtcbn1cbiJdfQ==