'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _bodyLeadingBlank19 = require('./body-leading-blank');

var _bodyLeadingBlank20 = _interopRequireDefault(_bodyLeadingBlank19);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	simple: 'chore: subject',
	without: 'chore: subject\nbody',
	with: 'chore: subject\n\nbody'
};

var parsed = {
	simple: (0, _parse2.default)(messages.simple),
	without: (0, _parse2.default)(messages.without),
	with: (0, _parse2.default)(messages.with)
};

(0, _ava2.default)('with simple message should succeed for empty keyword', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank = (0, _bodyLeadingBlank20.default)((yield parsed.simple)),
		    _bodyLeadingBlank2 = _slicedToArray(_bodyLeadingBlank, 1),
		    actual = _bodyLeadingBlank2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with simple message should succeed for "never"', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank3 = (0, _bodyLeadingBlank20.default)((yield parsed.simple), 'never'),
		    _bodyLeadingBlank4 = _slicedToArray(_bodyLeadingBlank3, 1),
		    actual = _bodyLeadingBlank4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with simple message should succeed for "always"', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank5 = (0, _bodyLeadingBlank20.default)((yield parsed.simple), 'always'),
		    _bodyLeadingBlank6 = _slicedToArray(_bodyLeadingBlank5, 1),
		    actual = _bodyLeadingBlank6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('without blank line before body should fail for empty keyword', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank7 = (0, _bodyLeadingBlank20.default)((yield parsed.without)),
		    _bodyLeadingBlank8 = _slicedToArray(_bodyLeadingBlank7, 1),
		    actual = _bodyLeadingBlank8[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('without blank line before body should succeed for "never"', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank9 = (0, _bodyLeadingBlank20.default)((yield parsed.without), 'never'),
		    _bodyLeadingBlank10 = _slicedToArray(_bodyLeadingBlank9, 1),
		    actual = _bodyLeadingBlank10[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('without blank line before body should fail for "always"', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank11 = (0, _bodyLeadingBlank20.default)((yield parsed.without), 'always'),
		    _bodyLeadingBlank12 = _slicedToArray(_bodyLeadingBlank11, 1),
		    actual = _bodyLeadingBlank12[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before body should succeed for empty keyword', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank13 = (0, _bodyLeadingBlank20.default)((yield parsed.with)),
		    _bodyLeadingBlank14 = _slicedToArray(_bodyLeadingBlank13, 1),
		    actual = _bodyLeadingBlank14[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before body should fail for "never"', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank15 = (0, _bodyLeadingBlank20.default)((yield parsed.with), 'never'),
		    _bodyLeadingBlank16 = _slicedToArray(_bodyLeadingBlank15, 1),
		    actual = _bodyLeadingBlank16[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before body should succeed for "always"', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _bodyLeadingBlank17 = (0, _bodyLeadingBlank20.default)((yield parsed.with), 'always'),
		    _bodyLeadingBlank18 = _slicedToArray(_bodyLeadingBlank17, 1),
		    actual = _bodyLeadingBlank18[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9ib2R5LWxlYWRpbmctYmxhbmsudGVzdC5qcyJdLCJuYW1lcyI6WyJtZXNzYWdlcyIsInNpbXBsZSIsIndpdGhvdXQiLCJ3aXRoIiwicGFyc2VkIiwidCIsImFjdHVhbCIsImV4cGVjdGVkIiwiaXMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7O0FBRUEsSUFBTUEsV0FBVztBQUNoQkMsU0FBUSxnQkFEUTtBQUVoQkMsVUFBUyxzQkFGTztBQUdoQkMsT0FBTTtBQUhVLENBQWpCOztBQU1BLElBQU1DLFNBQVM7QUFDZEgsU0FBUSxxQkFBTUQsU0FBU0MsTUFBZixDQURNO0FBRWRDLFVBQVMscUJBQU1GLFNBQVNFLE9BQWYsQ0FGSztBQUdkQyxPQUFNLHFCQUFNSCxTQUFTRyxJQUFmO0FBSFEsQ0FBZjs7QUFNQSxtQkFBSyxzREFBTDtBQUFBLDhCQUE2RCxXQUFNRSxDQUFOLEVBQVc7QUFBQSwwQkFDdEQsa0NBQWlCLE1BQU1ELE9BQU9ILE1BQTlCLEVBRHNEO0FBQUE7QUFBQSxNQUNoRUssTUFEZ0U7O0FBRXZFLE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLGdEQUFMO0FBQUEsK0JBQXVELFdBQU1GLENBQU4sRUFBVztBQUFBLDJCQUNoRCxrQ0FBaUIsTUFBTUQsT0FBT0gsTUFBOUIsR0FBc0MsT0FBdEMsQ0FEZ0Q7QUFBQTtBQUFBLE1BQzFESyxNQUQwRDs7QUFFakUsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssaURBQUw7QUFBQSwrQkFBd0QsV0FBTUYsQ0FBTixFQUFXO0FBQUEsMkJBQ2pELGtDQUFpQixNQUFNRCxPQUFPSCxNQUE5QixHQUFzQyxRQUF0QyxDQURpRDtBQUFBO0FBQUEsTUFDM0RLLE1BRDJEOztBQUVsRSxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyw4REFBTDtBQUFBLCtCQUFxRSxXQUFNRixDQUFOLEVBQVc7QUFBQSwyQkFDOUQsa0NBQWlCLE1BQU1ELE9BQU9GLE9BQTlCLEVBRDhEO0FBQUE7QUFBQSxNQUN4RUksTUFEd0U7O0FBRS9FLE1BQU1DLFdBQVcsS0FBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLDJEQUFMO0FBQUEsK0JBQWtFLFdBQU1GLENBQU4sRUFBVztBQUFBLDJCQUMzRCxrQ0FBaUIsTUFBTUQsT0FBT0YsT0FBOUIsR0FBdUMsT0FBdkMsQ0FEMkQ7QUFBQTtBQUFBLE1BQ3JFSSxNQURxRTs7QUFFNUUsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUsseURBQUw7QUFBQSwrQkFBZ0UsV0FBTUYsQ0FBTixFQUFXO0FBQUEsNEJBQ3pELGtDQUFpQixNQUFNRCxPQUFPRixPQUE5QixHQUF1QyxRQUF2QyxDQUR5RDtBQUFBO0FBQUEsTUFDbkVJLE1BRG1FOztBQUUxRSxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyw4REFBTDtBQUFBLCtCQUFxRSxXQUFNRixDQUFOLEVBQVc7QUFBQSw0QkFDOUQsa0NBQWlCLE1BQU1ELE9BQU9ELElBQTlCLEVBRDhEO0FBQUE7QUFBQSxNQUN4RUcsTUFEd0U7O0FBRS9FLE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHFEQUFMO0FBQUEsK0JBQTRELFdBQU1GLENBQU4sRUFBVztBQUFBLDRCQUNyRCxrQ0FBaUIsTUFBTUQsT0FBT0QsSUFBOUIsR0FBb0MsT0FBcEMsQ0FEcUQ7QUFBQTtBQUFBLE1BQy9ERyxNQUQrRDs7QUFFdEUsTUFBTUMsV0FBVyxLQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUsseURBQUw7QUFBQSwrQkFBZ0UsV0FBTUYsQ0FBTixFQUFXO0FBQUEsNEJBQ3pELGtDQUFpQixNQUFNRCxPQUFPRCxJQUE5QixHQUFvQyxRQUFwQyxDQUR5RDtBQUFBO0FBQUEsTUFDbkVHLE1BRG1FOztBQUUxRSxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiJib2R5LWxlYWRpbmctYmxhbmsudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi4vbGlicmFyeS9wYXJzZSc7XG5pbXBvcnQgYm9keUxlYWRpbmdCbGFuayBmcm9tICcuL2JvZHktbGVhZGluZy1ibGFuayc7XG5cbmNvbnN0IG1lc3NhZ2VzID0ge1xuXHRzaW1wbGU6ICdjaG9yZTogc3ViamVjdCcsXG5cdHdpdGhvdXQ6ICdjaG9yZTogc3ViamVjdFxcbmJvZHknLFxuXHR3aXRoOiAnY2hvcmU6IHN1YmplY3RcXG5cXG5ib2R5J1xufTtcblxuY29uc3QgcGFyc2VkID0ge1xuXHRzaW1wbGU6IHBhcnNlKG1lc3NhZ2VzLnNpbXBsZSksXG5cdHdpdGhvdXQ6IHBhcnNlKG1lc3NhZ2VzLndpdGhvdXQpLFxuXHR3aXRoOiBwYXJzZShtZXNzYWdlcy53aXRoKVxufTtcblxudGVzdCgnd2l0aCBzaW1wbGUgbWVzc2FnZSBzaG91bGQgc3VjY2VlZCBmb3IgZW1wdHkga2V5d29yZCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGJvZHlMZWFkaW5nQmxhbmsoYXdhaXQgcGFyc2VkLnNpbXBsZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd3aXRoIHNpbXBsZSBtZXNzYWdlIHNob3VsZCBzdWNjZWVkIGZvciBcIm5ldmVyXCInLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBib2R5TGVhZGluZ0JsYW5rKGF3YWl0IHBhcnNlZC5zaW1wbGUsICduZXZlcicpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBzaW1wbGUgbWVzc2FnZSBzaG91bGQgc3VjY2VlZCBmb3IgXCJhbHdheXNcIicsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGJvZHlMZWFkaW5nQmxhbmsoYXdhaXQgcGFyc2VkLnNpbXBsZSwgJ2Fsd2F5cycpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aG91dCBibGFuayBsaW5lIGJlZm9yZSBib2R5IHNob3VsZCBmYWlsIGZvciBlbXB0eSBrZXl3b3JkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gYm9keUxlYWRpbmdCbGFuayhhd2FpdCBwYXJzZWQud2l0aG91dCk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aG91dCBibGFuayBsaW5lIGJlZm9yZSBib2R5IHNob3VsZCBzdWNjZWVkIGZvciBcIm5ldmVyXCInLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBib2R5TGVhZGluZ0JsYW5rKGF3YWl0IHBhcnNlZC53aXRob3V0LCAnbmV2ZXInKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGhvdXQgYmxhbmsgbGluZSBiZWZvcmUgYm9keSBzaG91bGQgZmFpbCBmb3IgXCJhbHdheXNcIicsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGJvZHlMZWFkaW5nQmxhbmsoYXdhaXQgcGFyc2VkLndpdGhvdXQsICdhbHdheXMnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBmYWxzZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd3aXRoIGJsYW5rIGxpbmUgYmVmb3JlIGJvZHkgc2hvdWxkIHN1Y2NlZWQgZm9yIGVtcHR5IGtleXdvcmQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBib2R5TGVhZGluZ0JsYW5rKGF3YWl0IHBhcnNlZC53aXRoKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggYmxhbmsgbGluZSBiZWZvcmUgYm9keSBzaG91bGQgZmFpbCBmb3IgXCJuZXZlclwiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gYm9keUxlYWRpbmdCbGFuayhhd2FpdCBwYXJzZWQud2l0aCwgJ25ldmVyJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBibGFuayBsaW5lIGJlZm9yZSBib2R5IHNob3VsZCBzdWNjZWVkIGZvciBcImFsd2F5c1wiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gYm9keUxlYWRpbmdCbGFuayhhd2FpdCBwYXJzZWQud2l0aCwgJ2Fsd2F5cycpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcbiJdfQ==