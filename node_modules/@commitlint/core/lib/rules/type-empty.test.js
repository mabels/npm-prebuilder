'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _typeEmpty13 = require('./type-empty');

var _typeEmpty14 = _interopRequireDefault(_typeEmpty13);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	empty: '(scope):',
	filled: 'type: subject'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	filled: (0, _parse2.default)(messages.filled)
};

(0, _ava2.default)('without type should succeed for empty keyword', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _typeEmpty = (0, _typeEmpty14.default)((yield parsed.empty)),
		    _typeEmpty2 = _slicedToArray(_typeEmpty, 1),
		    actual = _typeEmpty2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('without type should fail for "never"', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _typeEmpty3 = (0, _typeEmpty14.default)((yield parsed.empty), 'never'),
		    _typeEmpty4 = _slicedToArray(_typeEmpty3, 1),
		    actual = _typeEmpty4[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('without type should succeed for "always"', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _typeEmpty5 = (0, _typeEmpty14.default)((yield parsed.empty), 'always'),
		    _typeEmpty6 = _slicedToArray(_typeEmpty5, 1),
		    actual = _typeEmpty6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with type fail for empty keyword', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _typeEmpty7 = (0, _typeEmpty14.default)((yield parsed.filled)),
		    _typeEmpty8 = _slicedToArray(_typeEmpty7, 1),
		    actual = _typeEmpty8[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('with type succeed for "never"', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _typeEmpty9 = (0, _typeEmpty14.default)((yield parsed.filled), 'never'),
		    _typeEmpty10 = _slicedToArray(_typeEmpty9, 1),
		    actual = _typeEmpty10[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('with type fail for "always"', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _typeEmpty11 = (0, _typeEmpty14.default)((yield parsed.filled), 'always'),
		    _typeEmpty12 = _slicedToArray(_typeEmpty11, 1),
		    actual = _typeEmpty12[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy90eXBlLWVtcHR5LnRlc3QuanMiXSwibmFtZXMiOlsibWVzc2FnZXMiLCJlbXB0eSIsImZpbGxlZCIsInBhcnNlZCIsInQiLCJhY3R1YWwiLCJleHBlY3RlZCIsImlzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLFdBQVc7QUFDaEJDLFFBQU8sVUFEUztBQUVoQkMsU0FBUTtBQUZRLENBQWpCOztBQUtBLElBQU1DLFNBQVM7QUFDZEYsUUFBTyxxQkFBTUQsU0FBU0MsS0FBZixDQURPO0FBRWRDLFNBQVEscUJBQU1GLFNBQVNFLE1BQWY7QUFGTSxDQUFmOztBQUtBLG1CQUFLLCtDQUFMO0FBQUEsOEJBQXNELFdBQU1FLENBQU4sRUFBVztBQUFBLG1CQUMvQywyQkFBVSxNQUFNRCxPQUFPRixLQUF2QixFQUQrQztBQUFBO0FBQUEsTUFDekRJLE1BRHlEOztBQUVoRSxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyxzQ0FBTDtBQUFBLCtCQUE2QyxXQUFNRixDQUFOLEVBQVc7QUFBQSxvQkFDdEMsMkJBQVUsTUFBTUQsT0FBT0YsS0FBdkIsR0FBOEIsT0FBOUIsQ0FEc0M7QUFBQTtBQUFBLE1BQ2hESSxNQURnRDs7QUFFdkQsTUFBTUMsV0FBVyxLQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssMENBQUw7QUFBQSwrQkFBaUQsV0FBTUYsQ0FBTixFQUFXO0FBQUEsb0JBQzFDLDJCQUFVLE1BQU1ELE9BQU9GLEtBQXZCLEdBQThCLFFBQTlCLENBRDBDO0FBQUE7QUFBQSxNQUNwREksTUFEb0Q7O0FBRTNELE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLGtDQUFMO0FBQUEsK0JBQXlDLFdBQU1GLENBQU4sRUFBVztBQUFBLG9CQUNsQywyQkFBVSxNQUFNRCxPQUFPRCxNQUF2QixFQURrQztBQUFBO0FBQUEsTUFDNUNHLE1BRDRDOztBQUVuRCxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSywrQkFBTDtBQUFBLCtCQUFzQyxXQUFNRixDQUFOLEVBQVc7QUFBQSxvQkFDL0IsMkJBQVUsTUFBTUQsT0FBT0QsTUFBdkIsR0FBK0IsT0FBL0IsQ0FEK0I7QUFBQTtBQUFBLE1BQ3pDRyxNQUR5Qzs7QUFFaEQsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssNkJBQUw7QUFBQSwrQkFBb0MsV0FBTUYsQ0FBTixFQUFXO0FBQUEscUJBQzdCLDJCQUFVLE1BQU1ELE9BQU9ELE1BQXZCLEdBQStCLFFBQS9CLENBRDZCO0FBQUE7QUFBQSxNQUN2Q0csTUFEdUM7O0FBRTlDLE1BQU1DLFdBQVcsS0FBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6InR5cGUtZW1wdHkudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi4vbGlicmFyeS9wYXJzZSc7XG5pbXBvcnQgdHlwZUVtcHR5IGZyb20gJy4vdHlwZS1lbXB0eSc7XG5cbmNvbnN0IG1lc3NhZ2VzID0ge1xuXHRlbXB0eTogJyhzY29wZSk6Jyxcblx0ZmlsbGVkOiAndHlwZTogc3ViamVjdCdcbn07XG5cbmNvbnN0IHBhcnNlZCA9IHtcblx0ZW1wdHk6IHBhcnNlKG1lc3NhZ2VzLmVtcHR5KSxcblx0ZmlsbGVkOiBwYXJzZShtZXNzYWdlcy5maWxsZWQpXG59O1xuXG50ZXN0KCd3aXRob3V0IHR5cGUgc2hvdWxkIHN1Y2NlZWQgZm9yIGVtcHR5IGtleXdvcmQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSB0eXBlRW1wdHkoYXdhaXQgcGFyc2VkLmVtcHR5KTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGhvdXQgdHlwZSBzaG91bGQgZmFpbCBmb3IgXCJuZXZlclwiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gdHlwZUVtcHR5KGF3YWl0IHBhcnNlZC5lbXB0eSwgJ25ldmVyJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aG91dCB0eXBlIHNob3VsZCBzdWNjZWVkIGZvciBcImFsd2F5c1wiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gdHlwZUVtcHR5KGF3YWl0IHBhcnNlZC5lbXB0eSwgJ2Fsd2F5cycpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCB0eXBlIGZhaWwgZm9yIGVtcHR5IGtleXdvcmQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSB0eXBlRW1wdHkoYXdhaXQgcGFyc2VkLmZpbGxlZCk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCB0eXBlIHN1Y2NlZWQgZm9yIFwibmV2ZXJcIicsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IHR5cGVFbXB0eShhd2FpdCBwYXJzZWQuZmlsbGVkLCAnbmV2ZXInKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggdHlwZSBmYWlsIGZvciBcImFsd2F5c1wiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gdHlwZUVtcHR5KGF3YWl0IHBhcnNlZC5maWxsZWQsICdhbHdheXMnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBmYWxzZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuIl19