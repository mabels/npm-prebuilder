'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _footerLeadingBlank41 = require('./footer-leading-blank');

var _footerLeadingBlank42 = _interopRequireDefault(_footerLeadingBlank41);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	simple: 'chore: subject',
	body: 'chore: subject\nbody',
	trailing: 'chore: subject\nbody\n\n',
	without: 'chore: subject\nbody\nBREAKING CHANGE: something important',
	withoutBody: 'feat(new-parser): introduces a new parsing library\n\nBREAKING CHANGE: new library does not support foo-construct',
	with: 'chore: subject\nbody\n\nBREAKING CHANGE: something important',
	withMulitLine: 'chore: subject\nmulti\nline\nbody\n\nBREAKING CHANGE: something important'
};

var parsed = {
	simple: (0, _parse2.default)(messages.simple),
	body: (0, _parse2.default)(messages.body),
	trailing: (0, _parse2.default)(messages.trailing),
	without: (0, _parse2.default)(messages.without),
	withoutBody: (0, _parse2.default)(messages.withoutBody),
	with: (0, _parse2.default)(messages.with),
	withMulitLine: (0, _parse2.default)(messages.withMulitLine)
};

(0, _ava2.default)('with simple message should succeed for empty keyword', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank = (0, _footerLeadingBlank42.default)((yield parsed.simple)),
		    _footerLeadingBlank2 = _slicedToArray(_footerLeadingBlank, 1),
		    actual = _footerLeadingBlank2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with simple message should succeed for "never"', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank3 = (0, _footerLeadingBlank42.default)((yield parsed.simple), 'never'),
		    _footerLeadingBlank4 = _slicedToArray(_footerLeadingBlank3, 1),
		    actual = _footerLeadingBlank4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with simple message should succeed for "always"', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank5 = (0, _footerLeadingBlank42.default)((yield parsed.simple), 'always'),
		    _footerLeadingBlank6 = _slicedToArray(_footerLeadingBlank5, 1),
		    actual = _footerLeadingBlank6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with body message should succeed for empty keyword', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank7 = (0, _footerLeadingBlank42.default)((yield parsed.body)),
		    _footerLeadingBlank8 = _slicedToArray(_footerLeadingBlank7, 1),
		    actual = _footerLeadingBlank8[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('with body message should succeed for "never"', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank9 = (0, _footerLeadingBlank42.default)((yield parsed.body), 'never'),
		    _footerLeadingBlank10 = _slicedToArray(_footerLeadingBlank9, 1),
		    actual = _footerLeadingBlank10[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('with body message should succeed for "always"', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank11 = (0, _footerLeadingBlank42.default)((yield parsed.body), 'always'),
		    _footerLeadingBlank12 = _slicedToArray(_footerLeadingBlank11, 1),
		    actual = _footerLeadingBlank12[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('with trailing message should succeed for empty keyword', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank13 = (0, _footerLeadingBlank42.default)((yield parsed.trailing)),
		    _footerLeadingBlank14 = _slicedToArray(_footerLeadingBlank13, 1),
		    actual = _footerLeadingBlank14[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('with trailing message should succeed for "never"', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank15 = (0, _footerLeadingBlank42.default)((yield parsed.trailing), 'never'),
		    _footerLeadingBlank16 = _slicedToArray(_footerLeadingBlank15, 1),
		    actual = _footerLeadingBlank16[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('with trailing message should succeed for "always"', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank17 = (0, _footerLeadingBlank42.default)((yield parsed.trailing), 'always'),
		    _footerLeadingBlank18 = _slicedToArray(_footerLeadingBlank17, 1),
		    actual = _footerLeadingBlank18[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());

(0, _ava2.default)('without body should fail for "never"', function () {
	var _ref10 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank19 = (0, _footerLeadingBlank42.default)((yield parsed.withoutBody), 'never'),
		    _footerLeadingBlank20 = _slicedToArray(_footerLeadingBlank19, 1),
		    actual = _footerLeadingBlank20[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x10) {
		return _ref10.apply(this, arguments);
	};
}());

(0, _ava2.default)('without body should succeed for "always"', function () {
	var _ref11 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank21 = (0, _footerLeadingBlank42.default)((yield parsed.withoutBody), 'always'),
		    _footerLeadingBlank22 = _slicedToArray(_footerLeadingBlank21, 1),
		    actual = _footerLeadingBlank22[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x11) {
		return _ref11.apply(this, arguments);
	};
}());

(0, _ava2.default)('without blank line before footer should fail for empty keyword', function () {
	var _ref12 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank23 = (0, _footerLeadingBlank42.default)((yield parsed.without)),
		    _footerLeadingBlank24 = _slicedToArray(_footerLeadingBlank23, 1),
		    actual = _footerLeadingBlank24[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x12) {
		return _ref12.apply(this, arguments);
	};
}());

(0, _ava2.default)('without blank line before footer should succeed for "never"', function () {
	var _ref13 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank25 = (0, _footerLeadingBlank42.default)((yield parsed.without), 'never'),
		    _footerLeadingBlank26 = _slicedToArray(_footerLeadingBlank25, 1),
		    actual = _footerLeadingBlank26[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x13) {
		return _ref13.apply(this, arguments);
	};
}());

(0, _ava2.default)('without blank line before footer should fail for "always"', function () {
	var _ref14 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank27 = (0, _footerLeadingBlank42.default)((yield parsed.without), 'always'),
		    _footerLeadingBlank28 = _slicedToArray(_footerLeadingBlank27, 1),
		    actual = _footerLeadingBlank28[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x14) {
		return _ref14.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before footer should succeed for empty keyword', function () {
	var _ref15 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank29 = (0, _footerLeadingBlank42.default)((yield parsed.with)),
		    _footerLeadingBlank30 = _slicedToArray(_footerLeadingBlank29, 1),
		    actual = _footerLeadingBlank30[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x15) {
		return _ref15.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before footer should fail for "never"', function () {
	var _ref16 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank31 = (0, _footerLeadingBlank42.default)((yield parsed.with), 'never'),
		    _footerLeadingBlank32 = _slicedToArray(_footerLeadingBlank31, 1),
		    actual = _footerLeadingBlank32[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x16) {
		return _ref16.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before footer should succeed for "always"', function () {
	var _ref17 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank33 = (0, _footerLeadingBlank42.default)((yield parsed.with), 'always'),
		    _footerLeadingBlank34 = _slicedToArray(_footerLeadingBlank33, 1),
		    actual = _footerLeadingBlank34[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x17) {
		return _ref17.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before footer and multiline body should succeed for empty keyword', function () {
	var _ref18 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank35 = (0, _footerLeadingBlank42.default)((yield parsed.withMulitLine)),
		    _footerLeadingBlank36 = _slicedToArray(_footerLeadingBlank35, 1),
		    actual = _footerLeadingBlank36[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x18) {
		return _ref18.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before footer and multiline body should fail for "never"', function () {
	var _ref19 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank37 = (0, _footerLeadingBlank42.default)((yield parsed.withMulitLine), 'never'),
		    _footerLeadingBlank38 = _slicedToArray(_footerLeadingBlank37, 1),
		    actual = _footerLeadingBlank38[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x19) {
		return _ref19.apply(this, arguments);
	};
}());

(0, _ava2.default)('with blank line before footer and multiline body should succeed for "always"', function () {
	var _ref20 = _asyncToGenerator(function* (t) {
		var _footerLeadingBlank39 = (0, _footerLeadingBlank42.default)((yield parsed.withMulitLine), 'always'),
		    _footerLeadingBlank40 = _slicedToArray(_footerLeadingBlank39, 1),
		    actual = _footerLeadingBlank40[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x20) {
		return _ref20.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,