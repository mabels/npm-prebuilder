'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _headerMinLength = require('./header-min-length');

var _headerMinLength2 = _interopRequireDefault(_headerMinLength);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var short = 'BREAKING CHANGE: a';
var long = 'BREAKING CHANGE: ab';

var value = long.length;

var messages = {
	short,
	long
};

var parsed = {
	short: (0, _parse2.default)(messages.short),
	long: (0, _parse2.default)(messages.long)
};

(0, _ava2.default)('with short should fail', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _headerMinLength2.default)((yield parsed.short), '', value),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with long should succeed', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _headerMinLength2.default)((yield parsed.long), '', value),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9oZWFkZXItbWluLWxlbmd0aC50ZXN0LmpzIl0sIm5hbWVzIjpbInNob3J0IiwibG9uZyIsInZhbHVlIiwibGVuZ3RoIiwibWVzc2FnZXMiLCJwYXJzZWQiLCJ0IiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLG9CQUFkO0FBQ0EsSUFBTUMsT0FBTyxxQkFBYjs7QUFFQSxJQUFNQyxRQUFRRCxLQUFLRSxNQUFuQjs7QUFFQSxJQUFNQyxXQUFXO0FBQ2hCSixNQURnQjtBQUVoQkM7QUFGZ0IsQ0FBakI7O0FBS0EsSUFBTUksU0FBUztBQUNkTCxRQUFPLHFCQUFNSSxTQUFTSixLQUFmLENBRE87QUFFZEMsT0FBTSxxQkFBTUcsU0FBU0gsSUFBZjtBQUZRLENBQWY7O0FBS0EsbUJBQUssd0JBQUw7QUFBQSw4QkFBK0IsV0FBTUssQ0FBTixFQUFXO0FBQUEsZUFDeEIsZ0NBQU0sTUFBTUQsT0FBT0wsS0FBbkIsR0FBMEIsRUFBMUIsRUFBOEJFLEtBQTlCLENBRHdCO0FBQUE7QUFBQSxNQUNsQ0ssTUFEa0M7O0FBRXpDLE1BQU1DLFdBQVcsS0FBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLDBCQUFMO0FBQUEsK0JBQWlDLFdBQU1GLENBQU4sRUFBVztBQUFBLGdCQUMxQixnQ0FBTSxNQUFNRCxPQUFPSixJQUFuQixHQUF5QixFQUF6QixFQUE2QkMsS0FBN0IsQ0FEMEI7QUFBQTtBQUFBLE1BQ3BDSyxNQURvQzs7QUFFM0MsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiaGVhZGVyLW1pbi1sZW5ndGgudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ2F2YSc7XG5pbXBvcnQgcGFyc2UgZnJvbSAnLi4vbGlicmFyeS9wYXJzZSc7XG5pbXBvcnQgY2hlY2sgZnJvbSAnLi9oZWFkZXItbWluLWxlbmd0aCc7XG5cbmNvbnN0IHNob3J0ID0gJ0JSRUFLSU5HIENIQU5HRTogYSc7XG5jb25zdCBsb25nID0gJ0JSRUFLSU5HIENIQU5HRTogYWInO1xuXG5jb25zdCB2YWx1ZSA9IGxvbmcubGVuZ3RoO1xuXG5jb25zdCBtZXNzYWdlcyA9IHtcblx0c2hvcnQsXG5cdGxvbmdcbn07XG5cbmNvbnN0IHBhcnNlZCA9IHtcblx0c2hvcnQ6IHBhcnNlKG1lc3NhZ2VzLnNob3J0KSxcblx0bG9uZzogcGFyc2UobWVzc2FnZXMubG9uZylcbn07XG5cbnRlc3QoJ3dpdGggc2hvcnQgc2hvdWxkIGZhaWwnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuc2hvcnQsICcnLCB2YWx1ZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBsb25nIHNob3VsZCBzdWNjZWVkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmxvbmcsICcnLCB2YWx1ZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuIl19