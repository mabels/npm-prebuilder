'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _lang = require('./lang');

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	empty: '(): \n',
	eng: '(): this is a serious subject',
	deu: '(): Dies ist ein ernstes Subjekt'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	eng: (0, _parse2.default)(messages.eng),
	deu: (0, _parse2.default)(messages.deu)
};

(0, _ava2.default)('empty succeeds', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _lang2.default)((yield parsed.eng), '', 'eng'),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('english against "eng" succeeds', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _lang2.default)((yield parsed.eng), '', 'eng'),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('english against "always eng" succeeds', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _check5 = (0, _lang2.default)((yield parsed.eng), 'always', 'eng'),
		    _check6 = _slicedToArray(_check5, 1),
		    actual = _check6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('english against "never eng" fails', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _check7 = (0, _lang2.default)((yield parsed.eng), 'never', 'eng'),
		    _check8 = _slicedToArray(_check7, 1),
		    actual = _check8[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('english against "deu" fails', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _check9 = (0, _lang2.default)((yield parsed.eng), '', 'deu+'),
		    _check10 = _slicedToArray(_check9, 1),
		    actual = _check10[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('english against "always deu" fails', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _check11 = (0, _lang2.default)((yield parsed.eng), 'always', 'deu'),
		    _check12 = _slicedToArray(_check11, 1),
		    actual = _check12[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('english against "never deu" succeeds', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _check13 = (0, _lang2.default)((yield parsed.eng), 'never', 'deu'),
		    _check14 = _slicedToArray(_check13, 1),
		    actual = _check14[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('german against "deu" succeeds', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _check15 = (0, _lang2.default)((yield parsed.deu), '', 'deu'),
		    _check16 = _slicedToArray(_check15, 1),
		    actual = _check16[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('german against "always deu" succeeds', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _check17 = (0, _lang2.default)((yield parsed.deu), 'always', 'deu'),
		    _check18 = _slicedToArray(_check17, 1),
		    actual = _check18[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());

(0, _ava2.default)('german against "never deu" fails', function () {
	var _ref10 = _asyncToGenerator(function* (t) {
		var _check19 = (0, _lang2.default)((yield parsed.deu), 'never', 'deu'),
		    _check20 = _slicedToArray(_check19, 1),
		    actual = _check20[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x10) {
		return _ref10.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9sYW5nLnRlc3QuanMiXSwibmFtZXMiOlsibWVzc2FnZXMiLCJlbXB0eSIsImVuZyIsImRldSIsInBhcnNlZCIsInQiLCJhY3R1YWwiLCJleHBlY3RlZCIsImlzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLFdBQVc7QUFDaEJDLFFBQU8sUUFEUztBQUVoQkMsTUFBSywrQkFGVztBQUdoQkMsTUFBSztBQUhXLENBQWpCOztBQU1BLElBQU1DLFNBQVM7QUFDZEgsUUFBTyxxQkFBTUQsU0FBU0MsS0FBZixDQURPO0FBRWRDLE1BQUsscUJBQU1GLFNBQVNFLEdBQWYsQ0FGUztBQUdkQyxNQUFLLHFCQUFNSCxTQUFTRyxHQUFmO0FBSFMsQ0FBZjs7QUFNQSxtQkFBSyxnQkFBTDtBQUFBLDhCQUF1QixXQUFNRSxDQUFOLEVBQVc7QUFBQSxlQUNoQixxQkFBTSxNQUFNRCxPQUFPRixHQUFuQixHQUF3QixFQUF4QixFQUE0QixLQUE1QixDQURnQjtBQUFBO0FBQUEsTUFDMUJJLE1BRDBCOztBQUVqQyxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyxnQ0FBTDtBQUFBLCtCQUF1QyxXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDaEMscUJBQU0sTUFBTUQsT0FBT0YsR0FBbkIsR0FBd0IsRUFBeEIsRUFBNEIsS0FBNUIsQ0FEZ0M7QUFBQTtBQUFBLE1BQzFDSSxNQUQwQzs7QUFFakQsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssdUNBQUw7QUFBQSwrQkFBOEMsV0FBTUYsQ0FBTixFQUFXO0FBQUEsZ0JBQ3ZDLHFCQUFNLE1B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dGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4uL2xpYnJhcnkvcGFyc2UnO1xuaW1wb3J0IGNoZWNrIGZyb20gJy4vbGFuZyc7XG5cbmNvbnN0IG1lc3NhZ2VzID0ge1xuXHRlbXB0eTogJygpOiBcXG4nLFxuXHRlbmc6ICcoKTogdGhpcyBpcyBhIHNlcmlvdXMgc3ViamVjdCcsXG5cdGRldTogJygpOiBEaWVzIGlzdCBlaW4gZXJuc3RlcyBTdWJqZWt0J1xufTtcblxuY29uc3QgcGFyc2VkID0ge1xuXHRlbXB0eTogcGFyc2UobWVzc2FnZXMuZW1wdHkpLFxuXHRlbmc6IHBhcnNlKG1lc3NhZ2VzLmVuZyksXG5cdGRldTogcGFyc2UobWVzc2FnZXMuZGV1KVxufTtcblxudGVzdCgnZW1wdHkgc3VjY2VlZHMnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuZW5nLCAnJywgJ2VuZycpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnZW5nbGlzaCBhZ2FpbnN0IFwiZW5nXCIgc3VjY2VlZHMnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuZW5nLCAnJywgJ2VuZycpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnZW5nbGlzaCBhZ2FpbnN0IFwiYWx3YXlzIGVuZ1wiIHN1Y2NlZWRzJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmVuZywgJ2Fsd2F5cycsICdlbmcnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ2VuZ2xpc2ggYWdhaW5zdCBcIm5ldmVyIGVuZ1wiIGZhaWxzJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmVuZywgJ25ldmVyJywgJ2VuZycpO1xuXHRjb25zdCBleHBlY3RlZCA9IGZhbHNlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ2VuZ2xpc2ggYWdhaW5zdCBcImRldVwiIGZhaWxzJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmVuZywgJycsICdkZXUrJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnZW5nbGlzaCBhZ2FpbnN0IFwiYWx3YXlzIGRldVwiIGZhaWxzJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmVuZywgJ2Fsd2F5cycsICdkZXUnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBmYWxzZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCdlbmdsaXNoIGFnYWluc3QgXCJuZXZlciBkZXVcIiBzdWNjZWVkcycsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC5lbmcsICduZXZlcicsICdkZXUnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ2dlcm1hbiBhZ2FpbnN0IFwiZGV1XCIgc3VjY2VlZHMnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuZGV1LCAnJywgJ2RldScpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnZ2VybWFuIGFnYWluc3QgXCJhbHdheXMgZGV1XCIgc3VjY2VlZHMnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuZGV1LCAnYWx3YXlzJywgJ2RldScpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnZ2VybWFuIGFnYWluc3QgXCJuZXZlciBkZXVcIiBmYWlscycsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC5kZXUsICduZXZlcicsICdkZXUnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBmYWxzZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuIl19