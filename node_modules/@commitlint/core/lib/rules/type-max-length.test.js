'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _typeMaxLength = require('./type-max-length');

var _typeMaxLength2 = _interopRequireDefault(_typeMaxLength);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var short = 'a';
var long = 'ab';

var value = short.length;

var messages = {
	empty: '():\n',
	short: `${short}: \n`,
	long: `${long}: \n`
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	short: (0, _parse2.default)(messages.short),
	long: (0, _parse2.default)(messages.long)
};

(0, _ava2.default)('with empty should succeed', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _typeMaxLength2.default)((yield parsed.empty), '', value),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with short should succeed', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _typeMaxLength2.default)((yield parsed.short), '', value),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with long should fail', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _check5 = (0, _typeMaxLength2.default)((yield parsed.long), '', value),
		    _check6 = _slicedToArray(_check5, 1),
		    actual = _check6[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy90eXBlLW1heC1sZW5ndGgudGVzdC5qcyJdLCJuYW1lcyI6WyJzaG9ydCIsImxvbmciLCJ2YWx1ZSIsImxlbmd0aCIsIm1lc3NhZ2VzIiwiZW1wdHkiLCJwYXJzZWQiLCJ0IiwiYWN0dWFsIiwiZXhwZWN0ZWQiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFFQSxJQUFNQSxRQUFRLEdBQWQ7QUFDQSxJQUFNQyxPQUFPLElBQWI7O0FBRUEsSUFBTUMsUUFBUUYsTUFBTUcsTUFBcEI7O0FBRUEsSUFBTUMsV0FBVztBQUNoQkMsUUFBTyxPQURTO0FBRWhCTCxRQUFRLEdBQUVBLEtBQU0sTUFGQTtBQUdoQkMsT0FBTyxHQUFFQSxJQUFLO0FBSEUsQ0FBakI7O0FBTUEsSUFBTUssU0FBUztBQUNkRCxRQUFPLHFCQUFNRCxTQUFTQyxLQUFmLENBRE87QUFFZEwsUUFBTyxxQkFBTUksU0FBU0osS0FBZixDQUZPO0FBR2RDLE9BQU0scUJBQU1HLFNBQVNILElBQWY7QUFIUSxDQUFmOztBQU1BLG1CQUFLLDJCQUFMO0FBQUEsOEJBQWtDLFdBQU1NLENBQU4sRUFBVztBQUFBLGVBQzNCLDhCQUFNLE1BQU1ELE9BQU9ELEtBQW5CLEdBQTBCLEVBQTFCLEVBQThCSCxLQUE5QixDQUQyQjtBQUFBO0FBQUEsTUFDckNNLE1BRHFDOztBQUU1QyxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSywyQkFBTDtBQUFBLCtCQUFrQyxXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDM0IsOEJBQU0sTUFBTUQsT0FBT04sS0FBbkIsR0FBMEIsRUFBMUIsRUFBOEJFLEtBQTlCLENBRDJCO0FBQUE7QUFBQSxNQUNyQ00sTUFEcUM7O0FBRTVDLE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHVCQUFMO0FBQUEsK0JBQThCLFdBQU1GLENBQU4sRUFBVztBQUFBLGdCQUN2Qiw4QkFBTSxNQUFNRCxPQUFPTCxJQUFuQixHQUF5QixFQUF6QixFQUE2QkMsS0FBN0IsQ0FEdUI7QUFBQTtBQUFBLE1BQ2pDTSxNQURpQzs7QUFFeEMsTUFBTUMsV0FBVyxLQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoidHlwZS1tYXgtbGVuZ3RoLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4uL2xpYnJhcnkvcGFyc2UnO1xuaW1wb3J0IGNoZWNrIGZyb20gJy4vdHlwZS1tYXgtbGVuZ3RoJztcblxuY29uc3Qgc2hvcnQgPSAnYSc7XG5jb25zdCBsb25nID0gJ2FiJztcblxuY29uc3QgdmFsdWUgPSBzaG9ydC5sZW5ndGg7XG5cbmNvbnN0IG1lc3NhZ2VzID0ge1xuXHRlbXB0eTogJygpOlxcbicsXG5cdHNob3J0OiBgJHtzaG9ydH06IFxcbmAsXG5cdGxvbmc6IGAke2xvbmd9OiBcXG5gXG59O1xuXG5jb25zdCBwYXJzZWQgPSB7XG5cdGVtcHR5OiBwYXJzZShtZXNzYWdlcy5lbXB0eSksXG5cdHNob3J0OiBwYXJzZShtZXNzYWdlcy5zaG9ydCksXG5cdGxvbmc6IHBhcnNlKG1lc3NhZ2VzLmxvbmcpXG59O1xuXG50ZXN0KCd3aXRoIGVtcHR5IHNob3VsZCBzdWNjZWVkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmVtcHR5LCAnJywgdmFsdWUpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBzaG9ydCBzaG91bGQgc3VjY2VlZCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC5zaG9ydCwgJycsIHZhbHVlKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggbG9uZyBzaG91bGQgZmFpbCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC5sb25nLCAnJywgdmFsdWUpO1xuXHRjb25zdCBleHBlY3RlZCA9IGZhbHNlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG4iXX0=