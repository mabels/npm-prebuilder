'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _bodyMinLength = require('./body-min-length');

var _bodyMinLength2 = _interopRequireDefault(_bodyMinLength);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var short = 'a';
var long = 'ab';

var value = long.length;

var messages = {
	simple: 'chore: subject',
	short: `chore: subject\n${short}`,
	long: `chore: subject\n${long}`
};

var parsed = {
	simple: (0, _parse2.default)(messages.simple),
	short: (0, _parse2.default)(messages.short),
	long: (0, _parse2.default)(messages.long)
};

(0, _ava2.default)('with simple should succeed', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _bodyMinLength2.default)((yield parsed.simple), '', value),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with short should fail', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _bodyMinLength2.default)((yield parsed.short), '', value),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with long should succeed', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _check5 = (0, _bodyMinLength2.default)((yield parsed.long), '', value),
		    _check6 = _slicedToArray(_check5, 1),
		    actual = _check6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9ib2R5LW1pbi1sZW5ndGgudGVzdC5qcyJdLCJuYW1lcyI6WyJzaG9ydCIsImxvbmciLCJ2YWx1ZSIsImxlbmd0aCIsIm1lc3NhZ2VzIiwic2ltcGxlIiwicGFyc2VkIiwidCIsImFjdHVhbCIsImV4cGVjdGVkIiwiaXMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7Ozs7O0FBRUEsSUFBTUEsUUFBUSxHQUFkO0FBQ0EsSUFBTUMsT0FBTyxJQUFiOztBQUVBLElBQU1DLFFBQVFELEtBQUtFLE1BQW5COztBQUVBLElBQU1DLFdBQVc7QUFDaEJDLFNBQVEsZ0JBRFE7QUFFaEJMLFFBQVEsbUJBQWtCQSxLQUFNLEVBRmhCO0FBR2hCQyxPQUFPLG1CQUFrQkEsSUFBSztBQUhkLENBQWpCOztBQU1BLElBQU1LLFNBQVM7QUFDZEQsU0FBUSxxQkFBTUQsU0FBU0MsTUFBZixDQURNO0FBRWRMLFFBQU8scUJBQU1JLFNBQVNKLEtBQWYsQ0FGTztBQUdkQyxPQUFNLHFCQUFNRyxTQUFTSCxJQUFmO0FBSFEsQ0FBZjs7QUFNQSxtQkFBSyw0QkFBTDtBQUFBLDhCQUFtQyxXQUFNTSxDQUFOLEVBQVc7QUFBQSxlQUM1Qiw4QkFBTSxNQUFNRCxPQUFPRCxNQUFuQixHQUEyQixFQUEzQixFQUErQkgsS0FBL0IsQ0FENEI7QUFBQTtBQUFBLE1BQ3RDTSxNQURzQzs7QUFFN0MsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssd0JBQUw7QUFBQSwrQkFBK0IsV0FBTUYsQ0FBTixFQUFXO0FBQUEsZ0JBQ3hCLDhCQUFNLE1BQU1ELE9BQU9OLEtBQW5CLEdBQTBCLEVBQTFCLEVBQThCRSxLQUE5QixDQUR3QjtBQUFBO0FBQUEsTUFDbENNLE1BRGtDOztBQUV6QyxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSywwQkFBTDtBQUFBLCtCQUFpQyxXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDMUIsOEJBQU0sTUFBTUQsT0FBT0wsSUFBbkIsR0FBeUIsRUFBekIsRUFBNkJDLEtBQTdCLENBRDBCO0FBQUE7QUFBQSxNQUNwQ00sTUFEb0M7O0FBRTNDLE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6ImJvZHktbWluLWxlbmd0aC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnYXZhJztcbmltcG9ydCBwYXJzZSBmcm9tICcuLi9saWJyYXJ5L3BhcnNlJztcbmltcG9ydCBjaGVjayBmcm9tICcuL2JvZHktbWluLWxlbmd0aCc7XG5cbmNvbnN0IHNob3J0ID0gJ2EnO1xuY29uc3QgbG9uZyA9ICdhYic7XG5cbmNvbnN0IHZhbHVlID0gbG9uZy5sZW5ndGg7XG5cbmNvbnN0IG1lc3NhZ2VzID0ge1xuXHRzaW1wbGU6ICdjaG9yZTogc3ViamVjdCcsXG5cdHNob3J0OiBgY2hvcmU6IHN1YmplY3RcXG4ke3Nob3J0fWAsXG5cdGxvbmc6IGBjaG9yZTogc3ViamVjdFxcbiR7bG9uZ31gXG59O1xuXG5jb25zdCBwYXJzZWQgPSB7XG5cdHNpbXBsZTogcGFyc2UobWVzc2FnZXMuc2ltcGxlKSxcblx0c2hvcnQ6IHBhcnNlKG1lc3NhZ2VzLnNob3J0KSxcblx0bG9uZzogcGFyc2UobWVzc2FnZXMubG9uZylcbn07XG5cbnRlc3QoJ3dpdGggc2ltcGxlIHNob3VsZCBzdWNjZWVkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLnNpbXBsZSwgJycsIHZhbHVlKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggc2hvcnQgc2hvdWxkIGZhaWwnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuc2hvcnQsICcnLCB2YWx1ZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBsb25nIHNob3VsZCBzdWNjZWVkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmxvbmcsICcnLCB2YWx1ZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuIl19