'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _scopeEnum27 = require('./scope-enum');

var _scopeEnum28 = _interopRequireDefault(_scopeEnum27);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	plain: 'foo(bar): baz',
	superfluous: 'foo(): baz',
	empty: 'foo: baz'
};

var parsed = {
	plain: (0, _parse2.default)(messages.plain),
	superfluous: (0, _parse2.default)(messages.superfluous),
	empty: (0, _parse2.default)(messages.empty)
};

(0, _ava2.default)('scope-enum with plain message and always should succeed empty enum', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _scopeEnum = (0, _scopeEnum28.default)((yield parsed.plain), 'always', []),
		    _scopeEnum2 = _slicedToArray(_scopeEnum, 1),
		    actual = _scopeEnum2[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with plain message and never should error empty enum', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _scopeEnum3 = (0, _scopeEnum28.default)((yield parsed.plain), 'never', []),
		    _scopeEnum4 = _slicedToArray(_scopeEnum3, 1),
		    actual = _scopeEnum4[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with plain message should succeed correct enum', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _scopeEnum5 = (0, _scopeEnum28.default)((yield parsed.plain), 'always', ['bar']),
		    _scopeEnum6 = _slicedToArray(_scopeEnum5, 1),
		    actual = _scopeEnum6[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with plain message should error false enum', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _scopeEnum7 = (0, _scopeEnum28.default)((yield parsed.plain), 'always', ['foo']),
		    _scopeEnum8 = _slicedToArray(_scopeEnum7, 1),
		    actual = _scopeEnum8[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with plain message should error forbidden enum', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _scopeEnum9 = (0, _scopeEnum28.default)((yield parsed.plain), 'never', ['bar']),
		    _scopeEnum10 = _slicedToArray(_scopeEnum9, 1),
		    actual = _scopeEnum10[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with plain message should succeed forbidden enum', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _scopeEnum11 = (0, _scopeEnum28.default)((yield parsed.plain), 'never', ['foo']),
		    _scopeEnum12 = _slicedToArray(_scopeEnum11, 1),
		    actual = _scopeEnum12[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with superfluous scope should succeed enum', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _scopeEnum13 = (0, _scopeEnum28.default)((yield parsed.superfluous), 'always', ['bar']),
		    _scopeEnum14 = _slicedToArray(_scopeEnum13, 1),
		    actual = _scopeEnum14[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with superfluous scope and "never" should succeed', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _scopeEnum15 = (0, _scopeEnum28.default)((yield parsed.superfluous), 'never', ['bar']),
		    _scopeEnum16 = _slicedToArray(_scopeEnum15, 1),
		    actual = _scopeEnum16[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with superfluous scope and always should succeed empty enum', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _scopeEnum17 = (0, _scopeEnum28.default)((yield parsed.superfluous), 'always', []),
		    _scopeEnum18 = _slicedToArray(_scopeEnum17, 1),
		    actual = _scopeEnum18[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with superfluous scope and never should succeed empty enum', function () {
	var _ref10 = _asyncToGenerator(function* (t) {
		var _scopeEnum19 = (0, _scopeEnum28.default)((yield parsed.superfluous), 'never', []),
		    _scopeEnum20 = _slicedToArray(_scopeEnum19, 1),
		    actual = _scopeEnum20[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x10) {
		return _ref10.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with empty scope and always should succeed empty enum', function () {
	var _ref11 = _asyncToGenerator(function* (t) {
		var _scopeEnum21 = (0, _scopeEnum28.default)((yield parsed.superfluous), 'always', []),
		    _scopeEnum22 = _slicedToArray(_scopeEnum21, 1),
		    actual = _scopeEnum22[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x11) {
		return _ref11.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with empty scope and always should succeed filled enum', function () {
	var _ref12 = _asyncToGenerator(function* (t) {
		var _scopeEnum23 = (0, _scopeEnum28.default)((yield parsed.superfluous), 'always', ['foo']),
		    _scopeEnum24 = _slicedToArray(_scopeEnum23, 1),
		    actual = _scopeEnum24[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x12) {
		return _ref12.apply(this, arguments);
	};
}());

(0, _ava2.default)('scope-enum with empty scope and never should succeed empty enum', function () {
	var _ref13 = _asyncToGenerator(function* (t) {
		var _scopeEnum25 = (0, _scopeEnum28.default)((yield parsed.superfluous), 'never', []),
		    _scopeEnum26 = _slicedToArray(_scopeEnum25, 1),
		    actual = _scopeEnum26[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x13) {
		return _ref13.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,