'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _scopeEmpty19 = require('./scope-empty');

var _scopeEmpty20 = _interopRequireDefault(_scopeEmpty19);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	plain: 'foo(bar): baz',
	superfluous: 'foo(): baz',
	empty: 'foo: baz'
};

var parsed = {
	plain: (0, _parse2.default)(messages.plain),
	superfluous: (0, _parse2.default)(messages.superfluous),
	empty: (0, _parse2.default)(messages.empty)
};

(0, _ava2.default)('with plain message it should succeed for empty keyword', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _scopeEmpty = (0, _scopeEmpty20.default)((yield parsed.plain)),
		    _scopeEmpty2 = _slicedToArray(_scopeEmpty, 1),
		    actual = _scopeEmpty2[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with plain message it should succeed for "never"', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _scopeEmpty3 = (0, _scopeEmpty20.default)((yield parsed.plain), 'never'),
		    _scopeEmpty4 = _slicedToArray(_scopeEmpty3, 1),
		    actual = _scopeEmpty4[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with plain message it should fail for "always"', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _scopeEmpty5 = (0, _scopeEmpty20.default)((yield parsed.plain), 'always'),
		    _scopeEmpty6 = _slicedToArray(_scopeEmpty5, 1),
		    actual = _scopeEmpty6[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with superfluous message it should fail for empty keyword', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _scopeEmpty7 = (0, _scopeEmpty20.default)((yield parsed.superfluous)),
		    _scopeEmpty8 = _slicedToArray(_scopeEmpty7, 1),
		    actual = _scopeEmpty8[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('with superfluous message it should fail for "never"', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _scopeEmpty9 = (0, _scopeEmpty20.default)((yield parsed.superfluous), 'never'),
		    _scopeEmpty10 = _slicedToArray(_scopeEmpty9, 1),
		    actual = _scopeEmpty10[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('with superfluous message it should fail for "always"', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _scopeEmpty11 = (0, _scopeEmpty20.default)((yield parsed.superfluous), 'always'),
		    _scopeEmpty12 = _slicedToArray(_scopeEmpty11, 1),
		    actual = _scopeEmpty12[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('with empty message it should fail for empty keyword', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _scopeEmpty13 = (0, _scopeEmpty20.default)((yield parsed.empty)),
		    _scopeEmpty14 = _slicedToArray(_scopeEmpty13, 1),
		    actual = _scopeEmpty14[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('with empty message it should fail for "never"', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _scopeEmpty15 = (0, _scopeEmpty20.default)((yield parsed.empty), 'never'),
		    _scopeEmpty16 = _slicedToArray(_scopeEmpty15, 1),
		    actual = _scopeEmpty16[0];

		var expected = false;
		t.deepEqual(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('with empty message it should fail for "always"', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _scopeEmpty17 = (0, _scopeEmpty20.default)((yield parsed.empty), 'always'),
		    _scopeEmpty18 = _slicedToArray(_scopeEmpty17, 1),
		    actual = _scopeEmpty18[0];

		var expected = true;
		t.deepEqual(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9zY29wZS1lbXB0eS50ZXN0LmpzIl0sIm5hbWVzIjpbIm1lc3NhZ2VzIiwicGxhaW4iLCJzdXBlcmZsdW91cyIsImVtcHR5IiwicGFyc2VkIiwidCIsImFjdHVhbCIsImV4cGVjdGVkIiwiZGVlcEVxdWFsIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLFdBQVc7QUFDaEJDLFFBQU8sZUFEUztBQUVoQkMsY0FBYSxZQUZHO0FBR2hCQyxRQUFPO0FBSFMsQ0FBakI7O0FBTUEsSUFBTUMsU0FBUztBQUNkSCxRQUFPLHFCQUFNRCxTQUFTQyxLQUFmLENBRE87QUFFZEMsY0FBYSxxQkFBTUYsU0FBU0UsV0FBZixDQUZDO0FBR2RDLFFBQU8scUJBQU1ILFNBQVNHLEtBQWY7QUFITyxDQUFmOztBQU1BLG1CQUFLLHdEQUFMO0FBQUEsOEJBQStELFdBQU1FLENBQU4sRUFBVztBQUFBLG9CQUN4RCw0QkFBVyxNQUFNRCxPQUFPSCxLQUF4QixFQUR3RDtBQUFBO0FBQUEsTUFDbEVLLE1BRGtFOztBQUV6RSxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLGtEQUFMO0FBQUEsK0JBQXlELFdBQU1GLENBQU4sRUFBVztBQUFBLHFCQUNsRCw0QkFBVyxNQUFNRCxPQUFPSCxLQUF4QixHQUErQixPQUEvQixDQURrRDtBQUFBO0FBQUEsTUFDNURLLE1BRDREOztBQUVuRSxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLGdEQUFMO0FBQUEsK0JBQXVELFdBQU1GLENBQU4sRUFBVztBQUFBLHFCQUNoRCw0QkFBVyxNQUFNRCxPQUFPSCxLQUF4QixHQUErQixRQUEvQixDQURnRDtBQUFBO0FBQUEsTUFDMURLLE1BRDBEOztBQUVqRSxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLDJEQUFMO0FBQUEsK0JBQWtFLFdBQU1GLENBQU4sRUFBVztBQUFBLHFCQUMzRCw0QkFBVyxNQUFNRCxPQUFPRixXQUF4QixFQUQyRDtBQUFBO0FBQUEsTUFDckVJLE1BRHFFOztBQUU1RSxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHFEQUFMO0FBQUEsK0JBQTRELFdBQU1GLENBQU4sRUFBVztBQUFBLHFCQUNyRCw0QkFBVyxNQUFNRCxPQUFPRixXQUF4QixHQUFxQyxPQUFyQyxDQURxRDtBQUFBO0FBQUEsTUFDL0RJLE1BRCtEOztBQUV0RSxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHNEQUFMO0FBQUEsK0JBQTZELFdBQU1GLENBQU4sRUFBVztBQUFBLHNCQUN0RCw0QkFBVyxNQUFNRCxPQUFPRixXQUF4QixHQUFxQyxRQUFyQyxDQURzRDtBQUFBO0FBQUEsTUFDaEVJLE1BRGdFOztBQUV2RSxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHFEQUFMO0FBQUEsK0JBQTRELFdBQU1GLENBQU4sRUFBVztBQUFBLHNCQUNyRCw0QkFBVyxNQUFNRCxPQUFPRCxLQUF4QixFQURxRDtBQUFBO0FBQUEsTUFDL0RHLE1BRCtEOztBQUV0RSxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLCtDQUFMO0FBQUEsK0JBQXNELFdBQU1GLENBQU4sRUFBVztBQUFBLHNCQUMvQyw0QkFBVyxNQUFNRCxPQUFPRCxLQUF4QixHQUErQixPQUEvQixDQUQrQztBQUFBO0FBQUEsTUFDekRHLE1BRHlEOztBQUVoRSxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLGdEQUFMO0FBQUEsK0JBQXVELFdBQU1GLENBQU4sRUFBVztBQUFBLHNCQUNoRCw0QkFBVyxNQUFNRCxPQUFPRCxLQUF4QixHQUErQixRQUEvQixDQURnRDtBQUFBO0FBQUEsTUFDMURHLE1BRDBEOztBQUVqRSxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLFNBQUYsQ0FBWUYsTUFBWixFQUFvQkMsUUFBcEI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6InNjb3BlLWVtcHR5LnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4uL2xpYnJhcnkvcGFyc2UnO1xuaW1wb3J0IHNjb3BlRW1wdHkgZnJvbSAnLi9zY29wZS1lbXB0eSc7XG5cbmNvbnN0IG1lc3NhZ2VzID0ge1xuXHRwbGFpbjogJ2ZvbyhiYXIpOiBiYXonLFxuXHRzdXBlcmZsdW91czogJ2ZvbygpOiBiYXonLFxuXHRlbXB0eTogJ2ZvbzogYmF6J1xufTtcblxuY29uc3QgcGFyc2VkID0ge1xuXHRwbGFpbjogcGFyc2UobWVzc2FnZXMucGxhaW4pLFxuXHRzdXBlcmZsdW91czogcGFyc2UobWVzc2FnZXMuc3VwZXJmbHVvdXMpLFxuXHRlbXB0eTogcGFyc2UobWVzc2FnZXMuZW1wdHkpXG59O1xuXG50ZXN0KCd3aXRoIHBsYWluIG1lc3NhZ2UgaXQgc2hvdWxkIHN1Y2NlZWQgZm9yIGVtcHR5IGtleXdvcmQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBzY29wZUVtcHR5KGF3YWl0IHBhcnNlZC5wbGFpbik7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBwbGFpbiBtZXNzYWdlIGl0IHNob3VsZCBzdWNjZWVkIGZvciBcIm5ldmVyXCInLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBzY29wZUVtcHR5KGF3YWl0IHBhcnNlZC5wbGFpbiwgJ25ldmVyJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBwbGFpbiBtZXNzYWdlIGl0IHNob3VsZCBmYWlsIGZvciBcImFsd2F5c1wiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gc2NvcGVFbXB0eShhd2FpdCBwYXJzZWQucGxhaW4sICdhbHdheXMnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBmYWxzZTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBzdXBlcmZsdW91cyBtZXNzYWdlIGl0IHNob3VsZCBmYWlsIGZvciBlbXB0eSBrZXl3b3JkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gc2NvcGVFbXB0eShhd2FpdCBwYXJzZWQuc3VwZXJmbHVvdXMpO1xuXHRjb25zdCBleHBlY3RlZCA9IGZhbHNlO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd3aXRoIHN1cGVyZmx1b3VzIG1lc3NhZ2UgaXQgc2hvdWxkIGZhaWwgZm9yIFwibmV2ZXJcIicsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IHNjb3BlRW1wdHkoYXdhaXQgcGFyc2VkLnN1cGVyZmx1b3VzLCAnbmV2ZXInKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBmYWxzZTtcblx0dC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBzdXBlcmZsdW91cyBtZXNzYWdlIGl0IHNob3VsZCBmYWlsIGZvciBcImFsd2F5c1wiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gc2NvcGVFbXB0eShhd2FpdCBwYXJzZWQuc3VwZXJmbHVvdXMsICdhbHdheXMnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd3aXRoIGVtcHR5IG1lc3NhZ2UgaXQgc2hvdWxkIGZhaWwgZm9yIGVtcHR5IGtleXdvcmQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBzY29wZUVtcHR5KGF3YWl0IHBhcnNlZC5lbXB0eSk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggZW1wdHkgbWVzc2FnZSBpdCBzaG91bGQgZmFpbCBmb3IgXCJuZXZlclwiJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gc2NvcGVFbXB0eShhd2FpdCBwYXJzZWQuZW1wdHksICduZXZlcicpO1xuXHRjb25zdCBleHBlY3RlZCA9IGZhbHNlO1xuXHR0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd3aXRoIGVtcHR5IG1lc3NhZ2UgaXQgc2hvdWxkIGZhaWwgZm9yIFwiYWx3YXlzXCInLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBzY29wZUVtcHR5KGF3YWl0IHBhcnNlZC5lbXB0eSwgJ2Fsd2F5cycpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG4iXX0=