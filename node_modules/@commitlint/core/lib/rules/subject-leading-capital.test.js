'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _subjectLeadingCapital = require('./subject-leading-capital');

var _subjectLeadingCapital2 = _interopRequireDefault(_subjectLeadingCapital);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	empty: 'chore:\n',
	with: `chore: Subject\n`,
	without: `chore: subject\n`
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	with: (0, _parse2.default)(messages.with),
	without: (0, _parse2.default)(messages.without)
};

(0, _ava2.default)('empty should succeed', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _subjectLeadingCapital2.default)((yield parsed.empty)),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty against "always" should succeed', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _subjectLeadingCapital2.default)((yield parsed.empty), 'always', 'uppercase'),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty against "never" should succeed', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _check5 = (0, _subjectLeadingCapital2.default)((yield parsed.empty), 'never', 'uppercase'),
		    _check6 = _slicedToArray(_check5, 1),
		    actual = _check6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with should succeed', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _check7 = (0, _subjectLeadingCapital2.default)((yield parsed.with)),
		    _check8 = _slicedToArray(_check7, 1),
		    actual = _check8[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('with against "always" should succeed', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _check9 = (0, _subjectLeadingCapital2.default)((yield parsed.with), 'always', 'uppercase'),
		    _check10 = _slicedToArray(_check9, 1),
		    actual = _check10[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('with against "never" should fail', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _check11 = (0, _subjectLeadingCapital2.default)((yield parsed.with), 'never', 'uppercase'),
		    _check12 = _slicedToArray(_check11, 1),
		    actual = _check12[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('without should fail', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _check13 = (0, _subjectLeadingCapital2.default)((yield parsed.without), 'always', 'uppercase'),
		    _check14 = _slicedToArray(_check13, 1),
		    actual = _check14[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('without against "always" should fail', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _check15 = (0, _subjectLeadingCapital2.default)((yield parsed.without), 'always', 'uppercase'),
		    _check16 = _slicedToArray(_check15, 1),
		    actual = _check16[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('without against "never" should succeed', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _check17 = (0, _subjectLeadingCapital2.default)((yield parsed.without), 'never', 'uppercase'),
		    _check18 = _slicedToArray(_check17, 1),
		    actual = _check18[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9zdWJqZWN0LWxlYWRpbmctY2FwaXRhbC50ZXN0LmpzIl0sIm5hbWVzIjpbIm1lc3NhZ2VzIiwiZW1wdHkiLCJ3aXRoIiwid2l0aG91dCIsInBhcnNlZCIsInQiLCJhY3R1YWwiLCJleHBlY3RlZCIsImlzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLFdBQVc7QUFDaEJDLFFBQU8sVUFEUztBQUVoQkMsT0FBTyxrQkFGUztBQUdoQkMsVUFBVTtBQUhNLENBQWpCOztBQU1BLElBQU1DLFNBQVM7QUFDZEgsUUFBTyxxQkFBTUQsU0FBU0MsS0FBZixDQURPO0FBRWRDLE9BQU0scUJBQU1GLFNBQVNFLElBQWYsQ0FGUTtBQUdkQyxVQUFTLHFCQUFNSCxTQUFTRyxPQUFmO0FBSEssQ0FBZjs7QUFNQSxtQkFBSyxzQkFBTDtBQUFBLDhCQUE2QixXQUFNRSxDQUFOLEVBQVc7QUFBQSxlQUN0QixzQ0FBTSxNQUFNRCxPQUFPSCxLQUFuQixFQURzQjtBQUFBO0FBQUEsTUFDaENLLE1BRGdDOztBQUV2QyxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyx1Q0FBTDtBQUFBLCtCQUE4QyxXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDdkMsc0NBQU0sTUFBTUQsT0FBT0gsS0FBbkIsR0FBMEIsUUFBMUIsRUFBb0MsV0FBcEMsQ0FEdUM7QUFBQTtBQUFBLE1BQ2pESyxNQURpRDs7QUFFeEQsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssc0NBQUw7QUFBQSwrQkFBNkMsV0FBTUYsQ0FBTixFQUFXO0FBQUEsZ0JBQ3RDLHNDQUFNLE1BQU1ELE9BQU9ILEtBQW5CLEdBQTBCLE9BQTFCLEVBQW1DLFdBQW5DLENBRHNDO0FBQUE7QUFBQSxNQUNoREssTUFEZ0Q7O0FBRXZELE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHFCQUFMO0FBQUEsK0JBQTRCLFdBQU1GLENBQU4sRUFBVztBQUFBLGdCQUNyQixzQ0FBTSxNQUFNRCxPQUFPRixJQUFuQixFQURxQjtBQUFBO0FBQUEsTUFDL0JJLE1BRCtCOztBQUV0QyxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyxzQ0FBTDtBQUFBLCtCQUE2QyxXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDdEMsc0NBQU0sTUFBTUQsT0FBT0YsSUFBbkIsR0FBeUIsUUFBekIsRUFBbUMsV0FBbkMsQ0FEc0M7QUFBQTtBQUFBLE1BQ2hESSxNQURnRDs7QUFFdkQsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssa0NBQUw7QUFBQSwrQkFBeUMsV0FBTUYsQ0FBTixFQUFXO0FBQUEsaUJBQ2xDLHNDQUFNLE1BQU1ELE9BQU9GLElBQW5CLEdBQXlCLE9BQXpCLEVBQWtDLFdBQWxDLENBRGtDO0FBQUE7QUFBQSxNQUM1Q0ksTUFENEM7O0FBRW5ELE1BQU1DLFdBQVcsS0FBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLHFCQUFMO0FBQUEsK0JBQTRCLFdBQU1GLENBQU4sRUFBVztBQUFBLGlCQUNyQixzQ0FBTSxNQUFNRCxPQUFPRCxPQUFuQixHQUE0QixRQUE1QixFQUFzQyxXQUF0QyxDQURxQjtBQUFBO0FBQUEsTUFDL0JHLE1BRCtCOztBQUV0QyxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyxzQ0FBTDtBQUFBLCtCQUE2QyxXQUFNRixDQUFOLEVBQVc7QUFBQSxpQkFDdEMsc0NBQU0sTUFBTUQsT0FBT0QsT0FBbkIsR0FBNEIsUUFBNUIsRUFBc0MsV0FBdEMsQ0FEc0M7QUFBQTtBQUFBLE1BQ2hERyxNQURnRDs7QUFFdkQsTUFBTUMsV0FBVyxLQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssd0NBQUw7QUFBQSwrQkFBK0MsV0FBTUYsQ0FBTixFQUFXO0FBQUEsaUJBQ3hDLHNDQUFNLE1BQU1ELE9BQU9ELE9BQW5CLEdBQTRCLE9BQTVCLEVBQXFDLFdBQXJDLENBRHdDO0FBQUE7QUFBQSxNQUNsREcsTUFEa0Q7O0FBRXpELE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6InN1YmplY3QtbGVhZGluZy1jYXBpdGFsLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4uL2xpYnJhcnkvcGFyc2UnO1xuaW1wb3J0IGNoZWNrIGZyb20gJy4vc3ViamVjdC1sZWFkaW5nLWNhcGl0YWwnO1xuXG5jb25zdCBtZXNzYWdlcyA9IHtcblx0ZW1wdHk6ICdjaG9yZTpcXG4nLFxuXHR3aXRoOiBgY2hvcmU6IFN1YmplY3RcXG5gLFxuXHR3aXRob3V0OiBgY2hvcmU6IHN1YmplY3RcXG5gXG59O1xuXG5jb25zdCBwYXJzZWQgPSB7XG5cdGVtcHR5OiBwYXJzZShtZXNzYWdlcy5lbXB0eSksXG5cdHdpdGg6IHBhcnNlKG1lc3NhZ2VzLndpdGgpLFxuXHR3aXRob3V0OiBwYXJzZShtZXNzYWdlcy53aXRob3V0KVxufTtcblxudGVzdCgnZW1wdHkgc2hvdWxkIHN1Y2NlZWQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuZW1wdHkpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnZW1wdHkgYWdhaW5zdCBcImFsd2F5c1wiIHNob3VsZCBzdWNjZWVkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmVtcHR5LCAnYWx3YXlzJywgJ3VwcGVyY2FzZScpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnZW1wdHkgYWdhaW5zdCBcIm5ldmVyXCIgc2hvdWxkIHN1Y2NlZWQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuZW1wdHksICduZXZlcicsICd1cHBlcmNhc2UnKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggc2hvdWxkIHN1Y2NlZWQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQud2l0aCk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd3aXRoIGFnYWluc3QgXCJhbHdheXNcIiBzaG91bGQgc3VjY2VlZCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC53aXRoLCAnYWx3YXlzJywgJ3VwcGVyY2FzZScpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBhZ2FpbnN0IFwibmV2ZXJcIiBzaG91bGQgZmFpbCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC53aXRoLCAnbmV2ZXInLCAndXBwZXJjYXNlJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aG91dCBzaG91bGQgZmFpbCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC53aXRob3V0LCAnYWx3YXlzJywgJ3VwcGVyY2FzZScpO1xuXHRjb25zdCBleHBlY3RlZCA9IGZhbHNlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGhvdXQgYWdhaW5zdCBcImFsd2F5c1wiIHNob3VsZCBmYWlsJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLndpdGhvdXQsICdhbHdheXMnLCAndXBwZXJjYXNlJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aG91dCBhZ2FpbnN0IFwibmV2ZXJcIiBzaG91bGQgc3VjY2VlZCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC53aXRob3V0LCAnbmV2ZXInLCAndXBwZXJjYXNlJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuIl19