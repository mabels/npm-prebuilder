'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _typeEnum = require('./type-enum');

var _typeEnum2 = _interopRequireDefault(_typeEnum);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	empty: '(): \n',
	a: 'a(): \n',
	b: 'b(): \n'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	a: (0, _parse2.default)(messages.a),
	b: (0, _parse2.default)(messages.b)
};

(0, _ava2.default)('empty succeeds', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _typeEnum2.default)((yield parsed.empty)),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty on "a" succeeds', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _typeEnum2.default)((yield parsed.empty), '', ['a']),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty on "always a" succeeds', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _check5 = (0, _typeEnum2.default)((yield parsed.empty), 'always', ['a']),
		    _check6 = _slicedToArray(_check5, 1),
		    actual = _check6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty on "never a" succeeds', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _check7 = (0, _typeEnum2.default)((yield parsed.empty), 'never', ['a']),
		    _check8 = _slicedToArray(_check7, 1),
		    actual = _check8[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty on "always a, b" succeeds', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _check9 = (0, _typeEnum2.default)((yield parsed.empty), 'always', ['a', 'b']),
		    _check10 = _slicedToArray(_check9, 1),
		    actual = _check10[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty on "never a, b" succeeds', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _check11 = (0, _typeEnum2.default)((yield parsed.empty), 'neber', ['a', 'b']),
		    _check12 = _slicedToArray(_check11, 1),
		    actual = _check12[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('a on "a" succeeds', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _check13 = (0, _typeEnum2.default)((yield parsed.a), '', ['a']),
		    _check14 = _slicedToArray(_check13, 1),
		    actual = _check14[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('a on "always a" succeeds', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _check15 = (0, _typeEnum2.default)((yield parsed.a), 'always', ['a']),
		    _check16 = _slicedToArray(_check15, 1),
		    actual = _check16[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('a on "never a" fails', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _check17 = (0, _typeEnum2.default)((yield parsed.a), 'never', ['a']),
		    _check18 = _slicedToArray(_check17, 1),
		    actual = _check18[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());

(0, _ava2.default)('b on "b" succeeds', function () {
	var _ref10 = _asyncToGenerator(function* (t) {
		var _check19 = (0, _typeEnum2.default)((yield parsed.b), '', ['b']),
		    _check20 = _slicedToArray(_check19, 1),
		    actual = _check20[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x10) {
		return _ref10.apply(this, arguments);
	};
}());

(0, _ava2.default)('b on "always b" succeeds', function () {
	var _ref11 = _asyncToGenerator(function* (t) {
		var _check21 = (0, _typeEnum2.default)((yield parsed.b), 'always', ['b']),
		    _check22 = _slicedToArray(_check21, 1),
		    actual = _check22[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x11) {
		return _ref11.apply(this, arguments);
	};
}());

(0, _ava2.default)('b on "never b" fails', function () {
	var _ref12 = _asyncToGenerator(function* (t) {
		var _check23 = (0, _typeEnum2.default)((yield parsed.b), 'never', ['b']),
		    _check24 = _slicedToArray(_check23, 1),
		    actual = _check24[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x12) {
		return _ref12.apply(this, arguments);
	};
}());

(0, _ava2.default)('a on "a, b" succeeds', function () {
	var _ref13 = _asyncToGenerator(function* (t) {
		var _check25 = (0, _typeEnum2.default)((yield parsed.a), '', ['a', 'b']),
		    _check26 = _slicedToArray(_check25, 1),
		    actual = _check26[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x13) {
		return _ref13.apply(this, arguments);
	};
}());

(0, _ava2.default)('a on "always a, b" succeeds', function () {
	var _ref14 = _asyncToGenerator(function* (t) {
		var _check27 = (0, _typeEnum2.default)((yield parsed.a), 'always', ['a', 'b']),
		    _check28 = _slicedToArray(_check27, 1),
		    actual = _check28[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x14) {
		return _ref14.apply(this, arguments);
	};
}());

(0, _ava2.default)('a on "never a, b" fails', function () {
	var _ref15 = _asyncToGenerator(function* (t) {
		var _check29 = (0, _typeEnum2.default)((yield parsed.a), 'never', ['a', 'b']),
		    _check30 = _slicedToArray(_check29, 1),
		    actual = _check30[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x15) {
		return _ref15.apply(this, arguments);
	};
}());

(0, _ava2.default)('b on "a, b" succeeds', function () {
	var _ref16 = _asyncToGenerator(function* (t) {
		var _check31 = (0, _typeEnum2.default)((yield parsed.b), '', ['a', 'b']),
		    _check32 = _slicedToArray(_check31, 1),
		    actual = _check32[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x16) {
		return _ref16.apply(this, arguments);
	};
}());

(0, _ava2.default)('b on "always a, b" succeeds', function () {
	var _ref17 = _asyncToGenerator(function* (t) {
		var _check33 = (0, _typeEnum2.default)((yield parsed.b), 'always', ['a', 'b']),
		    _check34 = _slicedToArray(_check33, 1),
		    actual = _check34[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x17) {
		return _ref17.apply(this, arguments);
	};
}());

(0, _ava2.default)('b on "never a, b" fails', function () {
	var _ref18 = _asyncToGenerator(function* (t) {
		var _check35 = (0, _typeEnum2.default)((yield parsed.b), 'never', ['a', 'b']),
		    _check36 = _slicedToArray(_check35, 1),
		    actual = _check36[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x18) {
		return _ref18.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,