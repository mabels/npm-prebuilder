'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _bodyCase25 = require('./body-case');

var _bodyCase26 = _interopRequireDefault(_bodyCase25);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	empty: 'chore: subject',
	lowercase: 'chore: subject\nbody',
	mixedcase: 'chore: subject\nBody',
	uppercase: 'chore: subject\nBODY'
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	lowercase: (0, _parse2.default)(messages.lowercase),
	mixedcase: (0, _parse2.default)(messages.mixedcase),
	uppercase: (0, _parse2.default)(messages.uppercase)
};

(0, _ava2.default)('with empty body should succeed for "never lowercase"', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _bodyCase = (0, _bodyCase26.default)((yield parsed.empty), 'never', 'lowercase'),
		    _bodyCase2 = _slicedToArray(_bodyCase, 1),
		    actual = _bodyCase2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with empty body should succeed for "always lowercase"', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _bodyCase3 = (0, _bodyCase26.default)((yield parsed.empty), 'always', 'lowercase'),
		    _bodyCase4 = _slicedToArray(_bodyCase3, 1),
		    actual = _bodyCase4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with empty body should succeed for "never uppercase"', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _bodyCase5 = (0, _bodyCase26.default)((yield parsed.empty), 'never', 'uppercase'),
		    _bodyCase6 = _slicedToArray(_bodyCase5, 1),
		    actual = _bodyCase6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with empty body should succeed for "always uppercase"', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _bodyCase7 = (0, _bodyCase26.default)((yield parsed.empty), 'always', 'uppercase'),
		    _bodyCase8 = _slicedToArray(_bodyCase7, 1),
		    actual = _bodyCase8[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('with lowercase body should fail for "never lowercase"', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _bodyCase9 = (0, _bodyCase26.default)((yield parsed.lowercase), 'never', 'lowercase'),
		    _bodyCase10 = _slicedToArray(_bodyCase9, 1),
		    actual = _bodyCase10[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('with lowercase body should succeed for "always lowercase"', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _bodyCase11 = (0, _bodyCase26.default)((yield parsed.lowercase), 'always', 'lowercase'),
		    _bodyCase12 = _slicedToArray(_bodyCase11, 1),
		    actual = _bodyCase12[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixedcase body should succeed for "never lowercase"', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _bodyCase13 = (0, _bodyCase26.default)((yield parsed.mixedcase), 'never', 'lowercase'),
		    _bodyCase14 = _slicedToArray(_bodyCase13, 1),
		    actual = _bodyCase14[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixedcase body should fail for "always lowercase"', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _bodyCase15 = (0, _bodyCase26.default)((yield parsed.mixedcase), 'always', 'lowercase'),
		    _bodyCase16 = _slicedToArray(_bodyCase15, 1),
		    actual = _bodyCase16[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixedcase body should succeed for "never uppercase"', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _bodyCase17 = (0, _bodyCase26.default)((yield parsed.mixedcase), 'never', 'uppercase'),
		    _bodyCase18 = _slicedToArray(_bodyCase17, 1),
		    actual = _bodyCase18[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixedcase body should fail for "always uppercase"', function () {
	var _ref10 = _asyncToGenerator(function* (t) {
		var _bodyCase19 = (0, _bodyCase26.default)((yield parsed.mixedcase), 'always', 'uppercase'),
		    _bodyCase20 = _slicedToArray(_bodyCase19, 1),
		    actual = _bodyCase20[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x10) {
		return _ref10.apply(this, arguments);
	};
}());

(0, _ava2.default)('with uppercase body should fail for "never uppercase"', function () {
	var _ref11 = _asyncToGenerator(function* (t) {
		var _bodyCase21 = (0, _bodyCase26.default)((yield parsed.uppercase), 'never', 'uppercase'),
		    _bodyCase22 = _slicedToArray(_bodyCase21, 1),
		    actual = _bodyCase22[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x11) {
		return _ref11.apply(this, arguments);
	};
}());

(0, _ava2.default)('with lowercase body should succeed for "always uppercase"', function () {
	var _ref12 = _asyncToGenerator(function* (t) {
		var _bodyCase23 = (0, _bodyCase26.default)((yield parsed.uppercase), 'always', 'uppercase'),
		    _bodyCase24 = _slicedToArray(_bodyCase23, 1),
		    actual = _bodyCase24[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x12) {
		return _ref12.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,