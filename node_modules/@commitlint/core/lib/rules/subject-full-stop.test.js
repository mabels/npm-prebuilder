'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _subjectFullStop = require('./subject-full-stop');

var _subjectFullStop2 = _interopRequireDefault(_subjectFullStop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	empty: 'chore:\n',
	with: `chore: subject.\n`,
	without: `chore: subject\n`
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	with: (0, _parse2.default)(messages.with),
	without: (0, _parse2.default)(messages.without)
};

(0, _ava2.default)('empty against "always" should succeed', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _subjectFullStop2.default)((yield parsed.empty), 'always', '.'),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('empty against "never ." should succeed', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _subjectFullStop2.default)((yield parsed.empty), 'never', '.'),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with against "always ." should succeed', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _check5 = (0, _subjectFullStop2.default)((yield parsed.with), 'always', '.'),
		    _check6 = _slicedToArray(_check5, 1),
		    actual = _check6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with against "never ." should fail', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _check7 = (0, _subjectFullStop2.default)((yield parsed.with), 'never', '.'),
		    _check8 = _slicedToArray(_check7, 1),
		    actual = _check8[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('without against "always ." should fail', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _check9 = (0, _subjectFullStop2.default)((yield parsed.without), 'always', '.'),
		    _check10 = _slicedToArray(_check9, 1),
		    actual = _check10[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('without against "never ." should succeed', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _check11 = (0, _subjectFullStop2.default)((yield parsed.without), 'never', '.'),
		    _check12 = _slicedToArray(_check11, 1),
		    actual = _check12[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9zdWJqZWN0LWZ1bGwtc3RvcC50ZXN0LmpzIl0sIm5hbWVzIjpbIm1lc3NhZ2VzIiwiZW1wdHkiLCJ3aXRoIiwid2l0aG91dCIsInBhcnNlZCIsInQiLCJhY3R1YWwiLCJleHBlY3RlZCIsImlzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLFdBQVc7QUFDaEJDLFFBQU8sVUFEUztBQUVoQkMsT0FBTyxtQkFGUztBQUdoQkMsVUFBVTtBQUhNLENBQWpCOztBQU1BLElBQU1DLFNBQVM7QUFDZEgsUUFBTyxxQkFBTUQsU0FBU0MsS0FBZixDQURPO0FBRWRDLE9BQU0scUJBQU1GLFNBQVNFLElBQWYsQ0FGUTtBQUdkQyxVQUFTLHFCQUFNSCxTQUFTRyxPQUFmO0FBSEssQ0FBZjs7QUFNQSxtQkFBSyx1Q0FBTDtBQUFBLDhCQUE4QyxXQUFNRSxDQUFOLEVBQVc7QUFBQSxlQUN2QyxnQ0FBTSxNQUFNRCxPQUFPSCxLQUFuQixHQUEwQixRQUExQixFQUFvQyxHQUFwQyxDQUR1QztBQUFBO0FBQUEsTUFDakRLLE1BRGlEOztBQUV4RCxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyx3Q0FBTDtBQUFBLCtCQUErQyxXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDeEMsZ0NBQU0sTUFBTUQsT0FBT0gsS0FBbkIsR0FBMEIsT0FBMUIsRUFBbUMsR0FBbkMsQ0FEd0M7QUFBQTtBQUFBLE1BQ2xESyxNQURrRDs7QUFFekQsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssd0NBQUw7QUFBQSwrQkFBK0MsV0FBTUYsQ0FBTixFQUFXO0FBQUEsZ0JBQ3hDLGdDQUFNLE1BQU1ELE9BQU9GLElBQW5CLEdBQXlCLFFBQXpCLEVBQW1DLEdBQW5DLENBRHdDO0FBQUE7QUFBQSxNQUNsREksTUFEa0Q7O0FBRXpELE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLG9DQUFMO0FBQUEsK0JBQTJDLFdBQU1GLENBQU4sRUFBVztBQUFBLGdCQUNwQyxnQ0FBTSxNQUFNRCxPQUFPRixJQUFuQixHQUF5QixPQUF6QixFQUFrQyxHQUFsQyxDQURvQztBQUFBO0FBQUEsTUFDOUNJLE1BRDhDOztBQUVyRCxNQUFNQyxXQUFXLEtBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyx3Q0FBTDtBQUFBLCtCQUErQyxXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDeEMsZ0NBQU0sTUFBTUQsT0FBT0QsT0FBbkIsR0FBNEIsUUFBNUIsRUFBc0MsR0FBdEMsQ0FEd0M7QUFBQTtBQUFBLE1BQ2xERyxNQURrRDs7QUFFekQsTUFBTUMsV0FBVyxLQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssMENBQUw7QUFBQSwrQkFBaUQsV0FBTUYsQ0FBTixFQUFXO0FBQUEsaUJBQzFDLGdDQUFNLE1BQU1ELE9BQU9ELE9BQW5CLEdBQTRCLE9BQTVCLEVBQXFDLEdBQXJDLENBRDBDO0FBQUE7QUFBQSxNQUNwREcsTUFEb0Q7O0FBRTNELE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6InN1YmplY3QtZnVsbC1zdG9wLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4uL2xpYnJhcnkvcGFyc2UnO1xuaW1wb3J0IGNoZWNrIGZyb20gJy4vc3ViamVjdC1mdWxsLXN0b3AnO1xuXG5jb25zdCBtZXNzYWdlcyA9IHtcblx0ZW1wdHk6ICdjaG9yZTpcXG4nLFxuXHR3aXRoOiBgY2hvcmU6IHN1YmplY3QuXFxuYCxcblx0d2l0aG91dDogYGNob3JlOiBzdWJqZWN0XFxuYFxufTtcblxuY29uc3QgcGFyc2VkID0ge1xuXHRlbXB0eTogcGFyc2UobWVzc2FnZXMuZW1wdHkpLFxuXHR3aXRoOiBwYXJzZShtZXNzYWdlcy53aXRoKSxcblx0d2l0aG91dDogcGFyc2UobWVzc2FnZXMud2l0aG91dClcbn07XG5cbnRlc3QoJ2VtcHR5IGFnYWluc3QgXCJhbHdheXNcIiBzaG91bGQgc3VjY2VlZCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC5lbXB0eSwgJ2Fsd2F5cycsICcuJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCdlbXB0eSBhZ2FpbnN0IFwibmV2ZXIgLlwiIHNob3VsZCBzdWNjZWVkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLmVtcHR5LCAnbmV2ZXInLCAnLicpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBhZ2FpbnN0IFwiYWx3YXlzIC5cIiBzaG91bGQgc3VjY2VlZCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC53aXRoLCAnYWx3YXlzJywgJy4nKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggYWdhaW5zdCBcIm5ldmVyIC5cIiBzaG91bGQgZmFpbCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC53aXRoLCAnbmV2ZXInLCAnLicpO1xuXHRjb25zdCBleHBlY3RlZCA9IGZhbHNlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGhvdXQgYWdhaW5zdCBcImFsd2F5cyAuXCIgc2hvdWxkIGZhaWwnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQud2l0aG91dCwgJ2Fsd2F5cycsICcuJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gZmFsc2U7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aG91dCBhZ2FpbnN0IFwibmV2ZXIgLlwiIHNob3VsZCBzdWNjZWVkJywgYXN5bmMgdCA9PiB7XG5cdGNvbnN0IFthY3R1YWxdID0gY2hlY2soYXdhaXQgcGFyc2VkLndpdGhvdXQsICduZXZlcicsICcuJyk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuIl19