'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _footerMaxLength = require('./footer-max-length');

var _footerMaxLength2 = _interopRequireDefault(_footerMaxLength);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var short = 'BREAKING CHANGE: a';
var long = 'BREAKING CHANGE: ab';

var value = short.length;

var messages = {
	simple: 'chore: subject',
	empty: 'chore: subject\nbody',
	short: `chore: subject\n${short}`,
	long: `chore: subject\n${long}`
};

var parsed = {
	simple: (0, _parse2.default)(messages.simple),
	empty: (0, _parse2.default)(messages.empty),
	short: (0, _parse2.default)(messages.short),
	long: (0, _parse2.default)(messages.long)
};

(0, _ava2.default)('with simple should succeed', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _check = (0, _footerMaxLength2.default)((yield parsed.simple), '', value),
		    _check2 = _slicedToArray(_check, 1),
		    actual = _check2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with empty should succeed', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _check3 = (0, _footerMaxLength2.default)((yield parsed.empty), '', value),
		    _check4 = _slicedToArray(_check3, 1),
		    actual = _check4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with short should succeed', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _check5 = (0, _footerMaxLength2.default)((yield parsed.short), '', value),
		    _check6 = _slicedToArray(_check5, 1),
		    actual = _check6[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with long should fail', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _check7 = (0, _footerMaxLength2.default)((yield parsed.long), '', value),
		    _check8 = _slicedToArray(_check7, 1),
		    actual = _check8[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydWxlcy9mb290ZXItbWF4LWxlbmd0aC50ZXN0LmpzIl0sIm5hbWVzIjpbInNob3J0IiwibG9uZyIsInZhbHVlIiwibGVuZ3RoIiwibWVzc2FnZXMiLCJzaW1wbGUiLCJlbXB0eSIsInBhcnNlZCIsInQiLCJhY3R1YWwiLCJleHBlY3RlZCIsImlzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLFFBQVEsb0JBQWQ7QUFDQSxJQUFNQyxPQUFPLHFCQUFiOztBQUVBLElBQU1DLFFBQVFGLE1BQU1HLE1BQXBCOztBQUVBLElBQU1DLFdBQVc7QUFDaEJDLFNBQVEsZ0JBRFE7QUFFaEJDLFFBQU8sc0JBRlM7QUFHaEJOLFFBQVEsbUJBQWtCQSxLQUFNLEVBSGhCO0FBSWhCQyxPQUFPLG1CQUFrQkEsSUFBSztBQUpkLENBQWpCOztBQU9BLElBQU1NLFNBQVM7QUFDZEYsU0FBUSxxQkFBTUQsU0FBU0MsTUFBZixDQURNO0FBRWRDLFFBQU8scUJBQU1GLFNBQVNFLEtBQWYsQ0FGTztBQUdkTixRQUFPLHFCQUFNSSxTQUFTSixLQUFmLENBSE87QUFJZEMsT0FBTSxxQkFBTUcsU0FBU0gsSUFBZjtBQUpRLENBQWY7O0FBT0EsbUJBQUssNEJBQUw7QUFBQSw4QkFBbUMsV0FBTU8sQ0FBTixFQUFXO0FBQUEsZUFDNUIsZ0NBQU0sTUFBTUQsT0FBT0YsTUFBbkIsR0FBMkIsRUFBM0IsRUFBK0JILEtBQS9CLENBRDRCO0FBQUE7QUFBQSxNQUN0Q08sTUFEc0M7O0FBRTdDLE1BQU1DLFdBQVcsSUFBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBOztBQU1BLG1CQUFLLDJCQUFMO0FBQUEsK0JBQWtDLFdBQU1GLENBQU4sRUFBVztBQUFBLGdCQUMzQixnQ0FBTSxNQUFNRCxPQUFPRCxLQUFuQixHQUEwQixFQUExQixFQUE4QkosS0FBOUIsQ0FEMkI7QUFBQTtBQUFBLE1BQ3JDTyxNQURxQzs7QUFFNUMsTUFBTUMsV0FBVyxJQUFqQjtBQUNBRixJQUFFRyxFQUFGLENBQUtGLE1BQUwsRUFBYUMsUUFBYjtBQUNBLEVBSkQ7O0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBTUEsbUJBQUssMkJBQUw7QUFBQSwrQkFBa0MsV0FBTUYsQ0FBTixFQUFXO0FBQUEsZ0JBQzNCLGdDQUFNLE1BQU1ELE9BQU9QLEtBQW5CLEdBQTBCLEVBQTFCLEVBQThCRSxLQUE5QixDQUQyQjtBQUFBO0FBQUEsTUFDckNPLE1BRHFDOztBQUU1QyxNQUFNQyxXQUFXLElBQWpCO0FBQ0FGLElBQUVHLEVBQUYsQ0FBS0YsTUFBTCxFQUFhQyxRQUFiO0FBQ0EsRUFKRDs7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFNQSxtQkFBSyx1QkFBTDtBQUFBLCtCQUE4QixXQUFNRixDQUFOLEVBQVc7QUFBQSxnQkFDdkIsZ0NBQU0sTUFBTUQsT0FBT04sSUFBbkIsR0FBeUIsRUFBekIsRUFBNkJDLEtBQTdCLENBRHVCO0FBQUE7QUFBQSxNQUNqQ08sTUFEaUM7O0FBRXhDLE1BQU1DLFdBQVcsS0FBakI7QUFDQUYsSUFBRUcsRUFBRixDQUFLRixNQUFMLEVBQWFDLFFBQWI7QUFDQSxFQUpEOztBQUFBO0FBQUE7QUFBQTtBQUFBIiwiZmlsZSI6ImZvb3Rlci1tYXgtbGVuZ3RoLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdhdmEnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4uL2xpYnJhcnkvcGFyc2UnO1xuaW1wb3J0IGNoZWNrIGZyb20gJy4vZm9vdGVyLW1heC1sZW5ndGgnO1xuXG5jb25zdCBzaG9ydCA9ICdCUkVBS0lORyBDSEFOR0U6IGEnO1xuY29uc3QgbG9uZyA9ICdCUkVBS0lORyBDSEFOR0U6IGFiJztcblxuY29uc3QgdmFsdWUgPSBzaG9ydC5sZW5ndGg7XG5cbmNvbnN0IG1lc3NhZ2VzID0ge1xuXHRzaW1wbGU6ICdjaG9yZTogc3ViamVjdCcsXG5cdGVtcHR5OiAnY2hvcmU6IHN1YmplY3RcXG5ib2R5Jyxcblx0c2hvcnQ6IGBjaG9yZTogc3ViamVjdFxcbiR7c2hvcnR9YCxcblx0bG9uZzogYGNob3JlOiBzdWJqZWN0XFxuJHtsb25nfWBcbn07XG5cbmNvbnN0IHBhcnNlZCA9IHtcblx0c2ltcGxlOiBwYXJzZShtZXNzYWdlcy5zaW1wbGUpLFxuXHRlbXB0eTogcGFyc2UobWVzc2FnZXMuZW1wdHkpLFxuXHRzaG9ydDogcGFyc2UobWVzc2FnZXMuc2hvcnQpLFxuXHRsb25nOiBwYXJzZShtZXNzYWdlcy5sb25nKVxufTtcblxudGVzdCgnd2l0aCBzaW1wbGUgc2hvdWxkIHN1Y2NlZWQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuc2ltcGxlLCAnJywgdmFsdWUpO1xuXHRjb25zdCBleHBlY3RlZCA9IHRydWU7XG5cdHQuaXMoYWN0dWFsLCBleHBlY3RlZCk7XG59KTtcblxudGVzdCgnd2l0aCBlbXB0eSBzaG91bGQgc3VjY2VlZCcsIGFzeW5jIHQgPT4ge1xuXHRjb25zdCBbYWN0dWFsXSA9IGNoZWNrKGF3YWl0IHBhcnNlZC5lbXB0eSwgJycsIHZhbHVlKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSB0cnVlO1xuXHR0LmlzKGFjdHVhbCwgZXhwZWN0ZWQpO1xufSk7XG5cbnRlc3QoJ3dpdGggc2hvcnQgc2hvdWxkIHN1Y2NlZWQnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQuc2hvcnQsICcnLCB2YWx1ZSk7XG5cdGNvbnN0IGV4cGVjdGVkID0gdHJ1ZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuXG50ZXN0KCd3aXRoIGxvbmcgc2hvdWxkIGZhaWwnLCBhc3luYyB0ID0+IHtcblx0Y29uc3QgW2FjdHVhbF0gPSBjaGVjayhhd2FpdCBwYXJzZWQubG9uZywgJycsIHZhbHVlKTtcblx0Y29uc3QgZXhwZWN0ZWQgPSBmYWxzZTtcblx0dC5pcyhhY3R1YWwsIGV4cGVjdGVkKTtcbn0pO1xuIl19