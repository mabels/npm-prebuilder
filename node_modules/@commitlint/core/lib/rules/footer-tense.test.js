'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _parse = require('../library/parse');

var _parse2 = _interopRequireDefault(_parse);

var _footerTense31 = require('./footer-tense');

var _footerTense32 = _interopRequireDefault(_footerTense31);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var messages = {
	empty: 'chore: subject\nbody',
	presentImperative: `chore: subject\nBREAKING CHANGE: we implement things`,
	presentParticiple: `chore: subject\nBREAKING CHANGE: implementing things`,
	presentThirdPerson: `chore: subject\nBREAKING CHANGE: implements things`,
	past: `chore: subject\nBREAKING CHANGE: we did implement things`,
	mixed: `chore: subject\nBREAKING CHANGE: implement, implementing, implements, implemented`
};

var parsed = {
	empty: (0, _parse2.default)(messages.empty),
	presentImperative: (0, _parse2.default)(messages.presentImperative),
	presentParticiple: (0, _parse2.default)(messages.presentParticiple),
	presentThirdPerson: (0, _parse2.default)(messages.presentImperative),
	past: (0, _parse2.default)(messages.past),
	mixed: (0, _parse2.default)(messages.mixed)
};

(0, _ava2.default)('with empty footer should succeed', function () {
	var _ref = _asyncToGenerator(function* (t) {
		var _footerTense = (0, _footerTense32.default)((yield parsed.empty), '', ['present-imperative']),
		    _footerTense2 = _slicedToArray(_footerTense, 1),
		    actual = _footerTense2[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x) {
		return _ref.apply(this, arguments);
	};
}());

(0, _ava2.default)('with present footer should succeed for "always present-imperative"', function () {
	var _ref2 = _asyncToGenerator(function* (t) {
		var _footerTense3 = (0, _footerTense32.default)((yield parsed.presentImperative), 'always', ['present-imperative']),
		    _footerTense4 = _slicedToArray(_footerTense3, 1),
		    actual = _footerTense4[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x2) {
		return _ref2.apply(this, arguments);
	};
}());

(0, _ava2.default)('with present footer should fail for "never present-imperative"', function () {
	var _ref3 = _asyncToGenerator(function* (t) {
		var _footerTense5 = (0, _footerTense32.default)((yield parsed.presentImperative), 'never', ['present-imperative']),
		    _footerTense6 = _slicedToArray(_footerTense5, 1),
		    actual = _footerTense6[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x3) {
		return _ref3.apply(this, arguments);
	};
}());

(0, _ava2.default)('with present footer should succeed for "always present-participle"', function () {
	var _ref4 = _asyncToGenerator(function* (t) {
		var _footerTense7 = (0, _footerTense32.default)((yield parsed.presentParticiple), 'always', ['present-participle']),
		    _footerTense8 = _slicedToArray(_footerTense7, 1),
		    actual = _footerTense8[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x4) {
		return _ref4.apply(this, arguments);
	};
}());

(0, _ava2.default)('with present footer should fail for "never present-participle"', function () {
	var _ref5 = _asyncToGenerator(function* (t) {
		var _footerTense9 = (0, _footerTense32.default)((yield parsed.presentParticiple), 'never', ['present-participle']),
		    _footerTense10 = _slicedToArray(_footerTense9, 1),
		    actual = _footerTense10[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x5) {
		return _ref5.apply(this, arguments);
	};
}());

(0, _ava2.default)('with present footer should succeed for "always present-third-person"', function () {
	var _ref6 = _asyncToGenerator(function* (t) {
		var _footerTense11 = (0, _footerTense32.default)((yield parsed.presentThirdPerson), 'always', ['present-third-person']),
		    _footerTense12 = _slicedToArray(_footerTense11, 1),
		    actual = _footerTense12[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x6) {
		return _ref6.apply(this, arguments);
	};
}());

(0, _ava2.default)('with present footer should fail for "never present-third-person"', function () {
	var _ref7 = _asyncToGenerator(function* (t) {
		var _footerTense13 = (0, _footerTense32.default)((yield parsed.presentThirdPerson), 'never', ['present-third-person']),
		    _footerTense14 = _slicedToArray(_footerTense13, 1),
		    actual = _footerTense14[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x7) {
		return _ref7.apply(this, arguments);
	};
}());

(0, _ava2.default)('with past footer should succedd for "always past-tense"', function () {
	var _ref8 = _asyncToGenerator(function* (t) {
		var _footerTense15 = (0, _footerTense32.default)((yield parsed.past), 'always', ['past-tense']),
		    _footerTense16 = _slicedToArray(_footerTense15, 1),
		    actual = _footerTense16[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x8) {
		return _ref8.apply(this, arguments);
	};
}());

(0, _ava2.default)('with past footer should fail for "never past-tense"', function () {
	var _ref9 = _asyncToGenerator(function* (t) {
		var _footerTense17 = (0, _footerTense32.default)((yield parsed.past), 'never', ['past-tense']),
		    _footerTense18 = _slicedToArray(_footerTense17, 1),
		    actual = _footerTense18[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x9) {
		return _ref9.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixed footer should fail for "always present-third-person"', function () {
	var _ref10 = _asyncToGenerator(function* (t) {
		var _footerTense19 = (0, _footerTense32.default)((yield parsed.mixed), 'always', ['present-third-person']),
		    _footerTense20 = _slicedToArray(_footerTense19, 1),
		    actual = _footerTense20[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x10) {
		return _ref10.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixed footer should fail for "always present-imperative"', function () {
	var _ref11 = _asyncToGenerator(function* (t) {
		var _footerTense21 = (0, _footerTense32.default)((yield parsed.mixed), 'always', ['present-imperative']),
		    _footerTense22 = _slicedToArray(_footerTense21, 1),
		    actual = _footerTense22[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x11) {
		return _ref11.apply(this, arguments);
	};
}());

(0, _ava2.default)('with present footer should fail for "always present-participle"', function () {
	var _ref12 = _asyncToGenerator(function* (t) {
		var _footerTense23 = (0, _footerTense32.default)((yield parsed.mixed), 'always', ['present-participle']),
		    _footerTense24 = _slicedToArray(_footerTense23, 1),
		    actual = _footerTense24[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x12) {
		return _ref12.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixed footer should fail for "always past-tense"', function () {
	var _ref13 = _asyncToGenerator(function* (t) {
		var _footerTense25 = (0, _footerTense32.default)((yield parsed.mixed), 'always', ['past-tense']),
		    _footerTense26 = _slicedToArray(_footerTense25, 1),
		    actual = _footerTense26[0];

		var expected = false;
		t.is(actual, expected);
	});

	return function (_x13) {
		return _ref13.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixed footer should succeed for "always present-third-person, present-imperative, present-participle, past-tense"', function () {
	var _ref14 = _asyncToGenerator(function* (t) {
		var _footerTense27 = (0, _footerTense32.default)((yield parsed.mixed), 'always', ['present-third-person', 'present-imperative', 'present-participle', 'past-tense']),
		    _footerTense28 = _slicedToArray(_footerTense27, 1),
		    actual = _footerTense28[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x14) {
		return _ref14.apply(this, arguments);
	};
}());

(0, _ava2.default)('with mixed footer should succeed for "never allowed: present-third-person" and matching ignored: implements', function () {
	var _ref15 = _asyncToGenerator(function* (t) {
		var _footerTense29 = (0, _footerTense32.default)((yield parsed.mixed), 'never', {
			allowed: ['present-third-person'],
			ignored: ['implements']
		}),
		    _footerTense30 = _slicedToArray(_footerTense29, 1),
		    actual = _footerTense30[0];

		var expected = true;
		t.is(actual, expected);
	});

	return function (_x15) {
		return _ref15.apply(this, arguments);
	};
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,