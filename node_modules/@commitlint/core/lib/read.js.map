{"version":3,"sources":["../src/read.js"],"names":["settings","from","to","edit","getEditCommit","isShallow","Error","SHALLOW_MESSAGE","getHistoryCommits","getCommitMessages","toplevel","top","TypeError","shallow","join","editFilePath","editFile","toString","cwd","process","found","options","Promise","resolve","reject","data","on","push","chunk"],"mappings":";;;;;;;;;;;;;;AAcA;AACA;;uEACA,iBAAiCA,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,UADR,GAC0BD,QAD1B,CACQC,IADR,EACcC,EADd,GAC0BF,QAD1B,CACcE,EADd,EACkBC,IADlB,GAC0BH,QAD1B,CACkBG,IADlB;;AAAA,WAGKA,IAHL;AAAA;AAAA;AAAA;;AAAA,uCAISC,eAJT;;AAAA;AAAA;AAAA,aAOWC,WAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,YAQQ,IAAIC,KAAJ,CAAUC,eAAV,CARR;;AAAA;AAAA,uCAWQC,kBAAkB,EAACP,IAAD,EAAOC,EAAP,EAAlB,CAXR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeO,iB;;;;;AAcf;AACA;;;AAaA;AACA;;wEACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACmBC,UADnB;;AAAA;AACOC,SADP;;AAAA,YAGK,OAAOA,GAAP,KAAe,QAHpB;AAAA;AAAA;AAAA;;AAAA,YAIQ,IAAIC,SAAJ,CAAe,qDAAf,CAJR;;AAAA;AAOOC,aAPP,GAOiB,eAAKC,IAAL,CAAUH,GAAV,EAAe,cAAf,CAPjB;AAAA,wCAQQ,0BAAOE,OAAP,CARR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeR,S;;;;;AAWf;AACA;;;;wEACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACmBK,UADnB;;AAAA;AACOC,SADP;;AAAA,YAGK,OAAOA,GAAP,KAAe,QAHpB;AAAA;AAAA;AAAA;;AAAA,YAIQ,IAAIC,SAAJ,CAAe,qDAAf,CAJR;;AAAA;AAOOG,kBAPP,GAOsB,eAAKD,IAAL,CAAUH,GAAV,EAAe,qBAAf,CAPtB;AAAA;AAAA,aAQwB,kBAASI,YAAT,CARxB;;AAAA;AAQOC,cARP;AAAA,wCASQ,CAAE,GAAEA,SAASC,QAAT,CAAkB,OAAlB,CAA2B,IAA/B,CATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeb,a;;;;;AAYf;AACA;;;;wEACA;AAAA,MAAwBc,GAAxB,uEAA8BC,QAAQD,GAAR,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACqB,sBAAG,MAAH,EAAW,EAACA,GAAD,EAAX,CADrB;;AAAA;AACOE,WADP;;AAAA,YAGK,OAAOA,KAAP,KAAiB,QAHtB;AAAA;AAAA;AAAA;;AAAA,wCAISA,KAJT;;AAAA;AAAA,wCAOQ,eAAKN,IAAL,CAAUM,KAAV,EAAiB,IAAjB,CAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,E;;iBAAeV,Q;;;;;AAzEf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;kBAEeD,iB;;;AAEf,IAAMF,kBAAkB,CACvB,+CADuB,EAEvB,yCAFuB,EAGvB,mFAHuB,EAItBO,IAJsB,CAIjB,IAJiB,CAAxB,CAwBA,SAASN,iBAAT,CAA2Ba,OAA3B,EAAoC;AACnC,QAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,MAAMC,OAAO,EAAb;AACA,+BAAcJ,OAAd,EACEK,EADF,CACK,MADL,EACa;AAAA,UAASD,KAAKE,IAAL,CAAUC,MAAMX,QAAN,CAAe,OAAf,CAAV,CAAT;AAAA,GADb,EAEES,EAFF,CAEK,OAFL,EAEcF,MAFd,EAGEE,EAHF,CAGK,KAHL,EAGY,YAAM;AAChBH,WAAQE,IAAR;AACA,GALF;AAMA,EARM,CAAP;AASA,C","file":"read.js","sourcesContent":["import path from 'path';\nimport exists from 'path-exists';\nimport up from 'find-up';\nimport gitRawCommits from 'git-raw-commits';\nimport {readFile} from 'mz/fs';\n\nexport default getCommitMessages;\n\nconst SHALLOW_MESSAGE = [\n\t'Could not get git history from shallow clone.',\n\t'Use git fetch --shallow before linting.',\n\t'Original issue: https://git.io/vyKMq\\n Refer to https://git.io/vyKMv for details.'\n].join('\\n');\n\n// Get commit messages\n// Object => Promise<Array<String>>\nasync function getCommitMessages(settings) {\n\tconst {from, to, edit} = settings;\n\n\tif (edit) {\n\t\treturn getEditCommit();\n\t}\n\n\tif (await isShallow()) {\n\t\tthrow new Error(SHALLOW_MESSAGE);\n\t}\n\n\treturn getHistoryCommits({from, to});\n}\n\n// Get commit messages from history\n// Object => Promise<string[]>\nfunction getHistoryCommits(options) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst data = [];\n\t\tgitRawCommits(options)\n\t\t\t.on('data', chunk => data.push(chunk.toString('utf-8')))\n\t\t\t.on('error', reject)\n\t\t\t.on('end', () => {\n\t\t\t\tresolve(data);\n\t\t\t});\n\t});\n}\n\n// Check if the current repository is shallow\n// () => Promise<Boolean>\nasync function isShallow() {\n\tconst top = await toplevel();\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root - is this a git repository?`);\n\t}\n\n\tconst shallow = path.join(top, '.git/shallow');\n\treturn exists(shallow);\n}\n\n// Get recently edited commit message\n// () => Promise<Array<String>>\nasync function getEditCommit() {\n\tconst top = await toplevel();\n\n\tif (typeof top !== 'string') {\n\t\tthrow new TypeError(`Could not find git root - is this a git repository?`);\n\t}\n\n\tconst editFilePath = path.join(top, '.git/COMMIT_EDITMSG');\n\tconst editFile = await readFile(editFilePath);\n\treturn [`${editFile.toString('utf-8')}\\n`];\n}\n\n// Find the next git root\n// (start: string) => Promise<string | null>\nasync function toplevel(cwd = process.cwd()) {\n\tconst found = await up('.git', {cwd});\n\n\tif (typeof found !== 'string') {\n\t\treturn found;\n\t}\n\n\treturn path.join(found, '..');\n}\n"]}